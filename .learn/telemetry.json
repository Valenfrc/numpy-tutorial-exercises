{"telemetry_id":"j3dqn9x3h57kar5p","slug":"numpy-exercises","agent":"vscode","tutorial_started_at":1726111120970,"steps":[{"slug":"000-welcome","position":0,"files":[{"path":".learn/exercises/000-welcome/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/000-welcome/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"001-create-entry-file","position":1,"files":[{"path":".learn/exercises/001-create-entry-file/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/001-create-entry-file/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/001-create-entry-file/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"","signal":null,"memoryUsage":524288,"cpuUsage":8868,"starting_at":1726111167942,"source_code":"","ended_at":1726111168060,"exit_code":0}],"tests":[{"starting_at":1726111174116,"source_code":"","ended_at":1726111174450,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDEgaXRlbQoKLmxlYXJuL2V4ZXJjaXNlcy8wMDEtY3JlYXRlLWVudHJ5LWZpbGUvdGVzdC5weSAbWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQoKG1szMm09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMm0bWzFtMSBwYXNzZWQbWzBtG1szMm0gaW4gMC4wMXMbWzBtG1szMm0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726111148646,"completed_at":1726111174450},{"slug":"002-import-numpy","position":2,"files":[{"path":".learn/exercises/002-import-numpy/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/002-import-numpy/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/002-import-numpy/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/002-import-numpy/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1726111199395,"source_code":"aW1wb3J0IG51bXB5IGFzIG5w","ended_at":1726111199684,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDEgaXRlbQoKLmxlYXJuL2V4ZXJjaXNlcy8wMDItaW1wb3J0LW51bXB5L3Rlc3QucHkgG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQoKG1szMm09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMm0bWzFtMSBwYXNzZWQbWzBtG1szMm0gaW4gMC4wMXMbWzBtG1szMm0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726111178050,"completed_at":1726111199684},{"slug":"003-numpy-version","position":3,"files":[{"path":".learn/exercises/003-numpy-version/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/003-numpy-version/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/003-numpy-version/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/003-numpy-version/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"MS4yNC4yCg==","signal":null,"memoryUsage":524288,"cpuUsage":2842,"starting_at":1726179128322,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQ==","ended_at":1726179128732,"exit_code":0}],"tests":[{"starting_at":1726179132577,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQ==","ended_at":1726179133114,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDIgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDAzLW51bXB5LXZlcnNpb24vdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTIgcGFzc2VkG1swbRtbMzJtIGluIDAuMTFzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726111202203,"completed_at":1726179133114},{"slug":"004-your-first-vector","position":4,"files":[{"path":".learn/exercises/004-your-first-vector/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/004-your-first-vector/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/004-your-first-vector/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/004-your-first-vector/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726179339304,"student_message":"vector nulo de tama√±o 10","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os, re\n\n@pytest.mark.it(\"Use the zeros() function\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"zeros(\") > 0\n\n@pytest.mark.it('The output should be a null vector of size 10')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\.\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `004` Your first vector\n\n## üìù Instrucciones:\n\n1. Crea un vector nulo de tama√±o 10 e imprimelo en la consola.\n\n## üí° Pistas:\n\n+ La funci√≥n para crear vecotres nulos es: `np.zeros`.\n\n+ Puedes leer m√°s sobre esta funci√≥n aqu√≠: https://numpy.org/doc/stable/reference/generated/numpy.zeros.html\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 3 items\n\n.learn/exercises/004-your-first-vector/test.py .F.                       [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x741f3327fcd0>\n\n    @pytest.mark.it('The output should be a null vector of size 10')\n    def test_print(capsys):\n        import app\n        captured = capsys.readouterr()\n>       assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in captured.out\nE       AssertionError: assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in '1.24.2\\n'\nE        +  where '1.24.2\\n' = CaptureResult(out='1.24.2\\n', err='').out\n\n.learn/exercises/004-your-first-vector/test.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/004-your-first-vector/test.py::test_print - AssertionError: assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in '1.24.2\\n'\n========================= 1 failed, 2 passed in 0.11s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a null vector of size 10 \n\n","ending_at":1726179344661,"ai_response":"Para crear un vector nulo de tama√±o 10 en NumPy, puedes usar la funci√≥n `np.zeros`. Esta funci√≥n genera un array de ceros con la forma especificada. \n\nVamos a reflexionar sobre c√≥mo podr√≠as implementar esto en tu c√≥digo. ¬øQu√© pasos crees que necesitas seguir para lograrlo?\n\n1. **Importar la librer√≠a NumPy**: Primero, necesitas importar NumPy para poder usar sus funciones.\n2. **Crear el vector nulo**: Utilizar la funci√≥n `np.zeros` para crear un vector de tama√±o 10.\n3. **Imprimir el vector**: Finalmente, imprimir el vector para verificar que se ha creado correctamente.\n\n¬øC√≥mo crees que podr√≠as escribir el c√≥digo para estos pasos?"}],"compilations":[{"stderr":"","stdout":"MS4yNC4yCg==","signal":null,"memoryUsage":393216,"cpuUsage":7450,"starting_at":1726179620812,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkK","ended_at":1726179621023,"exit_code":0}],"tests":[{"starting_at":1726179188588,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvKDEwKQo=","ended_at":1726179188977,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMW1GG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiVXNlIHRoZSB6ZXJvcygpIGZ1bmN0aW9uIikKICAgIGRlZiB0ZXN0X291dHB1dCgpOgogICAgICAgIGYgPSBvcGVuKCdhcHAucHknKQogICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQo+ICAgICAgIGFzc2VydCBjb250ZW50LmZpbmQoInplcm9zKCIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4Nzc3OWZmMzkwYzAwPignemVyb3MoJykbWzBtChtbMW0bWzMxbUUgICAgICAgICsgICAgd2hlcmUgPGJ1aWx0LWluIG1ldGhvZCBmaW5kIG9mIHN0ciBvYmplY3QgYXQgMHg3Nzc5ZmYzOTBjMDA+ID0gJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5ucC56ZXJvKDEwKVxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc3NzlmZjU4ZDdiMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCcpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkbWzBtOjEyOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtYXBwLnB5G1swbTozOiBpbiA8bW9kdWxlPgogICAgbnAuemVybygxMCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmF0dHIgPSAnemVybycKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/G1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5G1swbTozMjA6IEF0dHJpYnV0ZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/ChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMSBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMW1GG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiVXNlIHRoZSB6ZXJvcygpIGZ1bmN0aW9uIikKICAgIGRlZiB0ZXN0X291dHB1dCgpOgogICAgICAgIGYgPSBvcGVuKCdhcHAucHknKQogICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQo+ICAgICAgIGFzc2VydCBjb250ZW50LmZpbmQoInplcm9zKCIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4Nzc3OWZmMzkwYzAwPignemVyb3MoJykbWzBtChtbMW0bWzMxbUUgICAgICAgICsgICAgd2hlcmUgPGJ1aWx0LWluIG1ldGhvZCBmaW5kIG9mIHN0ciBvYmplY3QgYXQgMHg3Nzc5ZmYzOTBjMDA+ID0gJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5ucC56ZXJvKDEwKVxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc3NzlmZjU4ZDdiMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCcpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkbWzBtOjEyOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtYXBwLnB5G1swbTozOiBpbiA8bW9kdWxlPgogICAgbnAuemVybygxMCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmF0dHIgPSAnemVybycKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/G1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5G1swbTozMjA6IEF0dHJpYnV0ZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/ChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMSBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21Vc2UgdGhlIHplcm9zKCkgZnVuY3Rpb24bWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAxLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726179231320,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMCkK","ended_at":1726179231728,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ODM1MDQ3YWJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ODM1MDQ3YWJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726179260846,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygwLDEwKQo=","ended_at":1726179261225,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MjA3ZjVlNDNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxMjogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKPiAgIG5wLnplcm9zKDAsMTApChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IENhbm5vdCBpbnRlcnByZXQgJzEwJyBhcyBhIGRhdGEgdHlwZRtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MzogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogQ2Fubm90IGludGVycHJldCAnMTAnIGFzIGEgZGF0YSB0eXBlChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MjA3ZjVlNDNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxMjogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKPiAgIG5wLnplcm9zKDAsMTApChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IENhbm5vdCBpbnRlcnByZXQgJzEwJyBhcyBhIGRhdGEgdHlwZRtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MzogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogQ2Fubm90IGludGVycHJldCAnMTAnIGFzIGEgZGF0YSB0eXBlChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726179302369,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkK","ended_at":1726179302792,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MTY4NjU4M2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MTY4NjU4M2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726179337015,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkK","ended_at":1726179337435,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NDFmMzMyN2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NDFmMzMyN2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726184645978,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkKcHJpbnQobnApCg==","ended_at":1726184650665,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YWM5ZTNiNWZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAzLjE5cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YWM5ZTNiNWZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAzLjE5cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726184800215,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMCkKcHJpbnQobnApCg==","ended_at":1726184800646,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTBiYWYyZmJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTBiYWYyZmJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726184893349,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCg==","ended_at":1726184893695,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMDhzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726179140033,"completed_at":1726184893695},{"slug":"005-array-memory-size","position":5,"files":[{"path":".learn/exercises/005-array-memory-size/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/005-array-memory-size/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/005-array-memory-size/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/005-array-memory-size/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726186022382,"student_message":"resuelveme el problema","context":"---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\n\n@pytest.mark.it(\"You have to use the itemsize property\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"itemsize\") > 0\n\n@pytest.mark.it(\"You have to use the size property\")\ndef test_size_used():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"size\") > 0\n\n@pytest.mark.it('The output should be the memory size of a null vector of size 10')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert '80\\n' in captured.out\n\n\n@pytest.mark.it(\"Do not hardcode the expected output\")\ndef test_harcoded_output():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"print\\s*\\((\\s*80)\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n---\n      # File name: .devcontainer. Content: \n      `Error: This is not a file to be read, but a directory: ./.devcontainer`\n      ---\n      \n---\n      # File name: .git. Content: \n      `Error: This is not a file to be read, but a directory: ./.git`\n      ---\n      \n---\n      # File name: .gitattributes. Content: \n      `*.md linguist-language=Python\n*.ipynb linguist-language=Python\n`\n      ---\n      \n---\n      # File name: .github. Content: \n      `Error: This is not a file to be read, but a directory: ./.github`\n      ---\n      \n---\n      # File name: .gitignore. Content: \n      `# configuration and readme\n!.gitignore\n!.gitpod.yml\nconftest.py\n!.gitpod.Dockerfile\n!learn.json\n!README.md\n!.devcontainer\n!.devcontainer/*\n\n# exercises\n!.learn/\n!.learn/*\n.learn/_app\n.learn/.session\n.learn/dist\n.learn/app.tar.gz\n.learn/config.json\n.learn/vscode_queue.json\n\n.ipynb_checkpoints/\n__pycache__\nvenv\n.idea\n.vscode\nUntitled.ipynb\n.pytest_cache\n`\n      ---\n      \n---\n      # File name: .gitpod.Dockerfile. Content: \n      `FROM gitpod/workspace-full:latest\n\nUSER gitpod\n\n# Install Python 3.11\nRUN pyenv install 3.11.5\nRUN pyenv global 3.11.5\n\n# Upgrade setuptools\nRUN pip3 install --upgrade setuptools\n\n# Install required packages\nRUN pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\nRUN npm i @learnpack/learnpack@2.1.56 -g && learnpack plugins:install @learnpack/python@1.0.3\n`\n      ---\n      \n---\n      # File name: .gitpod.yml. Content: \n      `image:\n  file: .gitpod.Dockerfile\n\nports:\n    - port: 3000\n      onOpen: ignore\n\nvscode:\n  extensions:\n    - learn-pack.learnpack-vscode\n\ngithub:\n    prebuilds:\n        # enable for the master/default branch (defaults to true)\n        master: true\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: false\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to true)\n        addComment: false\n`\n      ---\n      \n---\n      # File name: .learn. Content: \n      `Error: This is not a file to be read, but a directory: ./.learn`\n      ---\n      \n---\n      # File name: .pytest_cache. Content: \n      `Error: This is not a file to be read, but a directory: ./.pytest_cache`\n      ---\n      \n---\n      # File name: .vscode. Content: \n      `Error: This is not a file to be read, but a directory: ./.vscode`\n      ---\n      \n---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: __pycache__. Content: \n      `Error: This is not a file to be read, but a directory: ./__pycache__`\n      ---\n      \n---\n      # File name: app.py. Content: \n      `import numpy as np\nprint(np.__version__)\nprint(np.zeros(10))\nmem_size=zero.itemsize * zeros.size\nprint(mem_size)\n\n`\n      ---\n      \n---\n      # File name: conftest.py. Content: \n      `import sys, os, json\nif os.path.isdir(\"./.venv/lib/\"):\n    sys.path.append('null/site-packages')\ndef pytest_addoption(parser):\n    parser.addoption(\"--stdin\", action=\"append\", default=[],\n        help=\"json with the stdin to pass to test functions\")\ndef pytest_generate_tests(metafunc):\n    if 'stdin' in metafunc.fixturenames:\n      if hasattr(metafunc,\"config\"):\n          metafunc.parametrize(\"stdin\",metafunc.config.getoption('stdin'))\n      elif hasattr(metafunc,\"configuration\"):\n          metafunc.parametrize(\"stdin\",metafunc.configuration.getoption('stdin'))\n      else:\n          raise Exception(\"Imposible to retrieve text configuration object\")\n    if 'app' in metafunc.fixturenames:\n        try:\n          sys.path.append('.learn/dist')\n          import cached_app\n          metafunc.parametrize(\"app\",[cached_app.execute_app])\n        except SyntaxError:\n          metafunc.parametrize(\"app\",[lambda : None])\n        except ImportError:\n          metafunc.parametrize(\"app\",[cached_app])\n        except AttributeError:\n          metafunc.parametrize(\"app\",[cached_app])\n    if 'configuration' in metafunc.fixturenames:\n        metafunc.parametrize(\"configuration\", [json.loads('{\"port\":3000,\"os\":\"linux\",\"editor\":{\"mode\":\"extension\",\"agent\":\"vscode\",\"version\":\"4.0.0\"},\"dirPath\":\"./.learn\",\"configPath\":\"learn.json\",\"outputPath\":\".learn/dist\",\"publicPath\":\"/preview\",\"publicUrl\":\"https://supreme-space-waffle-v6g4w5wvwqgr2jqg-3000.app.github.dev\",\"contact\":\"https://github.com/learnpack/learnpack/issues/new\",\"language\":\"auto\",\"autoPlay\":true,\"projectType\":\"tutorial\",\"grading\":\"incremental\",\"exercisesPath\":\".learn/exercises\",\"webpackTemplate\":null,\"disableGrading\":false,\"disabledActions\":[],\"actions\":[],\"entries\":{\"html\":\"index.html\",\"vanillajs\":\"index.js\",\"react\":\"app.jsx\",\"node\":\"app.js\",\"python3\":\"app.py\",\"java\":\"app.java\"},\"suggestions\":{\"agent\":\"vscode\"},\"warnings\":{\"agent\":null},\"preview\":\"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\"repository\":\"https://github.com/breatheco-de/numpy-tutorial-exercises\",\"difficulty\":\"intermediate\",\"duration\":10,\"description\":{\"us\":\"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\"es\":\"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"},\"title\":{\"us\":\"Numpy Tutorial Exercises\",\"es\":\"Tutorial Interactivo de Numpy\"},\"slug\":\"numpy-exercises\",\"translations\":[]}')])\n`\n      ---\n      \n---\n      # File name: learn.json. Content: \n      `{\n    \"preview\": \"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\n    \"repository\": \"https://github.com/breatheco-de/numpy-tutorial-exercises\",\n    \"grading\": \"incremental\",\n    \"difficulty\": \"intermediate\",\n    \"duration\": 10,\n    \"description\": {\n        \"us\": \"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\n        \"es\": \"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"\n    },\n    \"title\": {\n        \"us\": \"Numpy Tutorial Exercises\",\n        \"es\": \"Tutorial Interactivo de Numpy\"\n    },\n    \"slug\": \"numpy-exercises\",\n    \"editor\": {\n        \"version\": \"4.0.0\"\n    }\n}\n`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `005` Array Memory Size\n\n## üìù Instrucciones:\n\n1. Encuentra la cantidad de memoria ocupada por el array e impr√≠mela en la consola.\n\n## üí° Pistas:\n\n+ Para encontrar la cantidad de memoria que ocupa un elemento de un array, puedes usar esta propiedad: `itemsize`.\n\n+ Para encontrar la cantidad de elementos de un array, puedes usar esta propiedad: `size`.\n\n+ La cantidad de memoria ocupada por el array es la suma de la cantidad de memoria utilizada por cada elemento del array. Como en este caso todos los elementos son iguales, puedes multiplicar el tama√±o del array por la cantidad de memoria que ocupa el elemento.\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/005-array-memory-size/test.py ..F.                      [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x77628563fd90>\n\n    @pytest.mark.it('The output should be the memory size of a null vector of size 10')\n    def test_print(capsys):\n>       import app\n\n.learn/exercises/005-array-memory-size/test.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import numpy as np\n    print(np.__version__)\n    print(np.zeros(10))\n>   mem_size=zero.itemsize * zeros.size\nE   NameError: name 'zero' is not defined\n\napp.py:4: NameError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n=========================== short test summary info ============================\nFAILED .learn/exercises/005-array-memory-size/test.py::test_print - NameError: name 'zero' is not defined\n========================= 1 failed, 3 passed in 0.11s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be the memory size of a null vector of size 10 \n\n","ending_at":1726186026158,"ai_response":"Vamos a analizar tu c√≥digo y ver c√≥mo podemos corregirlo. Observa que tienes un error de nombre en tu c√≥digo:\n\n```python\nimport numpy as np\nprint(np.__version__)\nprint(np.zeros(10))\nmem_size=zero.itemsize * zeros.size\nprint(mem_size)\n```\n\nEl error se debe a que has escrito `zero` y `zeros`, pero deber√≠as estar usando el mismo nombre para la variable que contiene el array de ceros. Vamos a corregirlo paso a paso.\n\n1. **Crea el array de ceros y as√≠gnalo a una variable**:\n   ```python\n   zeros = np.zeros(10)\n   ```\n\n2. **Calcula el tama√±o de memoria usando las propiedades `itemsize` y `size`**:\n   ```python\n   mem_size = zeros.itemsize * zeros.size\n   ```\n\n3. **Imprime el tama√±o de memoria**:\n   ```python\n   print(mem_size)\n   ```\n\nEntonces, tu c√≥digo completo deber√≠a verse as√≠:\n\n```python\nimport numpy as np\n\n# Crear un array de ceros de tama√±o 10\nzeros = np.zeros(10)\n\n# Calcular el tama√±o de memoria\nmem_size = zeros.itemsize * zeros.size\n\n# Imprimir el tama√±o de memoria\nprint(mem_size)\n```\n\n¬øPuedes intentar hacer estos cambios y ver si los tests pasan?"}],"compilations":[],"tests":[{"starting_at":1726185276702,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCmFycj1ucC5zaXplKCkKcHJpbnQoYXJyKQo=","ended_at":1726185277136,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4N2U5YmQ1MGFlOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDdlOWJkNTBhZThiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcbnByaW50KGFycilcbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZTliZDRmZGMwNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuc2l6ZSgpCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgphcmdzID0gKCksIGt3YXJncyA9IHt9Cm1zZyA9ICJfc2l6ZV9kaXNwYXRjaGVyKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKZGlzcF9uYW1lID0gJ19zaXplX2Rpc3BhdGNoZXInCm5ld19tc2cgPSAic2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCgo+ICAgPz8/ChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnG1swbQoKG1sxbRtbMzFtPF9fYXJyYXlfZnVuY3Rpb25fXyBpbnRlcm5hbHM+G1swbToxOTg6IFR5cGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJwobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTJzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4N2U5YmQ1MGFlOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDdlOWJkNTBhZThiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcbnByaW50KGFycilcbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZTliZDRmZGMwNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuc2l6ZSgpCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgphcmdzID0gKCksIGt3YXJncyA9IHt9Cm1zZyA9ICJfc2l6ZV9kaXNwYXRjaGVyKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKZGlzcF9uYW1lID0gJ19zaXplX2Rpc3BhdGNoZXInCm5ld19tc2cgPSAic2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCgo+ICAgPz8/ChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnG1swbQoKG1sxbRtbMzFtPF9fYXJyYXlfZnVuY3Rpb25fXyBpbnRlcm5hbHM+G1swbToxOTg6IFR5cGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJwobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTJzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eRtbMzltCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDEuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lbW9yeSBzaXplIG9mIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726185301630,"ended_at":1726185302033,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzhjYjEyNzYyOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDc4Y2IxMjc2MjhiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbnByaW50KGFycj1ucC5zaXplKCkpXG5cbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OGNiMTI2Nzg5MTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBwcmludChhcnI9bnAuc2l6ZSgpKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJncyA9ICgpLCBrd2FyZ3MgPSB7fQptc2cgPSAiX3NpemVfZGlzcGF0Y2hlcigpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCmRpc3BfbmFtZSA9ICdfc2l6ZV9kaXNwYXRjaGVyJwpuZXdfbXNnID0gInNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgoKPiAgID8/PwobWzFtG1szMW1FICAgVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJxtbMG0KChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MTk4OiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAtMSA+IDAKG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTIgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzhjYjEyNzYyOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDc4Y2IxMjc2MjhiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbnByaW50KGFycj1ucC5zaXplKCkpXG5cbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OGNiMTI2Nzg5MTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBwcmludChhcnI9bnAuc2l6ZSgpKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJncyA9ICgpLCBrd2FyZ3MgPSB7fQptc2cgPSAiX3NpemVfZGlzcGF0Y2hlcigpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCmRpc3BfbmFtZSA9ICdfc2l6ZV9kaXNwYXRjaGVyJwpuZXdfbXNnID0gInNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgoKPiAgID8/PwobWzFtG1szMW1FICAgVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJxtbMG0KChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MTk4OiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAtMSA+IDAKG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTIgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVlvdSBoYXZlIHRvIHVzZSB0aGUgaXRlbXNpemUgcHJvcGVydHkbWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAxLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726185385382,"ended_at":1726185385840,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzNlMDhkMjZiZjMwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDczZTA4ZDI2YmYzMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcblxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczZTA4ZDBlNDkxMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gChtbMW0bWzMxbWFwcC5weRtbMG06NDogaW4gPG1vZHVsZT4KICAgIGFycj1ucC5zaXplKCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmFyZ3MgPSAoKSwga3dhcmdzID0ge30KbXNnID0gIl9zaXplX2Rpc3BhdGNoZXIoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgpkaXNwX25hbWUgPSAnX3NpemVfZGlzcGF0Y2hlcicKbmV3X21zZyA9ICJzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKCj4gICA/Pz8KG1sxbRtbMzFtRSAgIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScbWzBtCgobWzFtG1szMW08X19hcnJheV9mdW5jdGlvbl9fIGludGVybmFscz4bWzBtOjE5ODogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3Rfb3V0cHV0G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzNlMDhkMjZiZjMwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDczZTA4ZDI2YmYzMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcblxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczZTA4ZDBlNDkxMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gChtbMW0bWzMxbWFwcC5weRtbMG06NDogaW4gPG1vZHVsZT4KICAgIGFycj1ucC5zaXplKCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmFyZ3MgPSAoKSwga3dhcmdzID0ge30KbXNnID0gIl9zaXplX2Rpc3BhdGNoZXIoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgpkaXNwX25hbWUgPSAnX3NpemVfZGlzcGF0Y2hlcicKbmV3X21zZyA9ICJzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKCj4gICA/Pz8KG1sxbRtbMzFtRSAgIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScbWzBtCgobWzFtG1szMW08X19hcnJheV9mdW5jdGlvbl9fIGludGVybmFscz4bWzBtOjE5ODogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3Rfb3V0cHV0G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21Zb3UgaGF2ZSB0byB1c2UgdGhlIGl0ZW1zaXplIHByb3BlcnR5G1szOW0KICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMS4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwG1szOW0gCgo=","exit_code":1},{"starting_at":1726185413531,"ended_at":1726185414022,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NTNjNjRhZGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjIwcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NTNjNjRhZGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjIwcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726185816200,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCmFycj1ucC5pdGVtc2l6ZSgpCnByaW50KGl0ZW1zaXplKQoK","ended_at":1726185816607,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmY4YTI0NmZkYzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmY4YTI0NmZkYzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726185839477,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCm1lbV9zaXplID0gemVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCgpwcmludChtZW1fc2l6ZSkKCg==","ended_at":1726185839854,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmIxYzFkOGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZSA9IHplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvcycgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjQ6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnemVyb3MnIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmIxYzFkOGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZSA9IHplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvcycgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjQ6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnemVyb3MnIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwG1szOW0gCgo=","exit_code":1},{"starting_at":1726185991259,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCm1lbV9zaXplPXplcm8uaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQoK","ended_at":1726185991632,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NGNkNzE5NmZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NGNkNzE5NmZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lbW9yeSBzaXplIG9mIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726186019691,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCm1lbV9zaXplPXplcm8uaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQoK","ended_at":1726186020106,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzYyODU2M2ZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzYyODU2M2ZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lbW9yeSBzaXplIG9mIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726186187059,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQoK","ended_at":1726186187526,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTQgcGFzc2VkG1swbRtbMzJtIGluIDAuMDhzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726184903501,"completed_at":1726186187526},{"slug":"006-numpy-documentation","position":6,"files":[{"path":".learn/exercises/006-numpy-documentation/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/006-numpy-documentation/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/006-numpy-documentation/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/006-numpy-documentation/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1726186853003,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCg==","ended_at":1726186853346,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDIgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA2LW51bXB5LWRvY3VtZW50YXRpb24vdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTIgcGFzc2VkG1swbRtbMzJtIGluIDAuMDhzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726186582770,"completed_at":1726186853346},{"slug":"007-change-vector-values","position":7,"files":[{"path":".learn/exercises/007-change-vector-values/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/007-change-vector-values/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/007-change-vector-values/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/007-change-vector-values/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726239670699,"student_message":"dame la respuesta","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: __pycache__. Content: \n      `Error: This is not a file to be read, but a directory: ./__pycache__`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os, re\n\n@pytest.mark.it(\"Use the zeros() function\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"zeros(\") > 0\n\n@pytest.mark.it('The output should be a null vector of size 10 and the fifth value should be 1')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert '[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[0\\. 0\\. 0\\. 0\\. 1\\. 0\\. 0\\. 0\\. 0\\. 0\\.\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `007` Change Vector Values\n\n## üìù Instrucciones:\n\n1. Crea un vector nulo de `10` elementos.\n\n2. Cambia el valor del quinto elemento a `1`.\n\n3. Imprime el vector en la consola.\n\n## üìé Ejemplo:\n\n```python\n# En este ejemplo se cambia el valor del segundo elemento a 1\narr = np.zeros(10)\narr[1] = 1\n```\n\n## üí° Pistas:\n\n+ Los valores de los arrays se cambian de la misma manera que se cambian los valores de las listas normales de Python (A trav√©s de su posici√≥n).\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 3 items\n\n.learn/exercises/007-change-vector-values/test.py .F.                    [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7074f7e47cd0>\n\n    @pytest.mark.it('The output should be a null vector of size 10 and the fifth value should be 1')\n    def test_print(capsys):\n>       import app\nE         File \"/workspaces/numpy-tutorial-exercises/app.py\", line 9\nE           arr(5)=1\nE           ^^^^^^\nE       SyntaxError: cannot assign to function call here. Maybe you meant '==' instead of '='?\n\n.learn/exercises/007-change-vector-values/test.py:12: SyntaxError\n=========================== short test summary info ============================\nFAILED .learn/exercises/007-change-vector-values/test.py::test_print -   File \"/workspaces/numpy-tutorial-exercises/app.py\", line 9\n========================= 1 failed, 2 passed in 0.05s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a null vector of size 10 and the fifth value should be 1 \n\n","ending_at":1726239676951,"ai_response":"Entiendo que puede ser frustrante cuando las cosas no funcionan como esperas, pero es importante que intentes resolverlo por ti mismo para aprender mejor. Vamos a revisar tu c√≥digo y ver c√≥mo podemos corregirlo juntos.\n\nPrimero, observemos el error que tienes:\n\n```python\narr(5)=1\n```\n\nEl error indica que est√°s intentando asignar un valor a una funci√≥n en lugar de a un √≠ndice de un array. En Python, para acceder a un elemento de un array, debes usar corchetes `[]` en lugar de par√©ntesis `()`.\n\nVamos a repasar los pasos necesarios:\n\n1. Crear un vector nulo de 10 elementos.\n2. Cambiar el valor del quinto elemento a 1.\n3. Imprimir el vector en la consola.\n\n¬øC√≥mo podr√≠as corregir la l√≠nea donde asignas el valor al quinto elemento? ¬øQu√© tal si intentas usar corchetes en lugar de par√©ntesis?\n\nIntenta escribir algo como esto:\n\n```python\nimport numpy as np\n\n# Crear un vector nulo de 10 elementos\narr = np.zeros(10)\n\n# Cambiar el valor del quinto elemento a 1\narr[4] = 1\n\n# Imprimir el vector en la consola\nprint(arr)\n```\n\n¬øPuedes probar esto y ver si funciona? ¬øQu√© observas cuando lo ejecutas?"}],"compilations":[],"tests":[{"starting_at":1726187147867,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnIoNCk9MQoK","ended_at":1726187148147,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzIxNTExNDEwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig0KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAzcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzIxNTExNDEwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig0KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAzcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726187157692,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDExKQphcnIoNik9MQoK","ended_at":1726187157970,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWU1MTM2YzdjNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig2KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWU1MTM2YzdjNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig2KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726187174703,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnIoNSk9MQoK","ended_at":1726187174978,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3M2Q1YmNiMGZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3M2Q1YmNiMGZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726239667947,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnIoNSk9MQoK","ended_at":1726239670251,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MDc0ZjdlNDdjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjA1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MDc0ZjdlNDdjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjA1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726239865966,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCg==","ended_at":1726239866505,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMjZzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726187031024,"completed_at":1726239866505},{"slug":"008-vector-ranging-values","position":8,"files":[{"path":".learn/exercises/008-vector-ranging-values/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/008-vector-ranging-values/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/008-vector-ranging-values/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/008-vector-ranging-values/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":393216,"cpuUsage":3723,"errorType":"run-time","starting_at":1726240341529,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCm5wLmFyYW5nZSgxMCw1MCkKcHJpbnQobnAuYXJhbmdlKQ==","ended_at":1726240341711,"exit_code":null}],"tests":[{"starting_at":1726240345264,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCm5wLmFyYW5nZSgxMCw1MCkKcHJpbnQobnAuYXJhbmdlKQ==","ended_at":1726240345708,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA4LXZlY3Rvci1yYW5naW5nLXZhbHVlcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MzMwODgwZWQwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSAxMCB0byA0OScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uICAgICAgIFsgMy4sICA1LiwgIDcuXSxcbiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKVxuTm9uZVxuWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXVxuPGJ1aWx0LWluIGZ1bmN0aW9uIGFyYW5nZT5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCAuLi4gICAgICAgWyAzLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV8uLi4zLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOC12ZWN0b3ItcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDgtdmVjdG9yLXJhbmdpbmctdmFsdWVzL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIGFzc2VydCAnWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIC4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMThzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA4LXZlY3Rvci1yYW5naW5nLXZhbHVlcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MzMwODgwZWQwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSAxMCB0byA0OScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uICAgICAgIFsgMy4sICA1LiwgIDcuXSxcbiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKVxuTm9uZVxuWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXVxuPGJ1aWx0LWluIGZ1bmN0aW9uIGFyYW5nZT5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCAuLi4gICAgICAgWyAzLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV8uLi4zLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOC12ZWN0b3ItcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDgtdmVjdG9yLXJhbmdpbmctdmFsdWVzL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIGFzc2VydCAnWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIC4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMThzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSB2ZWN0b3Igd2l0aCBhbGwgdGhlIGludGVnZXJzIGZyb20gMTAgdG8gNDkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726240531502,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycik=","ended_at":1726240531874,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA4LXZlY3Rvci1yYW5naW5nLXZhbHVlcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMTBzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726239872820,"completed_at":1726240531875},{"slug":"009-reverse-vector","position":9,"files":[{"path":".learn/exercises/009-reverse-vector/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/009-reverse-vector/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/009-reverse-vector/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/009-reverse-vector/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726240706214,"student_message":"que me esta fallando en mi operacion?","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\n\n@pytest.mark.it(\"Use the arange() function\")\ndef test_arange_exists():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"arange(\") > 0\n\n@pytest.mark.it(\"You have to reverse the vector values\")\ndef test_output():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*\\:\\s*\\:\\s*\\-\\s*1\\s*\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('The output should be a vector with all the integers from 9 to 0 inclusive of both ends')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert  '[9 8 7 6 5 4 3 2 1 0]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[9 8 7 6 5 4 3 2 1 0\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `009` Reverse Vector\n\n## üìù Instrucciones:\n\n1. Crea un vector cuyos valores sean los n√∫meros del 0 al 9.\n\n2. Invierte el orden de los valores del vector e imprimelo en la consola.\n\n## üí° Pista:\n\n+ As√≠ es como se obtienen los valores invertidos de un vector `array[::-1]`.\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/009-reverse-vector/test.py ..F.                         [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x79e01cf1be20>\n\n    @pytest.mark.it('The output should be a vector with all the integers from 9 to 0 inclusive of both ends')\n    def test_print(capsys):\n>       import app\n\n.learn/exercises/009-reverse-vector/test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import numpy as np\n    print(np.__version__)\n    print(np.zeros(10))\n    zeros=np.zeros(10)\n    mem_size=zeros.itemsize * zeros.size\n    print(mem_size)\n    print(np.info(np.add))\n    arr = np.zeros(10)\n    arr[4]=1\n    print(arr)\n    arr=np.arange(10,50)\n    print(arr)\n>   array(0,10[::-1])\nE   NameError: name 'array' is not defined\n\napp.py:13: NameError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n80\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\nAdd arguments element-wise.\n\nParameters\n----------\nx1, x2 : array_like\n    The arrays to be added.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the inputs broadcast to. If not provided or None,\n    a freshly-allocated array is returned. A tuple (possible only as a\n    keyword argument) must have length equal to the number of outputs.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the\n    :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\nadd : ndarray or scalar\n    The sum of `x1` and `x2`, element-wise.\n    This is a scalar if both `x1` and `x2` are scalars.\n\nNotes\n-----\nEquivalent to `x1` + `x2` in terms of array broadcasting.\n\nExamples\n--------\n>>> np.add(1.0, 4.0)\n5.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.add(x1, x2)\narray([[  0.,   2.,   4.],\n       [  3.,   5.,   7.],\n       [  6.,   8.,  10.]])\n\nThe ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.\n\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> x1 + x2\narray([[ 0.,  2.,  4.],\n       [ 3.,  5.,  7.],\n       [ 6.,  8., 10.]])\nNone\n[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n=========================== short test summary info ============================\nFAILED .learn/exercises/009-reverse-vector/test.py::test_print - NameError: name 'array' is not defined\n========================= 1 failed, 3 passed in 0.14s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a vector with all the integers from 9 to 0 inclusive of both ends \n\n","ending_at":1726240709713,"ai_response":"Parece que hay un error en tu c√≥digo debido a que est√°s intentando usar `array` sin haberlo definido o importado correctamente. Vamos a revisar los pasos necesarios para completar la tarea:\n\n1. Crear un vector cuyos valores sean los n√∫meros del 0 al 9.\n2. Invertir el orden de los valores del vector e imprimirlo en la consola.\n\nPara lograr esto, puedes seguir estos pasos:\n\n1. Importa la librer√≠a `numpy`.\n2. Usa la funci√≥n `arange` de `numpy` para crear un vector con los valores del 0 al 9.\n3. Invierte el vector usando la notaci√≥n `[::-1]`.\n4. Imprime el vector invertido.\n\nAqu√≠ hay algunas preguntas para guiarte:\n\n1. ¬øC√≥mo puedes importar la librer√≠a `numpy` en tu c√≥digo?\n2. ¬øSabes c√≥mo usar la funci√≥n `arange` de `numpy` para crear un vector?\n3. ¬øC√≥mo puedes invertir un vector en Python usando la notaci√≥n `[::-1]`?\n\nIntenta escribir el c√≥digo siguiendo estos pasos y verifica si resuelve el problema."},{"starting_at":1726240872803,"student_message":"como seria la respuesta y porque","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\n\n@pytest.mark.it(\"Use the arange() function\")\ndef test_arange_exists():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"arange(\") > 0\n\n@pytest.mark.it(\"You have to reverse the vector values\")\ndef test_output():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*\\:\\s*\\:\\s*\\-\\s*1\\s*\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('The output should be a vector with all the integers from 9 to 0 inclusive of both ends')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert  '[9 8 7 6 5 4 3 2 1 0]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[9 8 7 6 5 4 3 2 1 0\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `009` Reverse Vector\n\n## üìù Instrucciones:\n\n1. Crea un vector cuyos valores sean los n√∫meros del 0 al 9.\n\n2. Invierte el orden de los valores del vector e imprimelo en la consola.\n\n## üí° Pista:\n\n+ As√≠ es como se obtienen los valores invertidos de un vector `array[::-1]`.\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      ","ending_at":1726240878709,"ai_response":"Vamos a desglosar el problema paso a paso para que puedas entender c√≥mo resolverlo y por qu√© cada paso es necesario.\n\n1. **Importar la librer√≠a `numpy`**:\n   Para trabajar con vectores y matrices de manera eficiente, necesitamos usar `numpy`. Esta librer√≠a proporciona funciones √∫tiles como `arange`.\n\n2. **Crear un vector con valores del 0 al 9**:\n   Usamos la funci√≥n `arange` de `numpy` para crear un vector que contenga los n√∫meros del 0 al 9.\n\n3. **Invertir el vector**:\n   Utilizamos la notaci√≥n `[::-1]` para invertir el orden de los elementos en el vector.\n\n4. **Imprimir el vector invertido**:\n   Finalmente, imprimimos el vector invertido para verificar el resultado.\n\nAqu√≠ hay algunas preguntas para guiarte:\n\n1. ¬øC√≥mo puedes importar la librer√≠a `numpy` en tu c√≥digo?\n2. ¬øSabes c√≥mo usar la funci√≥n `arange` de `numpy` para crear un vector?\n3. ¬øC√≥mo puedes invertir un vector en Python usando la notaci√≥n `[::-1]`?\n\nIntenta escribir el c√≥digo siguiendo estos pasos y verifica si resuelve el problema.\n\nPara ayudarte a visualizar, aqu√≠ tienes una gu√≠a de c√≥mo podr√≠a verse el c√≥digo:\n\n```python\nimport numpy as np  # Paso 1: Importar numpy\n\nvector = np.arange(10)  # Paso 2: Crear un vector con valores del 0 al 9\n\nvector_invertido = vector[::-1]  # Paso 3: Invertir el vector\n\nprint(vector_invertido)  # Paso 4: Imprimir el vector invertido\n```\n\n- **Importar `numpy`**: `import numpy as np` es necesario para acceder a las funciones de `numpy`.\n- **Crear el vector**: `np.arange(10)` crea un array de `numpy` con valores del 0 al 9.\n- **Invertir el vector**: `vector[::-1]` invierte el orden de los elementos en el array.\n- **Imprimir el vector**: `print(vector_invertido)` muestra el vector invertido en la consola.\n\n¬øTe gustar√≠a intentar escribir el c√≥digo por ti mismo y ver si funciona?"}],"compilations":[],"tests":[{"starting_at":1726240616204,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXlbMCwxMC0xXQpwcmludChhcnJheSk=","ended_at":1726240616661,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgdmVjdG9yIHZhbHVlcyIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBwYXRoID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aCgnYXBwLnB5JykpKycvYXBwLnB5JwogICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGNvbnRlbnRfZmlsZToKICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnRfZmlsZS5yZWFkKCkKICAgICAgICAgICAgcmVnZXggPSByZS5jb21waWxlKHIiXHMqXDpccypcOlxzKlwtXHMqMVxzKiIpCj4gICAgICAgICAgIGFzc2VydCBib29sKHJlZ2V4LnNlYXJjaChjb250ZW50KSkgPT0gVHJ1ZQobWzFtG1szMW1FICAgICAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IEZhbHNlID09IFRydWUbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICB3aGVyZSBGYWxzZSA9IGJvb2woTm9uZSkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICAgIHdoZXJlIE5vbmUgPSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4oJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5wcmludChucC56ZXJvcygxMCkpXG56ZXJvcz1ucC56ZXJvcygxMCkgXG5tZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLi4uLmluZm8obnAuYWRkKSlcbmFyciA9IG5wLnplcm9zKDEwKVxuYXJyWzRdPTFcbnByaW50KGFycilcbmFycj1ucC5hcmFuZ2UoMTAsNTApXG5wcmludChhcnIpXG5hcnJheVswLDEwLTFdXG5wcmludChhcnJheSknKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgICAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4gPSByZS5jb21waWxlKCdcXHMqXFw6XFxzKlxcOlxccypcXC1cXHMqMVxccyonKS5zZWFyY2gbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5G1swbToxNjogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczNjQyYmFkYTYyMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdmVjdG9yIHdpdGggYWxsIHRoZSBpbnRlZ2VycyBmcm9tIDkgdG8gMCBpbmNsdXNpdmUgb2YgYm90aCBlbmRzJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjA6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCiAgICB6ZXJvcz1ucC56ZXJvcygxMCkKICAgIG1lbV9zaXplPXplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQogICAgcHJpbnQobWVtX3NpemUpCiAgICBwcmludChucC5pbmZvKG5wLmFkZCkpCiAgICBhcnIgPSBucC56ZXJvcygxMCkKICAgIGFycls0XT0xCiAgICBwcmludChhcnIpCiAgICBhcnI9bnAuYXJhbmdlKDEwLDUwKQogICAgcHJpbnQoYXJyKQo+ICAgYXJyYXlbMCwxMC0xXQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdhcnJheScgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCBGYWxzZSA9PSBUcnVlChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTVzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgdmVjdG9yIHZhbHVlcyIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBwYXRoID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aCgnYXBwLnB5JykpKycvYXBwLnB5JwogICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGNvbnRlbnRfZmlsZToKICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnRfZmlsZS5yZWFkKCkKICAgICAgICAgICAgcmVnZXggPSByZS5jb21waWxlKHIiXHMqXDpccypcOlxzKlwtXHMqMVxzKiIpCj4gICAgICAgICAgIGFzc2VydCBib29sKHJlZ2V4LnNlYXJjaChjb250ZW50KSkgPT0gVHJ1ZQobWzFtG1szMW1FICAgICAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IEZhbHNlID09IFRydWUbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICB3aGVyZSBGYWxzZSA9IGJvb2woTm9uZSkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICAgIHdoZXJlIE5vbmUgPSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4oJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5wcmludChucC56ZXJvcygxMCkpXG56ZXJvcz1ucC56ZXJvcygxMCkgXG5tZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLi4uLmluZm8obnAuYWRkKSlcbmFyciA9IG5wLnplcm9zKDEwKVxuYXJyWzRdPTFcbnByaW50KGFycilcbmFycj1ucC5hcmFuZ2UoMTAsNTApXG5wcmludChhcnIpXG5hcnJheVswLDEwLTFdXG5wcmludChhcnJheSknKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgICAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4gPSByZS5jb21waWxlKCdcXHMqXFw6XFxzKlxcOlxccypcXC1cXHMqMVxccyonKS5zZWFyY2gbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5G1swbToxNjogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczNjQyYmFkYTYyMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdmVjdG9yIHdpdGggYWxsIHRoZSBpbnRlZ2VycyBmcm9tIDkgdG8gMCBpbmNsdXNpdmUgb2YgYm90aCBlbmRzJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjA6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCiAgICB6ZXJvcz1ucC56ZXJvcygxMCkKICAgIG1lbV9zaXplPXplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQogICAgcHJpbnQobWVtX3NpemUpCiAgICBwcmludChucC5pbmZvKG5wLmFkZCkpCiAgICBhcnIgPSBucC56ZXJvcygxMCkKICAgIGFycls0XT0xCiAgICBwcmludChhcnIpCiAgICBhcnI9bnAuYXJhbmdlKDEwLDUwKQogICAgcHJpbnQoYXJyKQo+ICAgYXJyYXlbMCwxMC0xXQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdhcnJheScgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCBGYWxzZSA9PSBUcnVlChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTVzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtWW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgdmVjdG9yIHZhbHVlcxtbMzltCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDEuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSB2ZWN0b3Igd2l0aCBhbGwgdGhlIGludGVnZXJzIGZyb20gOSB0byAwIGluY2x1c2l2ZSBvZiBib3RoIGVuZHMbWzM5bSAKCg==","exit_code":1},{"starting_at":1726240666067,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXlbMCwxMFs6Oi0xXV0KcHJpbnQoYXJyYXkp","ended_at":1726240666508,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDEyMjQ5NWZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5WzAsMTBbOjotMV1dChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5WzAsMTBbOjotMV1dCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDEyMjQ5NWZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5WzAsMTBbOjotMV1dChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5WzAsMTBbOjotMV1dCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726240678892,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXkoMCwxMFs6Oi0xXSkKcHJpbnQoYXJyYXkp","ended_at":1726240679317,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWEzYWMwNWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5KDAsMTBbOjotMV0pCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWEzYWMwNWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5KDAsMTBbOjotMV0pCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726240704989,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXkoMCwxMFs6Oi0xXSkKcHJpbnQoYXJyYXkp","ended_at":1726240705393,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OWUwMWNmMWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OWUwMWNmMWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726240787485,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXk9bnAuYXJhbmdlKDAsMTBbOjotMV0pCnByaW50KGFycmF5KQ==","ended_at":1726240787903,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDlmNzM5MzdkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5PW5wLmFyYW5nZSgwLDEwWzo6LTFdKQobWzFtG1szMW1FICAgVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szM209PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHdhcm5pbmdzIHN1bW1hcnkgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6dGVzdF9wcmludAogIC93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHk6MTM6IFN5bnRheFdhcm5pbmc6ICdpbnQnIG9iamVjdCBpcyBub3Qgc3Vic2NyaXB0YWJsZTsgcGVyaGFwcyB5b3UgbWlzc2VkIGEgY29tbWE/CiAgICBhcnJheT1ucC5hcmFuZ2UoMCwxMFs6Oi0xXSkKCi0tIERvY3M6IGh0dHBzOi8vZG9jcy5weXRlc3Qub3JnL2VuL3N0YWJsZS9ob3ctdG8vY2FwdHVyZS13YXJuaW5ncy5odG1sChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUKG1szMW09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtLCAbWzMzbTEgd2FybmluZxtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDlmNzM5MzdkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5PW5wLmFyYW5nZSgwLDEwWzo6LTFdKQobWzFtG1szMW1FICAgVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szM209PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHdhcm5pbmdzIHN1bW1hcnkgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6dGVzdF9wcmludAogIC93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHk6MTM6IFN5bnRheFdhcm5pbmc6ICdpbnQnIG9iamVjdCBpcyBub3Qgc3Vic2NyaXB0YWJsZTsgcGVyaGFwcyB5b3UgbWlzc2VkIGEgY29tbWE/CiAgICBhcnJheT1ucC5hcmFuZ2UoMCwxMFs6Oi0xXSkKCi0tIERvY3M6IGh0dHBzOi8vZG9jcy5weXRlc3Qub3JnL2VuL3N0YWJsZS9ob3ctdG8vY2FwdHVyZS13YXJuaW5ncy5odG1sChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUKG1szMW09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtLCAbWzMzbTEgd2FybmluZxtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdmVjdG9yIHdpdGggYWxsIHRoZSBpbnRlZ2VycyBmcm9tIDkgdG8gMCBpbmNsdXNpdmUgb2YgYm90aCBlbmRzG1szOW0gCgo=","exit_code":1},{"starting_at":1726240834770,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXk9bnAuYXJhbmdlKDAsMTApCmFycmF5Wzo6LTFdCnByaW50KGFycmF5KQ==","ended_at":1726240835193,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZmJjOGViZmJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gY2FwdHVyZWQub3V0ChtbMW0bWzMxbUUgICAgICAgYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLiAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzAgMSAyIDMgNCA1IDYgNyA4IDldXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uIDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjI6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZmJjOGViZmJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gY2FwdHVyZWQub3V0ChtbMW0bWzMxbUUgICAgICAgYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLiAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzAgMSAyIDMgNCA1IDYgNyA4IDldXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uIDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjI6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726241047497,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbyk=","ended_at":1726241047901,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTQgcGFzc2VkG1swbRtbMzJtIGluIDAuMTJzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726240537525,"completed_at":1726241047901},{"slug":"010-matrix-with-ranging-values","position":10,"files":[{"path":".learn/exercises/010-matrix-with-ranging-values/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/010-matrix-with-ranging-values/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/010-matrix-with-ranging-values/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/010-matrix-with-ranging-values/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true,"opened_at":1726241054778},{"slug":"011-find-indices-of-non-zero-elements","position":11,"files":[{"path":".learn/exercises/011-find-indices-of-non-zero-elements/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/011-find-indices-of-non-zero-elements/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/011-find-indices-of-non-zero-elements/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/011-find-indices-of-non-zero-elements/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"012-identity-matrix","position":12,"files":[{"path":".learn/exercises/012-identity-matrix/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/012-identity-matrix/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/012-identity-matrix/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/012-identity-matrix/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"013-random-values-array","position":13,"files":[{"path":".learn/exercises/013-random-values-array/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/013-random-values-array/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/013-random-values-array/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/013-random-values-array/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"014-minimum-and-maximum","position":14,"files":[{"path":".learn/exercises/014-minimum-and-maximum/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/014-minimum-and-maximum/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/014-minimum-and-maximum/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/014-minimum-and-maximum/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"015-mean-value","position":15,"files":[{"path":".learn/exercises/015-mean-value/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/015-mean-value/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/015-mean-value/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/015-mean-value/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"016-array-border","position":16,"files":[{"path":".learn/exercises/016-array-border/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/016-array-border/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/016-array-border/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/016-array-border/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"017-add-border-to-array","position":17,"files":[{"path":".learn/exercises/017-add-border-to-array/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/017-add-border-to-array/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/017-add-border-to-array/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/017-add-border-to-array/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"018-result-of-expressions","position":18,"files":[{"path":".learn/exercises/018-result-of-expressions/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/018-result-of-expressions/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/018-result-of-expressions/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/018-result-of-expressions/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"019-diagonal","position":19,"files":[{"path":".learn/exercises/019-diagonal/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/019-diagonal/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/019-diagonal/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/019-diagonal/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"020-checkerboard-pattern","position":20,"files":[{"path":".learn/exercises/020-checkerboard-pattern/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/020-checkerboard-pattern/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/020-checkerboard-pattern/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/020-checkerboard-pattern/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true}],"workout_session":[{"started_at":1726111120970,"ended_at":1726111202203},{"started_at":1726178931928,"ended_at":1726179621023},{"started_at":1726184552033,"ended_at":1726187174978},{"started_at":1726239607428}],"user_id":12051,"last_interaction_at":1726241054778}