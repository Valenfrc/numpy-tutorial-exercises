{"telemetry_id":"j3dqn9x3h57kar5p","slug":"numpy-exercises","agent":"vscode","tutorial_started_at":1726111120970,"steps":[{"slug":"000-welcome","position":0,"files":[{"path":".learn/exercises/000-welcome/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/000-welcome/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"001-create-entry-file","position":1,"files":[{"path":".learn/exercises/001-create-entry-file/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/001-create-entry-file/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/001-create-entry-file/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"","signal":null,"memoryUsage":524288,"cpuUsage":8868,"starting_at":1726111167942,"source_code":"","ended_at":1726111168060,"exit_code":0}],"tests":[{"starting_at":1726111174116,"source_code":"","ended_at":1726111174450,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDEgaXRlbQoKLmxlYXJuL2V4ZXJjaXNlcy8wMDEtY3JlYXRlLWVudHJ5LWZpbGUvdGVzdC5weSAbWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQoKG1szMm09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMm0bWzFtMSBwYXNzZWQbWzBtG1szMm0gaW4gMC4wMXMbWzBtG1szMm0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726111148646,"completed_at":1726111174450},{"slug":"002-import-numpy","position":2,"files":[{"path":".learn/exercises/002-import-numpy/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/002-import-numpy/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/002-import-numpy/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/002-import-numpy/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1726111199395,"source_code":"aW1wb3J0IG51bXB5IGFzIG5w","ended_at":1726111199684,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDEgaXRlbQoKLmxlYXJuL2V4ZXJjaXNlcy8wMDItaW1wb3J0LW51bXB5L3Rlc3QucHkgG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQoKG1szMm09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMm0bWzFtMSBwYXNzZWQbWzBtG1szMm0gaW4gMC4wMXMbWzBtG1szMm0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726111178050,"completed_at":1726111199684},{"slug":"003-numpy-version","position":3,"files":[{"path":".learn/exercises/003-numpy-version/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/003-numpy-version/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/003-numpy-version/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/003-numpy-version/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"MS4yNC4yCg==","signal":null,"memoryUsage":524288,"cpuUsage":2842,"starting_at":1726179128322,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQ==","ended_at":1726179128732,"exit_code":0}],"tests":[{"starting_at":1726179132577,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQ==","ended_at":1726179133114,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDIgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDAzLW51bXB5LXZlcnNpb24vdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTIgcGFzc2VkG1swbRtbMzJtIGluIDAuMTFzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726111202203,"completed_at":1726179133114},{"slug":"004-your-first-vector","position":4,"files":[{"path":".learn/exercises/004-your-first-vector/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/004-your-first-vector/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/004-your-first-vector/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/004-your-first-vector/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726179339304,"student_message":"vector nulo de tama√±o 10","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os, re\n\n@pytest.mark.it(\"Use the zeros() function\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"zeros(\") > 0\n\n@pytest.mark.it('The output should be a null vector of size 10')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\.\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `004` Your first vector\n\n## üìù Instrucciones:\n\n1. Crea un vector nulo de tama√±o 10 e imprimelo en la consola.\n\n## üí° Pistas:\n\n+ La funci√≥n para crear vecotres nulos es: `np.zeros`.\n\n+ Puedes leer m√°s sobre esta funci√≥n aqu√≠: https://numpy.org/doc/stable/reference/generated/numpy.zeros.html\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 3 items\n\n.learn/exercises/004-your-first-vector/test.py .F.                       [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x741f3327fcd0>\n\n    @pytest.mark.it('The output should be a null vector of size 10')\n    def test_print(capsys):\n        import app\n        captured = capsys.readouterr()\n>       assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in captured.out\nE       AssertionError: assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in '1.24.2\\n'\nE        +  where '1.24.2\\n' = CaptureResult(out='1.24.2\\n', err='').out\n\n.learn/exercises/004-your-first-vector/test.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/004-your-first-vector/test.py::test_print - AssertionError: assert '[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n' in '1.24.2\\n'\n========================= 1 failed, 2 passed in 0.11s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a null vector of size 10 \n\n","ending_at":1726179344661,"ai_response":"Para crear un vector nulo de tama√±o 10 en NumPy, puedes usar la funci√≥n `np.zeros`. Esta funci√≥n genera un array de ceros con la forma especificada. \n\nVamos a reflexionar sobre c√≥mo podr√≠as implementar esto en tu c√≥digo. ¬øQu√© pasos crees que necesitas seguir para lograrlo?\n\n1. **Importar la librer√≠a NumPy**: Primero, necesitas importar NumPy para poder usar sus funciones.\n2. **Crear el vector nulo**: Utilizar la funci√≥n `np.zeros` para crear un vector de tama√±o 10.\n3. **Imprimir el vector**: Finalmente, imprimir el vector para verificar que se ha creado correctamente.\n\n¬øC√≥mo crees que podr√≠as escribir el c√≥digo para estos pasos?"}],"compilations":[{"stderr":"","stdout":"MS4yNC4yCg==","signal":null,"memoryUsage":393216,"cpuUsage":7450,"starting_at":1726179620812,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkK","ended_at":1726179621023,"exit_code":0}],"tests":[{"starting_at":1726179188588,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvKDEwKQo=","ended_at":1726179188977,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMW1GG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiVXNlIHRoZSB6ZXJvcygpIGZ1bmN0aW9uIikKICAgIGRlZiB0ZXN0X291dHB1dCgpOgogICAgICAgIGYgPSBvcGVuKCdhcHAucHknKQogICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQo+ICAgICAgIGFzc2VydCBjb250ZW50LmZpbmQoInplcm9zKCIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4Nzc3OWZmMzkwYzAwPignemVyb3MoJykbWzBtChtbMW0bWzMxbUUgICAgICAgICsgICAgd2hlcmUgPGJ1aWx0LWluIG1ldGhvZCBmaW5kIG9mIHN0ciBvYmplY3QgYXQgMHg3Nzc5ZmYzOTBjMDA+ID0gJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5ucC56ZXJvKDEwKVxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc3NzlmZjU4ZDdiMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCcpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkbWzBtOjEyOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtYXBwLnB5G1swbTozOiBpbiA8bW9kdWxlPgogICAgbnAuemVybygxMCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmF0dHIgPSAnemVybycKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/G1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5G1swbTozMjA6IEF0dHJpYnV0ZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/ChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMSBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMW1GG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiVXNlIHRoZSB6ZXJvcygpIGZ1bmN0aW9uIikKICAgIGRlZiB0ZXN0X291dHB1dCgpOgogICAgICAgIGYgPSBvcGVuKCdhcHAucHknKQogICAgICAgIGNvbnRlbnQgPSBmLnJlYWQoKQo+ICAgICAgIGFzc2VydCBjb250ZW50LmZpbmQoInplcm9zKCIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4Nzc3OWZmMzkwYzAwPignemVyb3MoJykbWzBtChtbMW0bWzMxbUUgICAgICAgICsgICAgd2hlcmUgPGJ1aWx0LWluIG1ldGhvZCBmaW5kIG9mIHN0ciBvYmplY3QgYXQgMHg3Nzc5ZmYzOTBjMDA+ID0gJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5ucC56ZXJvKDEwKVxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc3NzlmZjU4ZDdiMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCcpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkbWzBtOjEyOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtYXBwLnB5G1swbTozOiBpbiA8bW9kdWxlPgogICAgbnAuemVybygxMCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmF0dHIgPSAnemVybycKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/G1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5G1swbTozMjA6IEF0dHJpYnV0ZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ3plcm8nLiBEaWQgeW91IG1lYW46ICd6ZXJvcyc/ChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMSBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21Vc2UgdGhlIHplcm9zKCkgZnVuY3Rpb24bWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAxLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726179231320,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMCkK","ended_at":1726179231728,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ODM1MDQ3YWJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ODM1MDQ3YWJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726179260846,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygwLDEwKQo=","ended_at":1726179261225,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MjA3ZjVlNDNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxMjogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKPiAgIG5wLnplcm9zKDAsMTApChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IENhbm5vdCBpbnRlcnByZXQgJzEwJyBhcyBhIGRhdGEgdHlwZRtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MzogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogQ2Fubm90IGludGVycHJldCAnMTAnIGFzIGEgZGF0YSB0eXBlChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MjA3ZjVlNDNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxMjogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKPiAgIG5wLnplcm9zKDAsMTApChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IENhbm5vdCBpbnRlcnByZXQgJzEwJyBhcyBhIGRhdGEgdHlwZRtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MzogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogQ2Fubm90IGludGVycHJldCAnMTAnIGFzIGEgZGF0YSB0eXBlChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726179302369,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkK","ended_at":1726179302792,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MTY4NjU4M2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MTY4NjU4M2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726179337015,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkK","ended_at":1726179337435,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NDFmMzMyN2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NDFmMzMyN2ZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gJzEuMjQuMlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgd2hlcmUgJzEuMjQuMlxuJyA9IENhcHR1cmVSZXN1bHQob3V0PScxLjI0LjJcbicsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDQteW91ci1maXJzdC12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAnMS4yNC4yXG4nChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726184645978,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMSkKcHJpbnQobnApCg==","ended_at":1726184650665,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YWM5ZTNiNWZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAzLjE5cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YWM5ZTNiNWZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAzLjE5cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726184800215,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpucC56ZXJvcygxMCkKcHJpbnQobnApCg==","ended_at":1726184800646,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTBiYWYyZmJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTBiYWYyZmJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0ICdbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuJyBpbiAiMS4yNC4yXG48bW9kdWxlICdudW1weScgZnJvbSAnL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L19faW5pdF9fLnB5Jz5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcbjxtb2R1bGUgJ251bXB5JyBmcm9tICcvaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvX19pbml0X18ucHknPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5G1swbToxNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNC15b3VyLWZpcnN0LXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJ1swLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbicgaW4gIjEuMjQuMlxuPG1vZHVsZSAnbnVtcHknIGZyb20uLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726184893349,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCg==","ended_at":1726184893695,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA0LXlvdXItZmlyc3QtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMDhzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726179140033,"completed_at":1726184893695},{"slug":"005-array-memory-size","position":5,"files":[{"path":".learn/exercises/005-array-memory-size/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/005-array-memory-size/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/005-array-memory-size/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/005-array-memory-size/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726186022382,"student_message":"resuelveme el problema","context":"---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\n\n@pytest.mark.it(\"You have to use the itemsize property\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"itemsize\") > 0\n\n@pytest.mark.it(\"You have to use the size property\")\ndef test_size_used():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"size\") > 0\n\n@pytest.mark.it('The output should be the memory size of a null vector of size 10')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert '80\\n' in captured.out\n\n\n@pytest.mark.it(\"Do not hardcode the expected output\")\ndef test_harcoded_output():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"print\\s*\\((\\s*80)\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n---\n      # File name: .devcontainer. Content: \n      `Error: This is not a file to be read, but a directory: ./.devcontainer`\n      ---\n      \n---\n      # File name: .git. Content: \n      `Error: This is not a file to be read, but a directory: ./.git`\n      ---\n      \n---\n      # File name: .gitattributes. Content: \n      `*.md linguist-language=Python\n*.ipynb linguist-language=Python\n`\n      ---\n      \n---\n      # File name: .github. Content: \n      `Error: This is not a file to be read, but a directory: ./.github`\n      ---\n      \n---\n      # File name: .gitignore. Content: \n      `# configuration and readme\n!.gitignore\n!.gitpod.yml\nconftest.py\n!.gitpod.Dockerfile\n!learn.json\n!README.md\n!.devcontainer\n!.devcontainer/*\n\n# exercises\n!.learn/\n!.learn/*\n.learn/_app\n.learn/.session\n.learn/dist\n.learn/app.tar.gz\n.learn/config.json\n.learn/vscode_queue.json\n\n.ipynb_checkpoints/\n__pycache__\nvenv\n.idea\n.vscode\nUntitled.ipynb\n.pytest_cache\n`\n      ---\n      \n---\n      # File name: .gitpod.Dockerfile. Content: \n      `FROM gitpod/workspace-full:latest\n\nUSER gitpod\n\n# Install Python 3.11\nRUN pyenv install 3.11.5\nRUN pyenv global 3.11.5\n\n# Upgrade setuptools\nRUN pip3 install --upgrade setuptools\n\n# Install required packages\nRUN pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\nRUN npm i @learnpack/learnpack@2.1.56 -g && learnpack plugins:install @learnpack/python@1.0.3\n`\n      ---\n      \n---\n      # File name: .gitpod.yml. Content: \n      `image:\n  file: .gitpod.Dockerfile\n\nports:\n    - port: 3000\n      onOpen: ignore\n\nvscode:\n  extensions:\n    - learn-pack.learnpack-vscode\n\ngithub:\n    prebuilds:\n        # enable for the master/default branch (defaults to true)\n        master: true\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: false\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to true)\n        addComment: false\n`\n      ---\n      \n---\n      # File name: .learn. Content: \n      `Error: This is not a file to be read, but a directory: ./.learn`\n      ---\n      \n---\n      # File name: .pytest_cache. Content: \n      `Error: This is not a file to be read, but a directory: ./.pytest_cache`\n      ---\n      \n---\n      # File name: .vscode. Content: \n      `Error: This is not a file to be read, but a directory: ./.vscode`\n      ---\n      \n---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: __pycache__. Content: \n      `Error: This is not a file to be read, but a directory: ./__pycache__`\n      ---\n      \n---\n      # File name: app.py. Content: \n      `import numpy as np\nprint(np.__version__)\nprint(np.zeros(10))\nmem_size=zero.itemsize * zeros.size\nprint(mem_size)\n\n`\n      ---\n      \n---\n      # File name: conftest.py. Content: \n      `import sys, os, json\nif os.path.isdir(\"./.venv/lib/\"):\n    sys.path.append('null/site-packages')\ndef pytest_addoption(parser):\n    parser.addoption(\"--stdin\", action=\"append\", default=[],\n        help=\"json with the stdin to pass to test functions\")\ndef pytest_generate_tests(metafunc):\n    if 'stdin' in metafunc.fixturenames:\n      if hasattr(metafunc,\"config\"):\n          metafunc.parametrize(\"stdin\",metafunc.config.getoption('stdin'))\n      elif hasattr(metafunc,\"configuration\"):\n          metafunc.parametrize(\"stdin\",metafunc.configuration.getoption('stdin'))\n      else:\n          raise Exception(\"Imposible to retrieve text configuration object\")\n    if 'app' in metafunc.fixturenames:\n        try:\n          sys.path.append('.learn/dist')\n          import cached_app\n          metafunc.parametrize(\"app\",[cached_app.execute_app])\n        except SyntaxError:\n          metafunc.parametrize(\"app\",[lambda : None])\n        except ImportError:\n          metafunc.parametrize(\"app\",[cached_app])\n        except AttributeError:\n          metafunc.parametrize(\"app\",[cached_app])\n    if 'configuration' in metafunc.fixturenames:\n        metafunc.parametrize(\"configuration\", [json.loads('{\"port\":3000,\"os\":\"linux\",\"editor\":{\"mode\":\"extension\",\"agent\":\"vscode\",\"version\":\"4.0.0\"},\"dirPath\":\"./.learn\",\"configPath\":\"learn.json\",\"outputPath\":\".learn/dist\",\"publicPath\":\"/preview\",\"publicUrl\":\"https://supreme-space-waffle-v6g4w5wvwqgr2jqg-3000.app.github.dev\",\"contact\":\"https://github.com/learnpack/learnpack/issues/new\",\"language\":\"auto\",\"autoPlay\":true,\"projectType\":\"tutorial\",\"grading\":\"incremental\",\"exercisesPath\":\".learn/exercises\",\"webpackTemplate\":null,\"disableGrading\":false,\"disabledActions\":[],\"actions\":[],\"entries\":{\"html\":\"index.html\",\"vanillajs\":\"index.js\",\"react\":\"app.jsx\",\"node\":\"app.js\",\"python3\":\"app.py\",\"java\":\"app.java\"},\"suggestions\":{\"agent\":\"vscode\"},\"warnings\":{\"agent\":null},\"preview\":\"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\"repository\":\"https://github.com/breatheco-de/numpy-tutorial-exercises\",\"difficulty\":\"intermediate\",\"duration\":10,\"description\":{\"us\":\"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\"es\":\"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"},\"title\":{\"us\":\"Numpy Tutorial Exercises\",\"es\":\"Tutorial Interactivo de Numpy\"},\"slug\":\"numpy-exercises\",\"translations\":[]}')])\n`\n      ---\n      \n---\n      # File name: learn.json. Content: \n      `{\n    \"preview\": \"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\n    \"repository\": \"https://github.com/breatheco-de/numpy-tutorial-exercises\",\n    \"grading\": \"incremental\",\n    \"difficulty\": \"intermediate\",\n    \"duration\": 10,\n    \"description\": {\n        \"us\": \"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\n        \"es\": \"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"\n    },\n    \"title\": {\n        \"us\": \"Numpy Tutorial Exercises\",\n        \"es\": \"Tutorial Interactivo de Numpy\"\n    },\n    \"slug\": \"numpy-exercises\",\n    \"editor\": {\n        \"version\": \"4.0.0\"\n    }\n}\n`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `005` Array Memory Size\n\n## üìù Instrucciones:\n\n1. Encuentra la cantidad de memoria ocupada por el array e impr√≠mela en la consola.\n\n## üí° Pistas:\n\n+ Para encontrar la cantidad de memoria que ocupa un elemento de un array, puedes usar esta propiedad: `itemsize`.\n\n+ Para encontrar la cantidad de elementos de un array, puedes usar esta propiedad: `size`.\n\n+ La cantidad de memoria ocupada por el array es la suma de la cantidad de memoria utilizada por cada elemento del array. Como en este caso todos los elementos son iguales, puedes multiplicar el tama√±o del array por la cantidad de memoria que ocupa el elemento.\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/005-array-memory-size/test.py ..F.                      [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x77628563fd90>\n\n    @pytest.mark.it('The output should be the memory size of a null vector of size 10')\n    def test_print(capsys):\n>       import app\n\n.learn/exercises/005-array-memory-size/test.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import numpy as np\n    print(np.__version__)\n    print(np.zeros(10))\n>   mem_size=zero.itemsize * zeros.size\nE   NameError: name 'zero' is not defined\n\napp.py:4: NameError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n=========================== short test summary info ============================\nFAILED .learn/exercises/005-array-memory-size/test.py::test_print - NameError: name 'zero' is not defined\n========================= 1 failed, 3 passed in 0.11s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be the memory size of a null vector of size 10 \n\n","ending_at":1726186026158,"ai_response":"Vamos a analizar tu c√≥digo y ver c√≥mo podemos corregirlo. Observa que tienes un error de nombre en tu c√≥digo:\n\n```python\nimport numpy as np\nprint(np.__version__)\nprint(np.zeros(10))\nmem_size=zero.itemsize * zeros.size\nprint(mem_size)\n```\n\nEl error se debe a que has escrito `zero` y `zeros`, pero deber√≠as estar usando el mismo nombre para la variable que contiene el array de ceros. Vamos a corregirlo paso a paso.\n\n1. **Crea el array de ceros y as√≠gnalo a una variable**:\n   ```python\n   zeros = np.zeros(10)\n   ```\n\n2. **Calcula el tama√±o de memoria usando las propiedades `itemsize` y `size`**:\n   ```python\n   mem_size = zeros.itemsize * zeros.size\n   ```\n\n3. **Imprime el tama√±o de memoria**:\n   ```python\n   print(mem_size)\n   ```\n\nEntonces, tu c√≥digo completo deber√≠a verse as√≠:\n\n```python\nimport numpy as np\n\n# Crear un array de ceros de tama√±o 10\nzeros = np.zeros(10)\n\n# Calcular el tama√±o de memoria\nmem_size = zeros.itemsize * zeros.size\n\n# Imprimir el tama√±o de memoria\nprint(mem_size)\n```\n\n¬øPuedes intentar hacer estos cambios y ver si los tests pasan?"}],"compilations":[],"tests":[{"starting_at":1726185276702,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCmFycj1ucC5zaXplKCkKcHJpbnQoYXJyKQo=","ended_at":1726185277136,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4N2U5YmQ1MGFlOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDdlOWJkNTBhZThiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcbnByaW50KGFycilcbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZTliZDRmZGMwNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuc2l6ZSgpCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgphcmdzID0gKCksIGt3YXJncyA9IHt9Cm1zZyA9ICJfc2l6ZV9kaXNwYXRjaGVyKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKZGlzcF9uYW1lID0gJ19zaXplX2Rpc3BhdGNoZXInCm5ld19tc2cgPSAic2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCgo+ICAgPz8/ChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnG1swbQoKG1sxbRtbMzFtPF9fYXJyYXlfZnVuY3Rpb25fXyBpbnRlcm5hbHM+G1swbToxOTg6IFR5cGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJwobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTJzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4N2U5YmQ1MGFlOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDdlOWJkNTBhZThiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcbnByaW50KGFycilcbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZTliZDRmZGMwNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuc2l6ZSgpCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgphcmdzID0gKCksIGt3YXJncyA9IHt9Cm1zZyA9ICJfc2l6ZV9kaXNwYXRjaGVyKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKZGlzcF9uYW1lID0gJ19zaXplX2Rpc3BhdGNoZXInCm5ld19tc2cgPSAic2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCgo+ICAgPz8/ChtbMW0bWzMxbUUgICBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnG1swbQoKG1sxbRtbMzFtPF9fYXJyYXlfZnVuY3Rpb25fXyBpbnRlcm5hbHM+G1swbToxOTg6IFR5cGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X291dHB1dBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IC0xID4gMAobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJwobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTJzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eRtbMzltCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDEuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lbW9yeSBzaXplIG9mIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726185301630,"ended_at":1726185302033,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzhjYjEyNzYyOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDc4Y2IxMjc2MjhiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbnByaW50KGFycj1ucC5zaXplKCkpXG5cbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OGNiMTI2Nzg5MTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBwcmludChhcnI9bnAuc2l6ZSgpKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJncyA9ICgpLCBrd2FyZ3MgPSB7fQptc2cgPSAiX3NpemVfZGlzcGF0Y2hlcigpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCmRpc3BfbmFtZSA9ICdfc2l6ZV9kaXNwYXRjaGVyJwpuZXdfbXNnID0gInNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgoKPiAgID8/PwobWzFtG1szMW1FICAgVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJxtbMG0KChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MTk4OiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAtMSA+IDAKG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTIgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzhjYjEyNzYyOGIwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDc4Y2IxMjc2MjhiMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbnByaW50KGFycj1ucC5zaXplKCkpXG5cbicuZmluZBtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkbWzBtOjg6IEFzc2VydGlvbkVycm9yChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OGNiMTI2Nzg5MTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBwcmludChhcnI9bnAuc2l6ZSgpKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJncyA9ICgpLCBrd2FyZ3MgPSB7fQptc2cgPSAiX3NpemVfZGlzcGF0Y2hlcigpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYSciCmRpc3BfbmFtZSA9ICdfc2l6ZV9kaXNwYXRjaGVyJwpuZXdfbXNnID0gInNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgoKPiAgID8/PwobWzFtG1szMW1FICAgVHlwZUVycm9yOiBzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJxtbMG0KChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MTk4OiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAtMSA+IDAKG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTIgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjExcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVlvdSBoYXZlIHRvIHVzZSB0aGUgaXRlbXNpemUgcHJvcGVydHkbWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAxLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726185385382,"ended_at":1726185385840,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzNlMDhkMjZiZjMwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDczZTA4ZDI2YmYzMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcblxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczZTA4ZDBlNDkxMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gChtbMW0bWzMxbWFwcC5weRtbMG06NDogaW4gPG1vZHVsZT4KICAgIGFycj1ucC5zaXplKCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmFyZ3MgPSAoKSwga3dhcmdzID0ge30KbXNnID0gIl9zaXplX2Rpc3BhdGNoZXIoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgpkaXNwX25hbWUgPSAnX3NpemVfZGlzcGF0Y2hlcicKbmV3X21zZyA9ICJzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKCj4gICA/Pz8KG1sxbRtbMzFtRSAgIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScbWzBtCgobWzFtG1szMW08X19hcnJheV9mdW5jdGlvbl9fIGludGVybmFscz4bWzBtOjE5ODogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3Rfb3V0cHV0G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSBpdGVtc2l6ZSBwcm9wZXJ0eSIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBmID0gb3BlbignYXBwLnB5JykKICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkKPiAgICAgICBhc3NlcnQgY29udGVudC5maW5kKCJpdGVtc2l6ZSIpID4gMAobWzFtG1szMW1FICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAtMSA9IDxidWlsdC1pbiBtZXRob2QgZmluZCBvZiBzdHIgb2JqZWN0IGF0IDB4NzNlMDhkMjZiZjMwPignaXRlbXNpemUnKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgKyAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIGZpbmQgb2Ygc3RyIG9iamVjdCBhdCAweDczZTA4ZDI2YmYzMD4gPSAnaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbmFycj1ucC5zaXplKClcblxuJy5maW5kG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06ODogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczZTA4ZDBlNDkxMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAnKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gChtbMW0bWzMxbWFwcC5weRtbMG06NDogaW4gPG1vZHVsZT4KICAgIGFycj1ucC5zaXplKCkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmFyZ3MgPSAoKSwga3dhcmdzID0ge30KbXNnID0gIl9zaXplX2Rpc3BhdGNoZXIoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnIgpkaXNwX25hbWUgPSAnX3NpemVfZGlzcGF0Y2hlcicKbmV3X21zZyA9ICJzaXplKCkgbWlzc2luZyAxIHJlcXVpcmVkIHBvc2l0aW9uYWwgYXJndW1lbnQ6ICdhJyIKCj4gICA/Pz8KG1sxbRtbMzFtRSAgIFR5cGVFcnJvcjogc2l6ZSgpIG1pc3NpbmcgMSByZXF1aXJlZCBwb3NpdGlvbmFsIGFyZ3VtZW50OiAnYScbWzBtCgobWzFtG1szMW08X19hcnJheV9mdW5jdGlvbl9fIGludGVybmFscz4bWzBtOjE5ODogVHlwZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3Rfb3V0cHV0G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgLTEgPiAwChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNS1hcnJheS1tZW1vcnktc2l6ZS90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBUeXBlRXJyb3I6IHNpemUoKSBtaXNzaW5nIDEgcmVxdWlyZWQgcG9zaXRpb25hbCBhcmd1bWVudDogJ2EnChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21Zb3UgaGF2ZSB0byB1c2UgdGhlIGl0ZW1zaXplIHByb3BlcnR5G1szOW0KICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMS4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwG1szOW0gCgo=","exit_code":1},{"starting_at":1726185413531,"ended_at":1726185414022,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NTNjNjRhZGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjIwcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NTNjNjRhZGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjIwcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726185816200,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCmFycj1ucC5pdGVtc2l6ZSgpCnByaW50KGl0ZW1zaXplKQoK","ended_at":1726185816607,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmY4YTI0NmZkYzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmY4YTI0NmZkYzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjQ6IGluIDxtb2R1bGU+CiAgICBhcnI9bnAuaXRlbXNpemUoKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXR0ciA9ICdpdGVtc2l6ZScKCiAgICBkZWYgX19nZXRhdHRyX18oYXR0cik6CiAgICAgICAgIyBXYXJuIGZvciBleHBpcmVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYSBkdW1teSBmdW5jdGlvbgogICAgICAgICMgdGhhdCBhbHdheXMgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgICAgICBpbXBvcnQgd2FybmluZ3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1zZyA9IF9fZXhwaXJlZF9mdW5jdGlvbnNfX1thdHRyXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obXNnLCBEZXByZWNhdGlvbldhcm5pbmcsIHN0YWNrbGV2ZWw9MikKICAgIAogICAgICAgICAgICBkZWYgX2V4cGlyZWQoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IobXNnKQogICAgCiAgICAgICAgICAgIHJldHVybiBfZXhwaXJlZAogICAgCiAgICAgICAgIyBFbWl0IHdhcm5pbmdzIGZvciBkZXByZWNhdGVkIGF0dHJpYnV0ZXMKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbCwgbXNnID0gX19kZXByZWNhdGVkX2F0dHJzX19bYXR0cl0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB3YXJuaW5ncy53YXJuKG1zZywgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgICAgIHJldHVybiB2YWwKICAgIAogICAgICAgIGlmIGF0dHIgaW4gX19mdXR1cmVfc2NhbGFyc19fOgogICAgICAgICAgICAjIEFuZCBmdXR1cmUgd2FybmluZ3MgZm9yIHRob3NlIHRoYXQgd2lsbCBjaGFuZ2UsIGJ1dCBhbHNvIGdpdmUKICAgICAgICAgICAgIyB0aGUgQXR0cmlidXRlRXJyb3IKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgIGYiSW4gdGhlIGZ1dHVyZSBgbnAue2F0dHJ9YCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlICIKICAgICAgICAgICAgICAgICJjb3JyZXNwb25kaW5nIE51bVB5IHNjYWxhci4iLCBGdXR1cmVXYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAKICAgICAgICBpZiBhdHRyIGluIF9fZm9ybWVyX2F0dHJzX186CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKF9fZm9ybWVyX2F0dHJzX19bYXR0cl0pCiAgICAKICAgICAgICAjIEltcG9ydGluZyBUZXN0ZXIgcmVxdWlyZXMgaW1wb3J0aW5nIGFsbCBvZiBVbml0VGVzdCB3aGljaCBpcyBub3QgYQogICAgICAgICMgY2hlYXAgaW1wb3J0IFNpbmNlIGl0IGlzIG1haW5seSB1c2VkIGluIHRlc3Qgc3VpdHMsIHdlIGxhenkgaW1wb3J0IGl0CiAgICAgICAgIyBoZXJlIHRvIHNhdmUgb24gdGhlIG9yZGVyIG9mIDEwIG1zIG9mIGltcG9ydCB0aW1lIGZvciBtb3N0IHVzZXJzCiAgICAgICAgIwogICAgICAgICMgVGhlIHByZXZpb3VzIHdheSBUZXN0ZXIgd2FzIGltcG9ydGVkIGFsc28gaGFkIGEgc2lkZSBlZmZlY3Qgb2YgYWRkaW5nCiAgICAgICAgIyB0aGUgZnVsbCBgbnVtcHkudGVzdGluZ2AgbmFtZXNwYWNlCiAgICAgICAgaWYgYXR0ciA9PSAndGVzdGluZyc6CiAgICAgICAgICAgIGltcG9ydCBudW1weS50ZXN0aW5nIGFzIHRlc3RpbmcKICAgICAgICAgICAgcmV0dXJuIHRlc3RpbmcKICAgICAgICBlbGlmIGF0dHIgPT0gJ1Rlc3Rlcic6CiAgICAgICAgICAgIGZyb20gLnRlc3RpbmcgaW1wb3J0IFRlc3RlcgogICAgICAgICAgICByZXR1cm4gVGVzdGVyCiAgICAKPiAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHshcn0gaGFzIG5vIGF0dHJpYnV0ZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInshcn0iLmZvcm1hdChfX25hbWVfXywgYXR0cikpChtbMW0bWzMxbUUgICAgICAgQXR0cmlidXRlRXJyb3I6IG1vZHVsZSAnbnVtcHknIGhhcyBubyBhdHRyaWJ1dGUgJ2l0ZW1zaXplJxtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9fX2luaXRfXy5weRtbMG06MzIwOiBBdHRyaWJ1dGVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEF0dHJpYnV0ZUVycm9yOiBtb2R1bGUgJ251bXB5JyBoYXMgbm8gYXR0cmlidXRlICdpdGVtc2l6ZScKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZW1vcnkgc2l6ZSBvZiBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAbWzM5bSAKCg==","exit_code":1},{"starting_at":1726185839477,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCm1lbV9zaXplID0gemVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCgpwcmludChtZW1fc2l6ZSkKCg==","ended_at":1726185839854,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmIxYzFkOGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZSA9IHplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvcycgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjQ6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnemVyb3MnIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmIxYzFkOGZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZSA9IHplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvcycgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjQ6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnemVyb3MnIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xMnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwG1szOW0gCgo=","exit_code":1},{"starting_at":1726185991259,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCm1lbV9zaXplPXplcm8uaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQoK","ended_at":1726185991632,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NGNkNzE5NmZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NGNkNzE5NmZlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lbW9yeSBzaXplIG9mIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726186019691,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCm1lbV9zaXplPXplcm8uaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQoK","ended_at":1726186020106,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzYyODU2M2ZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzYyODU2M2ZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVtb3J5IHNpemUgb2YgYSBudWxsIHZlY3RvciBvZiBzaXplIDEwJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weRtbMG06MTg6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCj4gICBtZW1fc2l6ZT16ZXJvLml0ZW1zaXplICogemVyb3Muc2l6ZQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06NDogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDUtYXJyYXktbWVtb3J5LXNpemUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICd6ZXJvJyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lbW9yeSBzaXplIG9mIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMBtbMzltIAoK","exit_code":1},{"starting_at":1726186187059,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQoK","ended_at":1726186187526,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA1LWFycmF5LW1lbW9yeS1zaXplL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTQgcGFzc2VkG1swbRtbMzJtIGluIDAuMDhzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726184903501,"completed_at":1726186187526},{"slug":"006-numpy-documentation","position":6,"files":[{"path":".learn/exercises/006-numpy-documentation/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/006-numpy-documentation/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/006-numpy-documentation/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/006-numpy-documentation/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1726186853003,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCg==","ended_at":1726186853346,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDIgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA2LW51bXB5LWRvY3VtZW50YXRpb24vdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTIgcGFzc2VkG1swbRtbMzJtIGluIDAuMDhzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726186582770,"completed_at":1726186853346},{"slug":"007-change-vector-values","position":7,"files":[{"path":".learn/exercises/007-change-vector-values/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/007-change-vector-values/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/007-change-vector-values/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/007-change-vector-values/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726239670699,"student_message":"dame la respuesta","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: __pycache__. Content: \n      `Error: This is not a file to be read, but a directory: ./__pycache__`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os, re\n\n@pytest.mark.it(\"Use the zeros() function\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"zeros(\") > 0\n\n@pytest.mark.it('The output should be a null vector of size 10 and the fifth value should be 1')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert '[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[0\\. 0\\. 0\\. 0\\. 1\\. 0\\. 0\\. 0\\. 0\\. 0\\.\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `007` Change Vector Values\n\n## üìù Instrucciones:\n\n1. Crea un vector nulo de `10` elementos.\n\n2. Cambia el valor del quinto elemento a `1`.\n\n3. Imprime el vector en la consola.\n\n## üìé Ejemplo:\n\n```python\n# En este ejemplo se cambia el valor del segundo elemento a 1\narr = np.zeros(10)\narr[1] = 1\n```\n\n## üí° Pistas:\n\n+ Los valores de los arrays se cambian de la misma manera que se cambian los valores de las listas normales de Python (A trav√©s de su posici√≥n).\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 3 items\n\n.learn/exercises/007-change-vector-values/test.py .F.                    [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7074f7e47cd0>\n\n    @pytest.mark.it('The output should be a null vector of size 10 and the fifth value should be 1')\n    def test_print(capsys):\n>       import app\nE         File \"/workspaces/numpy-tutorial-exercises/app.py\", line 9\nE           arr(5)=1\nE           ^^^^^^\nE       SyntaxError: cannot assign to function call here. Maybe you meant '==' instead of '='?\n\n.learn/exercises/007-change-vector-values/test.py:12: SyntaxError\n=========================== short test summary info ============================\nFAILED .learn/exercises/007-change-vector-values/test.py::test_print -   File \"/workspaces/numpy-tutorial-exercises/app.py\", line 9\n========================= 1 failed, 2 passed in 0.05s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a null vector of size 10 and the fifth value should be 1 \n\n","ending_at":1726239676951,"ai_response":"Entiendo que puede ser frustrante cuando las cosas no funcionan como esperas, pero es importante que intentes resolverlo por ti mismo para aprender mejor. Vamos a revisar tu c√≥digo y ver c√≥mo podemos corregirlo juntos.\n\nPrimero, observemos el error que tienes:\n\n```python\narr(5)=1\n```\n\nEl error indica que est√°s intentando asignar un valor a una funci√≥n en lugar de a un √≠ndice de un array. En Python, para acceder a un elemento de un array, debes usar corchetes `[]` en lugar de par√©ntesis `()`.\n\nVamos a repasar los pasos necesarios:\n\n1. Crear un vector nulo de 10 elementos.\n2. Cambiar el valor del quinto elemento a 1.\n3. Imprimir el vector en la consola.\n\n¬øC√≥mo podr√≠as corregir la l√≠nea donde asignas el valor al quinto elemento? ¬øQu√© tal si intentas usar corchetes en lugar de par√©ntesis?\n\nIntenta escribir algo como esto:\n\n```python\nimport numpy as np\n\n# Crear un vector nulo de 10 elementos\narr = np.zeros(10)\n\n# Cambiar el valor del quinto elemento a 1\narr[4] = 1\n\n# Imprimir el vector en la consola\nprint(arr)\n```\n\n¬øPuedes probar esto y ver si funciona? ¬øQu√© observas cuando lo ejecutas?"}],"compilations":[],"tests":[{"starting_at":1726187147867,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnIoNCk9MQoK","ended_at":1726187148147,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzIxNTExNDEwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig0KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAzcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NzIxNTExNDEwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig0KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAzcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726187157692,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDExKQphcnIoNik9MQoK","ended_at":1726187157970,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWU1MTM2YzdjNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig2KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWU1MTM2YzdjNzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig2KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726187174703,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnIoNSk9MQoK","ended_at":1726187174978,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3M2Q1YmNiMGZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3M2Q1YmNiMGZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjAycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726239667947,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnIoNSk9MQoK","ended_at":1726239670251,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MDc0ZjdlNDdjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjA1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MDc0ZjdlNDdjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG51bGwgdmVjdG9yIG9mIHNpemUgMTAgYW5kIHRoZSBmaWZ0aCB2YWx1ZSBzaG91bGQgYmUgMScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKG1sxbRtbMzFtRSAgICAgICAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgIGFycig1KT0xG1swbQobWzFtG1szMW1FICAgICAgICAgICBeXl5eXl4bWzBtChtbMW0bWzMxbUUgICAgICAgU3ludGF4RXJyb3I6IGNhbm5vdCBhc3NpZ24gdG8gZnVuY3Rpb24gY2FsbCBoZXJlLiBNYXliZSB5b3UgbWVhbnQgJz09JyBpbnN0ZWFkIG9mICc9Jz8bWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5G1swbToxMjogU3ludGF4RXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwNy1jaGFuZ2UtdmVjdG9yLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSAgIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDkKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjA1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgbnVsbCB2ZWN0b3Igb2Ygc2l6ZSAxMCBhbmQgdGhlIGZpZnRoIHZhbHVlIHNob3VsZCBiZSAxG1szOW0gCgo=","exit_code":1},{"starting_at":1726239865966,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCg==","ended_at":1726239866505,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA3LWNoYW5nZS12ZWN0b3ItdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMjZzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726187031024,"completed_at":1726239866505},{"slug":"008-vector-ranging-values","position":8,"files":[{"path":".learn/exercises/008-vector-ranging-values/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/008-vector-ranging-values/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/008-vector-ranging-values/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/008-vector-ranging-values/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":393216,"cpuUsage":3723,"errorType":"run-time","starting_at":1726240341529,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCm5wLmFyYW5nZSgxMCw1MCkKcHJpbnQobnAuYXJhbmdlKQ==","ended_at":1726240341711,"exit_code":null}],"tests":[{"starting_at":1726240345264,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCm5wLmFyYW5nZSgxMCw1MCkKcHJpbnQobnAuYXJhbmdlKQ==","ended_at":1726240345708,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA4LXZlY3Rvci1yYW5naW5nLXZhbHVlcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MzMwODgwZWQwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSAxMCB0byA0OScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uICAgICAgIFsgMy4sICA1LiwgIDcuXSxcbiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKVxuTm9uZVxuWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXVxuPGJ1aWx0LWluIGZ1bmN0aW9uIGFyYW5nZT5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCAuLi4gICAgICAgWyAzLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV8uLi4zLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOC12ZWN0b3ItcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDgtdmVjdG9yLXJhbmdpbmctdmFsdWVzL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIGFzc2VydCAnWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIC4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMThzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA4LXZlY3Rvci1yYW5naW5nLXZhbHVlcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MzMwODgwZWQwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSAxMCB0byA0OScpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJ1sxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uICAgICAgIFsgMy4sICA1LiwgIDcuXSxcbiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKVxuTm9uZVxuWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXVxuPGJ1aWx0LWluIGZ1bmN0aW9uIGFyYW5nZT5cbiIbWzBtChtbMW0bWzMxbUUgICAgICAgICsgIHdoZXJlICIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCAuLi4gICAgICAgWyAzLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiA9IENhcHR1cmVSZXN1bHQob3V0PSIxLjI0LjJcblswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl1cbjgwXG5hZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV8uLi4zLiwgIDUuLCAgNy5dLFxuICAgICAgIFsgNi4sICA4LiwgMTAuXV0pXG5Ob25lXG5bMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dXG48YnVpbHQtaW4gZnVuY3Rpb24gYXJhbmdlPlxuIiwgZXJyPScnKS5vdXQbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOC12ZWN0b3ItcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDgtdmVjdG9yLXJhbmdpbmctdmFsdWVzL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIGFzc2VydCAnWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIC4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMThzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSB2ZWN0b3Igd2l0aCBhbGwgdGhlIGludGVnZXJzIGZyb20gMTAgdG8gNDkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726240531502,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycik=","ended_at":1726240531874,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA4LXZlY3Rvci1yYW5naW5nLXZhbHVlcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMTBzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726239872820,"completed_at":1726240531875},{"slug":"009-reverse-vector","position":9,"files":[{"path":".learn/exercises/009-reverse-vector/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/009-reverse-vector/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/009-reverse-vector/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/009-reverse-vector/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726240706214,"student_message":"que me esta fallando en mi operacion?","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\n\n@pytest.mark.it(\"Use the arange() function\")\ndef test_arange_exists():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"arange(\") > 0\n\n@pytest.mark.it(\"You have to reverse the vector values\")\ndef test_output():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*\\:\\s*\\:\\s*\\-\\s*1\\s*\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('The output should be a vector with all the integers from 9 to 0 inclusive of both ends')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert  '[9 8 7 6 5 4 3 2 1 0]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[9 8 7 6 5 4 3 2 1 0\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `009` Reverse Vector\n\n## üìù Instrucciones:\n\n1. Crea un vector cuyos valores sean los n√∫meros del 0 al 9.\n\n2. Invierte el orden de los valores del vector e imprimelo en la consola.\n\n## üí° Pista:\n\n+ As√≠ es como se obtienen los valores invertidos de un vector `array[::-1]`.\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/009-reverse-vector/test.py ..F.                         [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x79e01cf1be20>\n\n    @pytest.mark.it('The output should be a vector with all the integers from 9 to 0 inclusive of both ends')\n    def test_print(capsys):\n>       import app\n\n.learn/exercises/009-reverse-vector/test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import numpy as np\n    print(np.__version__)\n    print(np.zeros(10))\n    zeros=np.zeros(10)\n    mem_size=zeros.itemsize * zeros.size\n    print(mem_size)\n    print(np.info(np.add))\n    arr = np.zeros(10)\n    arr[4]=1\n    print(arr)\n    arr=np.arange(10,50)\n    print(arr)\n>   array(0,10[::-1])\nE   NameError: name 'array' is not defined\n\napp.py:13: NameError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n80\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\nAdd arguments element-wise.\n\nParameters\n----------\nx1, x2 : array_like\n    The arrays to be added.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the inputs broadcast to. If not provided or None,\n    a freshly-allocated array is returned. A tuple (possible only as a\n    keyword argument) must have length equal to the number of outputs.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the\n    :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\nadd : ndarray or scalar\n    The sum of `x1` and `x2`, element-wise.\n    This is a scalar if both `x1` and `x2` are scalars.\n\nNotes\n-----\nEquivalent to `x1` + `x2` in terms of array broadcasting.\n\nExamples\n--------\n>>> np.add(1.0, 4.0)\n5.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.add(x1, x2)\narray([[  0.,   2.,   4.],\n       [  3.,   5.,   7.],\n       [  6.,   8.,  10.]])\n\nThe ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.\n\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> x1 + x2\narray([[ 0.,  2.,  4.],\n       [ 3.,  5.,  7.],\n       [ 6.,  8., 10.]])\nNone\n[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n=========================== short test summary info ============================\nFAILED .learn/exercises/009-reverse-vector/test.py::test_print - NameError: name 'array' is not defined\n========================= 1 failed, 3 passed in 0.14s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a vector with all the integers from 9 to 0 inclusive of both ends \n\n","ending_at":1726240709713,"ai_response":"Parece que hay un error en tu c√≥digo debido a que est√°s intentando usar `array` sin haberlo definido o importado correctamente. Vamos a revisar los pasos necesarios para completar la tarea:\n\n1. Crear un vector cuyos valores sean los n√∫meros del 0 al 9.\n2. Invertir el orden de los valores del vector e imprimirlo en la consola.\n\nPara lograr esto, puedes seguir estos pasos:\n\n1. Importa la librer√≠a `numpy`.\n2. Usa la funci√≥n `arange` de `numpy` para crear un vector con los valores del 0 al 9.\n3. Invierte el vector usando la notaci√≥n `[::-1]`.\n4. Imprime el vector invertido.\n\nAqu√≠ hay algunas preguntas para guiarte:\n\n1. ¬øC√≥mo puedes importar la librer√≠a `numpy` en tu c√≥digo?\n2. ¬øSabes c√≥mo usar la funci√≥n `arange` de `numpy` para crear un vector?\n3. ¬øC√≥mo puedes invertir un vector en Python usando la notaci√≥n `[::-1]`?\n\nIntenta escribir el c√≥digo siguiendo estos pasos y verifica si resuelve el problema."},{"starting_at":1726240872803,"student_message":"como seria la respuesta y porque","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\n\n@pytest.mark.it(\"Use the arange() function\")\ndef test_arange_exists():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"arange(\") > 0\n\n@pytest.mark.it(\"You have to reverse the vector values\")\ndef test_output():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*\\:\\s*\\:\\s*\\-\\s*1\\s*\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('The output should be a vector with all the integers from 9 to 0 inclusive of both ends')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert  '[9 8 7 6 5 4 3 2 1 0]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[9 8 7 6 5 4 3 2 1 0\\]\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `009` Reverse Vector\n\n## üìù Instrucciones:\n\n1. Crea un vector cuyos valores sean los n√∫meros del 0 al 9.\n\n2. Invierte el orden de los valores del vector e imprimelo en la consola.\n\n## üí° Pista:\n\n+ As√≠ es como se obtienen los valores invertidos de un vector `array[::-1]`.\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      ","ending_at":1726240878709,"ai_response":"Vamos a desglosar el problema paso a paso para que puedas entender c√≥mo resolverlo y por qu√© cada paso es necesario.\n\n1. **Importar la librer√≠a `numpy`**:\n   Para trabajar con vectores y matrices de manera eficiente, necesitamos usar `numpy`. Esta librer√≠a proporciona funciones √∫tiles como `arange`.\n\n2. **Crear un vector con valores del 0 al 9**:\n   Usamos la funci√≥n `arange` de `numpy` para crear un vector que contenga los n√∫meros del 0 al 9.\n\n3. **Invertir el vector**:\n   Utilizamos la notaci√≥n `[::-1]` para invertir el orden de los elementos en el vector.\n\n4. **Imprimir el vector invertido**:\n   Finalmente, imprimimos el vector invertido para verificar el resultado.\n\nAqu√≠ hay algunas preguntas para guiarte:\n\n1. ¬øC√≥mo puedes importar la librer√≠a `numpy` en tu c√≥digo?\n2. ¬øSabes c√≥mo usar la funci√≥n `arange` de `numpy` para crear un vector?\n3. ¬øC√≥mo puedes invertir un vector en Python usando la notaci√≥n `[::-1]`?\n\nIntenta escribir el c√≥digo siguiendo estos pasos y verifica si resuelve el problema.\n\nPara ayudarte a visualizar, aqu√≠ tienes una gu√≠a de c√≥mo podr√≠a verse el c√≥digo:\n\n```python\nimport numpy as np  # Paso 1: Importar numpy\n\nvector = np.arange(10)  # Paso 2: Crear un vector con valores del 0 al 9\n\nvector_invertido = vector[::-1]  # Paso 3: Invertir el vector\n\nprint(vector_invertido)  # Paso 4: Imprimir el vector invertido\n```\n\n- **Importar `numpy`**: `import numpy as np` es necesario para acceder a las funciones de `numpy`.\n- **Crear el vector**: `np.arange(10)` crea un array de `numpy` con valores del 0 al 9.\n- **Invertir el vector**: `vector[::-1]` invierte el orden de los elementos en el array.\n- **Imprimir el vector**: `print(vector_invertido)` muestra el vector invertido en la consola.\n\n¬øTe gustar√≠a intentar escribir el c√≥digo por ti mismo y ver si funciona?"}],"compilations":[],"tests":[{"starting_at":1726240616204,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXlbMCwxMC0xXQpwcmludChhcnJheSk=","ended_at":1726240616661,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgdmVjdG9yIHZhbHVlcyIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBwYXRoID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aCgnYXBwLnB5JykpKycvYXBwLnB5JwogICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGNvbnRlbnRfZmlsZToKICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnRfZmlsZS5yZWFkKCkKICAgICAgICAgICAgcmVnZXggPSByZS5jb21waWxlKHIiXHMqXDpccypcOlxzKlwtXHMqMVxzKiIpCj4gICAgICAgICAgIGFzc2VydCBib29sKHJlZ2V4LnNlYXJjaChjb250ZW50KSkgPT0gVHJ1ZQobWzFtG1szMW1FICAgICAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IEZhbHNlID09IFRydWUbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICB3aGVyZSBGYWxzZSA9IGJvb2woTm9uZSkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICAgIHdoZXJlIE5vbmUgPSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4oJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5wcmludChucC56ZXJvcygxMCkpXG56ZXJvcz1ucC56ZXJvcygxMCkgXG5tZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLi4uLmluZm8obnAuYWRkKSlcbmFyciA9IG5wLnplcm9zKDEwKVxuYXJyWzRdPTFcbnByaW50KGFycilcbmFycj1ucC5hcmFuZ2UoMTAsNTApXG5wcmludChhcnIpXG5hcnJheVswLDEwLTFdXG5wcmludChhcnJheSknKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgICAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4gPSByZS5jb21waWxlKCdcXHMqXFw6XFxzKlxcOlxccypcXC1cXHMqMVxccyonKS5zZWFyY2gbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5G1swbToxNjogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczNjQyYmFkYTYyMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdmVjdG9yIHdpdGggYWxsIHRoZSBpbnRlZ2VycyBmcm9tIDkgdG8gMCBpbmNsdXNpdmUgb2YgYm90aCBlbmRzJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjA6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCiAgICB6ZXJvcz1ucC56ZXJvcygxMCkKICAgIG1lbV9zaXplPXplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQogICAgcHJpbnQobWVtX3NpemUpCiAgICBwcmludChucC5pbmZvKG5wLmFkZCkpCiAgICBhcnIgPSBucC56ZXJvcygxMCkKICAgIGFycls0XT0xCiAgICBwcmludChhcnIpCiAgICBhcnI9bnAuYXJhbmdlKDEwLDUwKQogICAgcHJpbnQoYXJyKQo+ICAgYXJyYXlbMCwxMC0xXQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdhcnJheScgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCBGYWxzZSA9PSBUcnVlChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTVzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X291dHB1dCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgdmVjdG9yIHZhbHVlcyIpCiAgICBkZWYgdGVzdF9vdXRwdXQoKToKICAgICAgICBwYXRoID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aCgnYXBwLnB5JykpKycvYXBwLnB5JwogICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpIGFzIGNvbnRlbnRfZmlsZToKICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnRfZmlsZS5yZWFkKCkKICAgICAgICAgICAgcmVnZXggPSByZS5jb21waWxlKHIiXHMqXDpccypcOlxzKlwtXHMqMVxzKiIpCj4gICAgICAgICAgIGFzc2VydCBib29sKHJlZ2V4LnNlYXJjaChjb250ZW50KSkgPT0gVHJ1ZQobWzFtG1szMW1FICAgICAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0IEZhbHNlID09IFRydWUbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICB3aGVyZSBGYWxzZSA9IGJvb2woTm9uZSkbWzBtChtbMW0bWzMxbUUgICAgICAgICAgICArICAgIHdoZXJlIE5vbmUgPSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4oJ2ltcG9ydCBudW1weSBhcyBucFxucHJpbnQobnAuX192ZXJzaW9uX18pXG5wcmludChucC56ZXJvcygxMCkpXG56ZXJvcz1ucC56ZXJvcygxMCkgXG5tZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLi4uLmluZm8obnAuYWRkKSlcbmFyciA9IG5wLnplcm9zKDEwKVxuYXJyWzRdPTFcbnByaW50KGFycilcbmFycj1ucC5hcmFuZ2UoMTAsNTApXG5wcmludChhcnIpXG5hcnJheVswLDEwLTFdXG5wcmludChhcnJheSknKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgICAgICB3aGVyZSA8YnVpbHQtaW4gbWV0aG9kIHNlYXJjaCBvZiByZS5QYXR0ZXJuIG9iamVjdCBhdCAweDczNjQyYjk0MDMyMD4gPSByZS5jb21waWxlKCdcXHMqXFw6XFxzKlxcOlxccypcXC1cXHMqMVxccyonKS5zZWFyY2gbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5G1swbToxNjogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3ByaW50IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDczNjQyYmFkYTYyMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdmVjdG9yIHdpdGggYWxsIHRoZSBpbnRlZ2VycyBmcm9tIDkgdG8gMCBpbmNsdXNpdmUgb2YgYm90aCBlbmRzJykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjA6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKICAgIGltcG9ydCBudW1weSBhcyBucAogICAgcHJpbnQobnAuX192ZXJzaW9uX18pCiAgICBwcmludChucC56ZXJvcygxMCkpCiAgICB6ZXJvcz1ucC56ZXJvcygxMCkKICAgIG1lbV9zaXplPXplcm9zLml0ZW1zaXplICogemVyb3Muc2l6ZQogICAgcHJpbnQobWVtX3NpemUpCiAgICBwcmludChucC5pbmZvKG5wLmFkZCkpCiAgICBhcnIgPSBucC56ZXJvcygxMCkKICAgIGFycls0XT0xCiAgICBwcmludChhcnIpCiAgICBhcnI9bnAuYXJhbmdlKDEwLDUwKQogICAgcHJpbnQoYXJyKQo+ICAgYXJyYXlbMCwxMC0xXQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdhcnJheScgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9vdXRwdXQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCBGYWxzZSA9PSBUcnVlChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTVzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtWW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgdmVjdG9yIHZhbHVlcxtbMzltCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDEuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSB2ZWN0b3Igd2l0aCBhbGwgdGhlIGludGVnZXJzIGZyb20gOSB0byAwIGluY2x1c2l2ZSBvZiBib3RoIGVuZHMbWzM5bSAKCg==","exit_code":1},{"starting_at":1726240666067,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXlbMCwxMFs6Oi0xXV0KcHJpbnQoYXJyYXkp","ended_at":1726240666508,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDEyMjQ5NWZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5WzAsMTBbOjotMV1dChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5WzAsMTBbOjotMV1dCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDEyMjQ5NWZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5WzAsMTBbOjotMV1dChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5WzAsMTBbOjotMV1dCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726240678892,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXkoMCwxMFs6Oi0xXSkKcHJpbnQoYXJyYXkp","ended_at":1726240679317,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWEzYWMwNWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5KDAsMTBbOjotMV0pCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWEzYWMwNWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzMzbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gd2FybmluZ3Mgc3VtbWFyeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQoubGVhcm4vZXhlcmNpc2VzLzAwOS1yZXZlcnNlLXZlY3Rvci90ZXN0LnB5Ojp0ZXN0X3ByaW50CiAgL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzL2FwcC5weToxMzogU3ludGF4V2FybmluZzogJ2ludCcgb2JqZWN0IGlzIG5vdCBzdWJzY3JpcHRhYmxlOyBwZXJoYXBzIHlvdSBtaXNzZWQgYSBjb21tYT8KICAgIGFycmF5KDAsMTBbOjotMV0pCgotLSBEb2NzOiBodHRwczovL2RvY3MucHl0ZXN0Lm9yZy9lbi9zdGFibGUvaG93LXRvL2NhcHR1cmUtd2FybmluZ3MuaHRtbAobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbSwgG1szM20xIHdhcm5pbmcbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726240704989,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXkoMCwxMFs6Oi0xXSkKcHJpbnQoYXJyYXkp","ended_at":1726240705393,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OWUwMWNmMWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OWUwMWNmMWJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5KDAsMTBbOjotMV0pChtbMW0bWzMxbUUgICBOYW1lRXJyb3I6IG5hbWUgJ2FycmF5JyBpcyBub3QgZGVmaW5lZBtbMG0KChtbMW0bWzMxbWFwcC5weRtbMG06MTM6IE5hbWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIE5hbWVFcnJvcjogbmFtZSAnYXJyYXknIGlzIG5vdCBkZWZpbmVkChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726240787485,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXk9bnAuYXJhbmdlKDAsMTBbOjotMV0pCnByaW50KGFycmF5KQ==","ended_at":1726240787903,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDlmNzM5MzdkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5PW5wLmFyYW5nZSgwLDEwWzo6LTFdKQobWzFtG1szMW1FICAgVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szM209PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHdhcm5pbmdzIHN1bW1hcnkgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6dGVzdF9wcmludAogIC93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHk6MTM6IFN5bnRheFdhcm5pbmc6ICdpbnQnIG9iamVjdCBpcyBub3Qgc3Vic2NyaXB0YWJsZTsgcGVyaGFwcyB5b3UgbWlzc2VkIGEgY29tbWE/CiAgICBhcnJheT1ucC5hcmFuZ2UoMCwxMFs6Oi0xXSkKCi0tIERvY3M6IGh0dHBzOi8vZG9jcy5weXRlc3Qub3JnL2VuL3N0YWJsZS9ob3ctdG8vY2FwdHVyZS13YXJuaW5ncy5odG1sChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUKG1szMW09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtLCAbWzMzbTEgd2FybmluZxtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDlmNzM5MzdkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkbWzBtOjIwOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIHByaW50KG5wLl9fdmVyc2lvbl9fKQogICAgcHJpbnQobnAuemVyb3MoMTApKQogICAgemVyb3M9bnAuemVyb3MoMTApCiAgICBtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKICAgIHByaW50KG1lbV9zaXplKQogICAgcHJpbnQobnAuaW5mbyhucC5hZGQpKQogICAgYXJyID0gbnAuemVyb3MoMTApCiAgICBhcnJbNF09MQogICAgcHJpbnQoYXJyKQogICAgYXJyPW5wLmFyYW5nZSgxMCw1MCkKICAgIHByaW50KGFycikKPiAgIGFycmF5PW5wLmFyYW5nZSgwLDEwWzo6LTFdKQobWzFtG1szMW1FICAgVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjEzOiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KG1szM209PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHdhcm5pbmdzIHN1bW1hcnkgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6dGVzdF9wcmludAogIC93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHk6MTM6IFN5bnRheFdhcm5pbmc6ICdpbnQnIG9iamVjdCBpcyBub3Qgc3Vic2NyaXB0YWJsZTsgcGVyaGFwcyB5b3UgbWlzc2VkIGEgY29tbWE/CiAgICBhcnJheT1ucC5hcmFuZ2UoMCwxMFs6Oi0xXSkKCi0tIERvY3M6IGh0dHBzOi8vZG9jcy5weXRlc3Qub3JnL2VuL3N0YWJsZS9ob3ctdG8vY2FwdHVyZS13YXJuaW5ncy5odG1sChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gVHlwZUVycm9yOiAnaW50JyBvYmplY3QgaXMgbm90IHN1YnNjcmlwdGFibGUKG1szMW09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtLCAbWzMzbTEgd2FybmluZxtbMG0bWzMxbSBpbiAwLjE0cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdmVjdG9yIHdpdGggYWxsIHRoZSBpbnRlZ2VycyBmcm9tIDkgdG8gMCBpbmNsdXNpdmUgb2YgYm90aCBlbmRzG1szOW0gCgo=","exit_code":1},{"starting_at":1726240834770,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKYXJyYXk9bnAuYXJhbmdlKDAsMTApCmFycmF5Wzo6LTFdCnByaW50KGFycmF5KQ==","ended_at":1726240835193,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZmJjOGViZmJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gY2FwdHVyZWQub3V0ChtbMW0bWzMxbUUgICAgICAgYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLiAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzAgMSAyIDMgNCA1IDYgNyA4IDldXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uIDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjI6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZmJjOGViZmJlMjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gY2FwdHVyZWQub3V0ChtbMW0bWzMxbUUgICAgICAgYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLiAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzAgMSAyIDMgNCA1IDYgNyA4IDldXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uIDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bMCAxIDIgMyA0IDUgNiA3IDggOV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weRtbMG06MjI6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMDktcmV2ZXJzZS12ZWN0b3IvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbOSA4IDcgNiA1IDQgMyAyIDEgMF1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIHZlY3RvciB3aXRoIGFsbCB0aGUgaW50ZWdlcnMgZnJvbSA5IHRvIDAgaW5jbHVzaXZlIG9mIGJvdGggZW5kcxtbMzltIAoK","exit_code":1},{"starting_at":1726241047497,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbyk=","ended_at":1726241047901,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDA5LXJldmVyc2UtdmVjdG9yL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTQgcGFzc2VkG1swbRtbMzJtIGluIDAuMTJzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726240537525,"completed_at":1726241047901},{"slug":"010-matrix-with-ranging-values","position":10,"files":[{"path":".learn/exercises/010-matrix-with-ranging-values/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/010-matrix-with-ranging-values/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/010-matrix-with-ranging-values/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/010-matrix-with-ranging-values/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726242290953,"student_message":"en que estoy fallando","context":"---\n      # File name: README.es.md. Content: \n      `# `010` Matrix with Ranging Values\n\n## üìù Instrucciones:\n\n1. Crea una matriz de dimensiones 3 x 3, cuyos valores deben ser los n√∫meros del 0 al 8, luego imprime la matriz en la consola.\n\n## üí° Pista:\n\n+ Debes usar el m√©todo `reshape()` para convertir un vector en una matriz.\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `# `010` Matrix with Ranging Values\n\n## üìù Instructions:\n\n1. Create a matrix of dimensions 3 x 3, whose values should be the integers from 0 to 8, and print it in the console.\n\n## üí° Hint:\n\n+ You should use the `reshape()` method of vectors in order to convert a vector into a matrix.\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `import numpy as np\n\n\narr = np.arange(0, 9)\n\nprint(np.reshape(arr, (3, 3)))\n`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re \n\n@pytest.mark.it(\"You have to use the reshape() method\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert content.find(\"reshape(\") > 0\n\n@pytest.mark.it('The output should be a matrix whose values should be from 0 to 8')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert  '[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\[\\[0 1 2\\]\\\\n \\[3 4 5\\]\\\\n \\[6 7 8\\]\\]\")\n        assert bool(regex.search(content)) == False\n`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `010` Matrix with Ranging Values\n\n## üìù Instrucciones:\n\n1. Crea una matriz de dimensiones 3 x 3, cuyos valores deben ser los n√∫meros del 0 al 8, luego imprime la matriz en la consola.\n\n## üí° Pista:\n\n+ Debes usar el m√©todo `reshape()` para convertir un vector en una matriz.\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 3 items\n\n.learn/exercises/010-matrix-with-ranging-values/test.py .F.              [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x79a9d674fcd0>\n\n    @pytest.mark.it('The output should be a matrix whose values should be from 0 to 8')\n    def test_print(capsys):\n        import app\n        captured = capsys.readouterr()\n>       assert  '[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n' in captured.out\nE       assert '[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n' in \"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n80\\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', ...42 43 44 45 46 47 48 49]\\n[9 8 7 6 5 4 3 2 1 0]\\n<built-in method reshape of numpy.ndarray object at 0x79a9d07a9b90>\\n\"\nE        +  where \"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n80\\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', ...42 43 44 45 46 47 48 49]\\n[9 8 7 6 5 4 3 2 1 0]\\n<built-in method reshape of numpy.ndarray object at 0x79a9d07a9b90>\\n\" = CaptureResult(out=\"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n80\\nadd(x1, x2, /, out=None, *, where=True, casting='same_...45 46 47 48 49]\\n[9 8 7 6 5 4 3 2 1 0]\\n<built-in method reshape of numpy.ndarray object at 0x79a9d07a9b90>\\n\", err='').out\n\n.learn/exercises/010-matrix-with-ranging-values/test.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/010-matrix-with-ranging-values/test.py::test_print - assert '[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n' in \"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. ...\n========================= 1 failed, 2 passed in 0.16s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a matrix whose values should be from 0 to 8 \n\n","ending_at":1726242296987,"ai_response":"Vamos a analizar el problema y tu c√≥digo para entender en qu√© podr√≠as estar fallando.\n\nEl objetivo es crear una matriz de dimensiones 3x3 con valores del 0 al 8 y luego imprimirla en la consola. El c√≥digo que tienes es el siguiente:\n\n```python\nimport numpy as np\n\narr = np.arange(0, 9)\n\nprint(np.reshape(arr, (3, 3)))\n```\n\nEl error que se muestra en los tests es que la salida esperada no coincide con la salida real. Vamos a revisar algunos puntos clave:\n\n1. **Importaci√≥n de la biblioteca numpy**: Aseg√∫rate de que `numpy` est√° correctamente importado.\n2. **Creaci√≥n del array**: `np.arange(0, 9)` deber√≠a crear un array con los n√∫meros del 0 al 8.\n3. **Uso de reshape**: `np.reshape(arr, (3, 3))` deber√≠a convertir el array en una matriz de 3x3.\n4. **Impresi√≥n de la matriz**: Aseg√∫rate de que la matriz se imprime correctamente.\n\nVamos a hacer algunas preguntas para guiarte:\n\n1. ¬øEst√°s seguro de que el archivo `app.py` contiene exactamente el c√≥digo que has mostrado?\n2. ¬øPodr√≠as verificar si hay alg√∫n otro c√≥digo en `app.py` que podr√≠a estar interfiriendo con la salida esperada?\n3. ¬øPodr√≠as ejecutar el c√≥digo en tu entorno local y verificar si la salida es la matriz esperada?\n\nPara asegurarnos de que todo est√° correcto, intenta ejecutar el siguiente c√≥digo en tu entorno local y verifica la salida:\n\n```python\nimport numpy as np\n\narr = np.arange(0, 9)\nmatriz = np.reshape(arr, (3, 3))\nprint(matriz)\n```\n\nLa salida deber√≠a ser:\n\n```\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n```\n\nSi la salida es correcta, entonces el problema podr√≠a estar en c√≥mo se est√° ejecutando el c√≥digo en el entorno de pruebas. Si la salida no es correcta, revisa si hay alg√∫n error en la instalaci√≥n de `numpy` o en la forma en que est√°s ejecutando el c√≥digo."}],"compilations":[],"tests":[{"starting_at":1726242155159,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKYXJyPW5wLmFyYW5nZSg5KQphcnIucmVzaGFwZSgzLDMpCnByaW50KGFyci5yZXNoYXBlKQ==","ended_at":1726242156121,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YWU3NTA1ODUwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48YnVpbHQtaW4gbWV0aG9kIHJlc2hhcGUgb2YgbnVtcHkubmRhcnJheSBvYmplY3QgYXQgMHg3YWU3NGE3ZjJiNTA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDdhZTc0YTdmMmI1MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDdhZTc0YTdmMmI1MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4zN3MbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YWU3NTA1ODUwMDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48YnVpbHQtaW4gbWV0aG9kIHJlc2hhcGUgb2YgbnVtcHkubmRhcnJheSBvYmplY3QgYXQgMHg3YWU3NGE3ZjJiNTA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDdhZTc0YTdmMmI1MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDdhZTc0YTdmMmI1MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4zN3MbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4G1szOW0gCgo=","exit_code":1},{"starting_at":1726242288744,"ended_at":1726242289245,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OWE5ZDY3NGZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48YnVpbHQtaW4gbWV0aG9kIHJlc2hhcGUgb2YgbnVtcHkubmRhcnJheSBvYmplY3QgYXQgMHg3OWE5ZDA3YTliOTA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDc5YTlkMDdhOWI5MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDc5YTlkMDdhOWI5MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OWE5ZDY3NGZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48YnVpbHQtaW4gbWV0aG9kIHJlc2hhcGUgb2YgbnVtcHkubmRhcnJheSBvYmplY3QgYXQgMHg3OWE5ZDA3YTliOTA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDc5YTlkMDdhOWI5MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbjxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDc5YTlkMDdhOWI5MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4G1szOW0gCgo=","exit_code":1},{"starting_at":1726242460997,"ended_at":1726242461451,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZjQ4Yzg2NmZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuPGZ1bmN0aW9uIHJlc2hhcGUgYXQgMHg3ZjQ4YzMwMzYxNzA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdmNDhjMzAzNjE3MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdmNDhjMzAzNjE3MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZjQ4Yzg2NmZjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuPGZ1bmN0aW9uIHJlc2hhcGUgYXQgMHg3ZjQ4YzMwMzYxNzA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdmNDhjMzAzNjE3MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdmNDhjMzAzNjE3MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4G1szOW0gCgo=","exit_code":1},{"starting_at":1726242486780,"ended_at":1726242487498,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDg0MjhmMTNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuPGZ1bmN0aW9uIHJlc2hhcGUgYXQgMHg3ZDg0MjM4ZGExNzA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdkODQyMzhkYTE3MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdkODQyMzhkYTE3MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xOXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDg0MjhmMTNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6CiAgICAgICAgaW1wb3J0IGFwcAogICAgICAgIGNhcHR1cmVkID0gY2Fwc3lzLnJlYWRvdXRlcnIoKQo+ICAgICAgIGFzc2VydCAgJ1tbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4nIGluIGNhcHR1cmVkLm91dAobWzFtG1szMW1FICAgICAgIGFzc2VydCAnW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuPGZ1bmN0aW9uIHJlc2hhcGUgYXQgMHg3ZDg0MjM4ZGExNzA+XG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMiAzM1xuIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdkODQyMzhkYTE3MD5cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uIDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XVxuWzkgOCA3IDYgNSA0IDMgMiAxIDBdXG48ZnVuY3Rpb24gcmVzaGFwZSBhdCAweDdkODQyMzhkYTE3MD5cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTQ6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gYXNzZXJ0ICdbWzAgMSAyXVxuIFszIDQgNV1cbiBbNiA3IDhdXVxuJyBpbiAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xOXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4G1szOW0gCgo=","exit_code":1},{"starting_at":1726242495118,"ended_at":1726242495627,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTBlZmIzYjNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTI6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjE4OiBpbiA8bW9kdWxlPgogICAgbnAucmVzaGFwZShhcnIsKDMsMykpChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MjAwOiBpbiByZXNoYXBlCiAgICA/Pz8KG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvZnJvbW51bWVyaWMucHkbWzBtOjI5ODogaW4gcmVzaGFwZQogICAgcmV0dXJuIF93cmFwZnVuYyhhLCAncmVzaGFwZScsIG5ld3NoYXBlLCBvcmRlcj1vcmRlcikKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCm9iaiA9IGFycmF5KFswLl0pLCBtZXRob2QgPSAncmVzaGFwZScsIGFyZ3MgPSAoKDMsIDMpLCksIGt3ZHMgPSB7J29yZGVyJzogJ0MnfQpib3VuZCA9IDxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDdhMGVmNTQwZGI5MD4KCiAgICBkZWYgX3dyYXBmdW5jKG9iaiwgbWV0aG9kLCAqYXJncywgKiprd2RzKToKICAgICAgICBib3VuZCA9IGdldGF0dHIob2JqLCBtZXRob2QsIE5vbmUpCiAgICAgICAgaWYgYm91bmQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIF93cmFwaXQob2JqLCBtZXRob2QsICphcmdzLCAqKmt3ZHMpCiAgICAKICAgICAgICB0cnk6Cj4gICAgICAgICAgIHJldHVybiBib3VuZCgqYXJncywgKiprd2RzKQobWzFtG1szMW1FICAgICAgICAgICBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL2Zyb21udW1lcmljLnB5G1swbTo1NzogVmFsdWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQpbOSA4IDcgNiA1IDQgMyAyIDEgMF0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMC1tYXRyaXgtd2l0aC1yYW5naW5nLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKQobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTlzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTBlZmIzYjNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTI6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjE4OiBpbiA8bW9kdWxlPgogICAgbnAucmVzaGFwZShhcnIsKDMsMykpChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MjAwOiBpbiByZXNoYXBlCiAgICA/Pz8KG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvZnJvbW51bWVyaWMucHkbWzBtOjI5ODogaW4gcmVzaGFwZQogICAgcmV0dXJuIF93cmFwZnVuYyhhLCAncmVzaGFwZScsIG5ld3NoYXBlLCBvcmRlcj1vcmRlcikKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCm9iaiA9IGFycmF5KFswLl0pLCBtZXRob2QgPSAncmVzaGFwZScsIGFyZ3MgPSAoKDMsIDMpLCksIGt3ZHMgPSB7J29yZGVyJzogJ0MnfQpib3VuZCA9IDxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDdhMGVmNTQwZGI5MD4KCiAgICBkZWYgX3dyYXBmdW5jKG9iaiwgbWV0aG9kLCAqYXJncywgKiprd2RzKToKICAgICAgICBib3VuZCA9IGdldGF0dHIob2JqLCBtZXRob2QsIE5vbmUpCiAgICAgICAgaWYgYm91bmQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIF93cmFwaXQob2JqLCBtZXRob2QsICphcmdzLCAqKmt3ZHMpCiAgICAKICAgICAgICB0cnk6Cj4gICAgICAgICAgIHJldHVybiBib3VuZCgqYXJncywgKiprd2RzKQobWzFtG1szMW1FICAgICAgICAgICBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL2Zyb21udW1lcmljLnB5G1swbTo1NzogVmFsdWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQpbOSA4IDcgNiA1IDQgMyAyIDEgMF0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMC1tYXRyaXgtd2l0aC1yYW5naW5nLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKQobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTlzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSBtYXRyaXggd2hvc2UgdmFsdWVzIHNob3VsZCBiZSBmcm9tIDAgdG8gOBtbMzltIAoK","exit_code":1},{"starting_at":1726242553317,"ended_at":1726242553815,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWQ2MWM0MWJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTI6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjE4OiBpbiA8bW9kdWxlPgogICAgYT0gbnAucmVzaGFwZShhcnIsKDMsMykpChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MjAwOiBpbiByZXNoYXBlCiAgICA/Pz8KG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvZnJvbW51bWVyaWMucHkbWzBtOjI5ODogaW4gcmVzaGFwZQogICAgcmV0dXJuIF93cmFwZnVuYyhhLCAncmVzaGFwZScsIG5ld3NoYXBlLCBvcmRlcj1vcmRlcikKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCm9iaiA9IGFycmF5KFswLl0pLCBtZXRob2QgPSAncmVzaGFwZScsIGFyZ3MgPSAoKDMsIDMpLCksIGt3ZHMgPSB7J29yZGVyJzogJ0MnfQpib3VuZCA9IDxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDcxZDYxNjQ3NWI5MD4KCiAgICBkZWYgX3dyYXBmdW5jKG9iaiwgbWV0aG9kLCAqYXJncywgKiprd2RzKToKICAgICAgICBib3VuZCA9IGdldGF0dHIob2JqLCBtZXRob2QsIE5vbmUpCiAgICAgICAgaWYgYm91bmQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIF93cmFwaXQob2JqLCBtZXRob2QsICphcmdzLCAqKmt3ZHMpCiAgICAKICAgICAgICB0cnk6Cj4gICAgICAgICAgIHJldHVybiBib3VuZCgqYXJncywgKiprd2RzKQobWzFtG1szMW1FICAgICAgICAgICBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL2Zyb21udW1lcmljLnB5G1swbTo1NzogVmFsdWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQpbOSA4IDcgNiA1IDQgMyAyIDEgMF0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMC1tYXRyaXgtd2l0aC1yYW5naW5nLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKQobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTdzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWQ2MWM0MWJjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTI6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjE4OiBpbiA8bW9kdWxlPgogICAgYT0gbnAucmVzaGFwZShhcnIsKDMsMykpChtbMW0bWzMxbTxfX2FycmF5X2Z1bmN0aW9uX18gaW50ZXJuYWxzPhtbMG06MjAwOiBpbiByZXNoYXBlCiAgICA/Pz8KG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvZnJvbW51bWVyaWMucHkbWzBtOjI5ODogaW4gcmVzaGFwZQogICAgcmV0dXJuIF93cmFwZnVuYyhhLCAncmVzaGFwZScsIG5ld3NoYXBlLCBvcmRlcj1vcmRlcikKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCm9iaiA9IGFycmF5KFswLl0pLCBtZXRob2QgPSAncmVzaGFwZScsIGFyZ3MgPSAoKDMsIDMpLCksIGt3ZHMgPSB7J29yZGVyJzogJ0MnfQpib3VuZCA9IDxidWlsdC1pbiBtZXRob2QgcmVzaGFwZSBvZiBudW1weS5uZGFycmF5IG9iamVjdCBhdCAweDcxZDYxNjQ3NWI5MD4KCiAgICBkZWYgX3dyYXBmdW5jKG9iaiwgbWV0aG9kLCAqYXJncywgKiprd2RzKToKICAgICAgICBib3VuZCA9IGdldGF0dHIob2JqLCBtZXRob2QsIE5vbmUpCiAgICAgICAgaWYgYm91bmQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIF93cmFwaXQob2JqLCBtZXRob2QsICphcmdzLCAqKmt3ZHMpCiAgICAKICAgICAgICB0cnk6Cj4gICAgICAgICAgIHJldHVybiBib3VuZCgqYXJncywgKiprd2RzKQobWzFtG1szMW1FICAgICAgICAgICBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL2Zyb21udW1lcmljLnB5G1swbTo1NzogVmFsdWVFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQpbOSA4IDcgNiA1IDQgMyAyIDEgMF0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMC1tYXRyaXgtd2l0aC1yYW5naW5nLXZhbHVlcy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBWYWx1ZUVycm9yOiBjYW5ub3QgcmVzaGFwZSBhcnJheSBvZiBzaXplIDEgaW50byBzaGFwZSAoMywzKQobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDAuMTdzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSBtYXRyaXggd2hvc2UgdmFsdWVzIHNob3VsZCBiZSBmcm9tIDAgdG8gOBtbMzltIAoK","exit_code":1},{"starting_at":1726242594262,"ended_at":1726242594754,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTRiNzY2NzNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTI6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjE4OiBpbiA8bW9kdWxlPgogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKG1sxbRtbMzFtPF9fYXJyYXlfZnVuY3Rpb25fXyBpbnRlcm5hbHM+G1swbToyMDA6IGluIHJlc2hhcGUKICAgID8/PwobWzFtG1szMW0vaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvY29yZS9mcm9tbnVtZXJpYy5weRtbMG06Mjk4OiBpbiByZXNoYXBlCiAgICByZXR1cm4gX3dyYXBmdW5jKGEsICdyZXNoYXBlJywgbmV3c2hhcGUsIG9yZGVyPW9yZGVyKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKb2JqID0gYXJyYXkoWzAuXSksIG1ldGhvZCA9ICdyZXNoYXBlJywgYXJncyA9ICgoMywgMyksKSwga3dkcyA9IHsnb3JkZXInOiAnQyd9CmJvdW5kID0gPGJ1aWx0LWluIG1ldGhvZCByZXNoYXBlIG9mIG51bXB5Lm5kYXJyYXkgb2JqZWN0IGF0IDB4N2E0YjcwNmNkYjkwPgoKICAgIGRlZiBfd3JhcGZ1bmMob2JqLCBtZXRob2QsICphcmdzLCAqKmt3ZHMpOgogICAgICAgIGJvdW5kID0gZ2V0YXR0cihvYmosIG1ldGhvZCwgTm9uZSkKICAgICAgICBpZiBib3VuZCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gX3dyYXBpdChvYmosIG1ldGhvZCwgKmFyZ3MsICoqa3dkcykKICAgIAogICAgICAgIHRyeToKPiAgICAgICAgICAgcmV0dXJuIGJvdW5kKCphcmdzLCAqKmt3ZHMpChtbMW0bWzMxbUUgICAgICAgICAgIFZhbHVlRXJyb3I6IGNhbm5vdCByZXNoYXBlIGFycmF5IG9mIHNpemUgMSBpbnRvIHNoYXBlICgzLDMpG1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvZnJvbW51bWVyaWMucHkbWzBtOjU3OiBWYWx1ZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFZhbHVlRXJyb3I6IGNhbm5vdCByZXNoYXBlIGFycmF5IG9mIHNpemUgMSBpbnRvIHNoYXBlICgzLDMpChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xOHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzFtRhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YTRiNzY2NzNjZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4JykKICAgIGRlZiB0ZXN0X3ByaW50KGNhcHN5cyk6Cj4gICAgICAgaW1wb3J0IGFwcAoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTAtbWF0cml4LXdpdGgtcmFuZ2luZy12YWx1ZXMvdGVzdC5weRtbMG06MTI6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW1hcHAucHkbWzBtOjE4OiBpbiA8bW9kdWxlPgogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKG1sxbRtbMzFtPF9fYXJyYXlfZnVuY3Rpb25fXyBpbnRlcm5hbHM+G1swbToyMDA6IGluIHJlc2hhcGUKICAgID8/PwobWzFtG1szMW0vaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvY29yZS9mcm9tbnVtZXJpYy5weRtbMG06Mjk4OiBpbiByZXNoYXBlCiAgICByZXR1cm4gX3dyYXBmdW5jKGEsICdyZXNoYXBlJywgbmV3c2hhcGUsIG9yZGVyPW9yZGVyKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKb2JqID0gYXJyYXkoWzAuXSksIG1ldGhvZCA9ICdyZXNoYXBlJywgYXJncyA9ICgoMywgMyksKSwga3dkcyA9IHsnb3JkZXInOiAnQyd9CmJvdW5kID0gPGJ1aWx0LWluIG1ldGhvZCByZXNoYXBlIG9mIG51bXB5Lm5kYXJyYXkgb2JqZWN0IGF0IDB4N2E0YjcwNmNkYjkwPgoKICAgIGRlZiBfd3JhcGZ1bmMob2JqLCBtZXRob2QsICphcmdzLCAqKmt3ZHMpOgogICAgICAgIGJvdW5kID0gZ2V0YXR0cihvYmosIG1ldGhvZCwgTm9uZSkKICAgICAgICBpZiBib3VuZCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gX3dyYXBpdChvYmosIG1ldGhvZCwgKmFyZ3MsICoqa3dkcykKICAgIAogICAgICAgIHRyeToKPiAgICAgICAgICAgcmV0dXJuIGJvdW5kKCphcmdzLCAqKmt3ZHMpChtbMW0bWzMxbUUgICAgICAgICAgIFZhbHVlRXJyb3I6IGNhbm5vdCByZXNoYXBlIGFycmF5IG9mIHNpemUgMSBpbnRvIHNoYXBlICgzLDMpG1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvZnJvbW51bWVyaWMucHkbWzBtOjU3OiBWYWx1ZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIFZhbHVlRXJyb3I6IGNhbm5vdCByZXNoYXBlIGFycmF5IG9mIHNpemUgMSBpbnRvIHNoYXBlICgzLDMpChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xOHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSBhIG1hdHJpeCB3aG9zZSB2YWx1ZXMgc2hvdWxkIGJlIGZyb20gMCB0byA4G1szOW0gCgo=","exit_code":1},{"starting_at":1726242605664,"ended_at":1726242606106,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEwLW1hdHJpeC13aXRoLXJhbmdpbmctdmFsdWVzL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMTNzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726241054778,"completed_at":1726242606106},{"slug":"011-find-indices-of-non-zero-elements","position":11,"files":[{"path":".learn/exercises/011-find-indices-of-non-zero-elements/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/011-find-indices-of-non-zero-elements/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/011-find-indices-of-non-zero-elements/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/011-find-indices-of-non-zero-elements/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726243430507,"student_message":"resuelvelo","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os, re\n\n@pytest.mark.it(\"You have to use the nonzero() method\")\ndef test_output():\n    f = open('app.py')\n    content = f.read()\n    assert \"nonzero\" in content\n\n@pytest.mark.it(\"You have to use the array() method\")\ndef test_array_exists():\n    f = open('app.py')\n    content = f.read()\n    assert \"array\" in content\n\n@pytest.mark.it('The output should be a tuple of arrays with the indices of non zero values')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert   '(array([0, 1, 4]),)\\n' in captured.out\n\n@pytest.mark.it(\"You should not be hard-coding the expected value\")\ndef test_hard_code():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\(array\\(\\[0, 1, 4\\]\\),\\)\")\n        assert bool(regex.search(content)) == False`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `011` Find Indexes of Non Zero Elements\n\n## üìù Instrucciones:\n\n1. Encuentra los √≠ndices de los elementos diferentes de cero en el siguiente array: `[1,2,0,0,4,0]`.\n\n2. Crea el array usando el m√©todo `np.array()`.\n\n## üí° Pista:\n\n+ La funci√≥n `nonzero()` retorna los √≠ndices de los elementos cuyos valores no sean cero. Puedes leer m√°s de esta funci√≥n en el siguiente link: https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/011-find-indices-of-non-zero-elements/test.py ..F.      [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x763d562d3df0>\n\n    @pytest.mark.it('The output should be a tuple of arrays with the indices of non zero values')\n    def test_print(capsys):\n        import app\n        captured = capsys.readouterr()\n>       assert   '(array([0, 1, 4]),)\\n' in captured.out\nE       assert '(array([0, 1, 4]),)\\n' in \"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n80\\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', ...30 31 32 33\\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\\n[9 8 7 6 5 4 3 2 1 0]\\n[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n\"\nE        +  where \"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n80\\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', ...30 31 32 33\\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\\n[9 8 7 6 5 4 3 2 1 0]\\n[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n\" = CaptureResult(out=\"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\n80\\nadd(x1, x2, /, out=None, *, where=True, casting='same_...33\\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\\n[9 8 7 6 5 4 3 2 1 0]\\n[[0 1 2]\\n [3 4 5]\\n [6 7 8]]\\n\", err='').out\n\n.learn/exercises/011-find-indices-of-non-zero-elements/test.py:20: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/011-find-indices-of-non-zero-elements/test.py::test_print - assert '(array([0, 1, 4]),)\\n' in \"1.24.2\\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\\...\n========================= 1 failed, 3 passed in 0.18s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be a tuple of arrays with the indices of non zero values \n\n","ending_at":1726243434530,"ai_response":"Entiendo que quieres resolver el ejercicio, pero en lugar de darte la respuesta directamente, te guiar√© para que puedas descubrirla por ti mismo. Esto te ayudar√° a mejorar tus habilidades de razonamiento y an√°lisis.\n\nVamos a revisar los pasos necesarios para resolver el ejercicio:\n\n1. **Crear el array usando `np.array()`**:\n   - ¬øC√≥mo crees que podr√≠as crear un array en NumPy con los valores `[1, 2, 0, 0, 4, 0]`?\n\n2. **Encontrar los √≠ndices de los elementos diferentes de cero usando `nonzero()`**:\n   - ¬øC√≥mo podr√≠as usar la funci√≥n `nonzero()` para encontrar los √≠ndices de los elementos que no son cero en el array que creaste?\n\n3. **Imprimir el resultado**:\n   - ¬øC√≥mo podr√≠as imprimir el resultado de manera que coincida con el formato esperado `(array([0, 1, 4]),)`?\n\nPiensa en estos pasos y trata de escribir el c√≥digo. Si tienes alguna duda espec√≠fica en alguno de los pasos, h√°zmelo saber y te ayudar√© a resolverla."}],"compilations":[{"stderr":"","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":524288,"cpuUsage":6548,"errorType":"run-time","starting_at":1726243341180,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCng9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKbnAubm9uemVybyh4KQo=","ended_at":1726243341403,"exit_code":null},{"stderr":"VHJhY2ViYWNrIChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOgogIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDIxLCBpbiA8bW9kdWxlPgogICAgUHJpbnQobm9uemVybyhhcnIpKQpOYW1lRXJyb3I6IG5hbWUgJ1ByaW50JyBpcyBub3QgZGVmaW5lZC4gRGlkIHlvdSBtZWFuOiAncHJpbnQnPwo=","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":655360,"cpuUsage":7298,"errorType":"run-time","starting_at":1726262649339,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQpQcmludChub256ZXJvKGFycikpCg==","ended_at":1726262649556,"exit_code":null}],"tests":[{"starting_at":1726243338239,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCng9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKbnAubm9uemVybyh4KQo=","ended_at":1726243338788,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmM2ZmRhYTkwMzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICAnKGFycmF5KFswLCAxLCA0XSksKVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbltbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMzAgMzEgMzIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTEtZmluZC1pbmRpY2VzLW9mLW5vbi16ZXJvLWVsZW1lbnRzL3Rlc3QucHkbWzBtOjIwOiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVwuLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE4cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmM2ZmRhYTkwMzA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICAnKGFycmF5KFswLCAxLCA0XSksKVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbltbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMzAgMzEgMzIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTEtZmluZC1pbmRpY2VzLW9mLW5vbi16ZXJvLWVsZW1lbnRzL3Rlc3QucHkbWzBtOjIwOiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVwuLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE4cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdHVwbGUgb2YgYXJyYXlzIHdpdGggdGhlIGluZGljZXMgb2Ygbm9uIHplcm8gdmFsdWVzG1szOW0gCgo=","exit_code":1},{"starting_at":1726243428193,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCng9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKbnAubm9uemVybyh4KQoK","ended_at":1726243428714,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NjNkNTYyZDNkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICAnKGFycmF5KFswLCAxLCA0XSksKVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbltbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMzAgMzEgMzIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTEtZmluZC1pbmRpY2VzLW9mLW5vbi16ZXJvLWVsZW1lbnRzL3Rlc3QucHkbWzBtOjIwOiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVwuLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE4cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NjNkNTYyZDNkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgogICAgICAgIGltcG9ydCBhcHAKICAgICAgICBjYXB0dXJlZCA9IGNhcHN5cy5yZWFkb3V0ZXJyKCkKPiAgICAgICBhc3NlcnQgICAnKGFycmF5KFswLCAxLCA0XSksKVxuJyBpbiBjYXB0dXJlZC5vdXQKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVxuODBcbmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIC4uLjMwIDMxIDMyIDMzXG4gMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldXG5bOSA4IDcgNiA1IDQgMyAyIDEgMF1cbltbMCAxIDJdXG4gWzMgNCA1XVxuIFs2IDcgOF1dXG4iG1swbQobWzFtG1szMW1FICAgICAgICArICB3aGVyZSAiMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgLi4uMzAgMzEgMzIgMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIgPSBDYXB0dXJlUmVzdWx0KG91dD0iMS4yNC4yXG5bMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dXG44MFxuYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfLi4uMzNcbiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV1cbls5IDggNyA2IDUgNCAzIDIgMSAwXVxuW1swIDEgMl1cbiBbMyA0IDVdXG4gWzYgNyA4XV1cbiIsIGVycj0nJykub3V0G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTEtZmluZC1pbmRpY2VzLW9mLW5vbi16ZXJvLWVsZW1lbnRzL3Rlc3QucHkbWzBtOjIwOiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBhc3NlcnQgJyhhcnJheShbMCwgMSwgNF0pLClcbicgaW4gIjEuMjQuMlxuWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXVwuLi4KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE4cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdHVwbGUgb2YgYXJyYXlzIHdpdGggdGhlIGluZGljZXMgb2Ygbm9uIHplcm8gdmFsdWVzG1szOW0gCgo=","exit_code":1},{"starting_at":1726243537409,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCng9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKbnAubm9uemVybyh4KQpQcmludChhcnJheShbMCwxLDRdKSwpCg==","ended_at":1726243537911,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmRjNmJhNzdkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIHg9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKICAgIG5wLm5vbnplcm8oeCkKPiAgIFByaW50KGFycmF5KFswLDEsNF0pLCkKG1sxbRtbMzFtRSAgIE5hbWVFcnJvcjogbmFtZSAnUHJpbnQnIGlzIG5vdCBkZWZpbmVkG1swbQoKG1sxbRtbMzFtYXBwLnB5G1swbToyMjogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMS1maW5kLWluZGljZXMtb2Ytbm9uLXplcm8tZWxlbWVudHMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmRjNmJhNzdkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIHg9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKICAgIG5wLm5vbnplcm8oeCkKPiAgIFByaW50KGFycmF5KFswLDEsNF0pLCkKG1sxbRtbMzFtRSAgIE5hbWVFcnJvcjogbmFtZSAnUHJpbnQnIGlzIG5vdCBkZWZpbmVkG1swbQoKG1sxbRtbMzFtYXBwLnB5G1swbToyMjogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMS1maW5kLWluZGljZXMtb2Ytbm9uLXplcm8tZWxlbWVudHMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdHVwbGUgb2YgYXJyYXlzIHdpdGggdGhlIGluZGljZXMgb2Ygbm9uIHplcm8gdmFsdWVzG1szOW0gCgo=","exit_code":1},{"starting_at":1726262540758,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCng9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKbnAubm9uemVybyh4KQpQcmludChhcnJheShbMiwxLDRdKSwpCg==","ended_at":1726262541599,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ODc2ZDU5MDNkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIHg9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKICAgIG5wLm5vbnplcm8oeCkKPiAgIFByaW50KGFycmF5KFsyLDEsNF0pLCkKG1sxbRtbMzFtRSAgIE5hbWVFcnJvcjogbmFtZSAnUHJpbnQnIGlzIG5vdCBkZWZpbmVkG1swbQoKG1sxbRtbMzFtYXBwLnB5G1swbToyMjogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMS1maW5kLWluZGljZXMtb2Ytbm9uLXplcm8tZWxlbWVudHMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjMycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ODc2ZDU5MDNkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIHg9bnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKICAgIG5wLm5vbnplcm8oeCkKPiAgIFByaW50KGFycmF5KFsyLDEsNF0pLCkKG1sxbRtbMzFtRSAgIE5hbWVFcnJvcjogbmFtZSAnUHJpbnQnIGlzIG5vdCBkZWZpbmVkG1swbQoKG1sxbRtbMzFtYXBwLnB5G1swbToyMjogTmFtZUVycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMS1maW5kLWluZGljZXMtb2Ytbm9uLXplcm8tZWxlbWVudHMvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjMycxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIGEgdHVwbGUgb2YgYXJyYXlzIHdpdGggdGhlIGluZGljZXMgb2Ygbm9uIHplcm8gdmFsdWVzG1szOW0gCgo=","exit_code":1},{"starting_at":1726262653421,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQpQcmludChub256ZXJvKGFycikpCg==","ended_at":1726262653829,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZjkzMjk0YWZkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIGFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQo+ICAgUHJpbnQobm9uemVybyhhcnIpKQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjIxOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ1ByaW50JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZjkzMjk0YWZkZjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIGFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQo+ICAgUHJpbnQobm9uemVybyhhcnIpKQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjIxOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ1ByaW50JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSB0dXBsZSBvZiBhcnJheXMgd2l0aCB0aGUgaW5kaWNlcyBvZiBub24gemVybyB2YWx1ZXMbWzM5bSAKCg==","exit_code":1},{"starting_at":1726262674911,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQpQcmludChucC5ub256ZXJvKGFycikpCg==","ended_at":1726262675341,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3M2QwYWQxYmZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIGFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQo+ICAgUHJpbnQobnAubm9uemVybyhhcnIpKQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjIxOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ1ByaW50JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMxbSAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3M2QwYWQxYmZkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSBhIHR1cGxlIG9mIGFycmF5cyB3aXRoIHRoZSBpbmRpY2VzIG9mIG5vbiB6ZXJvIHZhbHVlcycpCiAgICBkZWYgdGVzdF9wcmludChjYXBzeXMpOgo+ICAgICAgIGltcG9ydCBhcHAKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5G1swbToxODogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIGFycj1ucC5hcnJheShbMSwyLDAsMCw0LDBdKQo+ICAgUHJpbnQobnAubm9uemVybyhhcnIpKQobWzFtG1szMW1FICAgTmFtZUVycm9yOiBuYW1lICdQcmludCcgaXMgbm90IGRlZmluZWQbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjIxOiBOYW1lRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBOYW1lRXJyb3I6IG5hbWUgJ1ByaW50JyBpcyBub3QgZGVmaW5lZAobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgYSB0dXBsZSBvZiBhcnJheXMgd2l0aCB0aGUgaW5kaWNlcyBvZiBub24gemVybyB2YWx1ZXMbWzM5bSAKCg==","exit_code":1},{"starting_at":1726262712733,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkK","ended_at":1726262713118,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDExLWZpbmQtaW5kaWNlcy1vZi1ub24temVyby1lbGVtZW50cy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTQgcGFzc2VkG1swbRtbMzJtIGluIDAuMTFzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726242617014,"completed_at":1726262713118},{"slug":"012-identity-matrix","position":12,"files":[{"path":".learn/exercises/012-identity-matrix/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/012-identity-matrix/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/012-identity-matrix/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/012-identity-matrix/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":524288,"cpuUsage":7622,"errorType":"run-time","starting_at":1726262952764,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeik=","ended_at":1726262952943,"exit_code":null}],"tests":[{"starting_at":1726262957206,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeik=","ended_at":1726262957641,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEyLWlkZW50aXR5LW1hdHJpeC90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMTNzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726262812776,"completed_at":1726262957641},{"slug":"013-random-values-array","position":13,"files":[{"path":".learn/exercises/013-random-values-array/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/013-random-values-array/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/013-random-values-array/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/013-random-values-array/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726263211517,"student_message":"dame una pista de que es lo que tuve mal","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\nimport numpy\n\n@pytest.mark.it(\"You have to use the random() method\")\ndef test_random():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*random\\s*\\(\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('You should create a variable named arr')\ndef test_arr_exists():\n    try:\n        from app import arr\n    except AttributeError:\n        raise AttributeError(\"The variable 'arr' should exist on app.py\")\n\n@pytest.mark.it('The array should have three random values')\ndef test_arr_value(capsys):\n    from app import arr\n    size = numpy.size(arr)\n    assert size == 3`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `013` Random Values Array\n\n## üìù Instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con tres valores aleatorios.\n\n## üí° Pista:\n\n+ La funci√≥n `np.random.random()` crea una matriz con valores aleatorios. Puedes leer m√°s sobre esta funci√≥n en este link: https://numpy.org/doc/stable/reference/random/generated/numpy.random.random.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 3 items\n\n.learn/exercises/013-random-values-array/test.py ..F                     [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_arr_value ________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7bc97ef78d90>\n\n    @pytest.mark.it('The array should have three random values')\n    def test_arr_value(capsys):\n        from app import arr\n        size = numpy.size(arr)\n>       assert size == 3\nE       assert 1 == 3\n\n.learn/exercises/013-random-values-array/test.py:24: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/013-random-values-array/test.py::test_arr_value - assert 1 == 3\n========================= 1 failed, 2 passed in 0.14s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The array should have three random values \n\n","ending_at":1726263213725,"ai_response":"Claro, vamos a analizar el problema juntos. La instrucci√≥n te pide que crees una variable llamada `arr` que contenga un array con tres valores aleatorios. \n\nLa pista menciona que puedes usar la funci√≥n `np.random.random()` para crear una matriz con valores aleatorios. \n\nPrimero, ¬øpodr√≠as compartir el c√≥digo que has escrito hasta ahora? Esto nos ayudar√° a identificar qu√© podr√≠a estar faltando o qu√© podr√≠as ajustar."},{"starting_at":1726263248799,"student_message":"variable=arr\narr=np.random.random(size=None)\nprint(arr)","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\nimport numpy\n\n@pytest.mark.it(\"You have to use the random() method\")\ndef test_random():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*random\\s*\\(\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('You should create a variable named arr')\ndef test_arr_exists():\n    try:\n        from app import arr\n    except AttributeError:\n        raise AttributeError(\"The variable 'arr' should exist on app.py\")\n\n@pytest.mark.it('The array should have three random values')\ndef test_arr_value(capsys):\n    from app import arr\n    size = numpy.size(arr)\n    assert size == 3`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `013` Random Values Array\n\n## üìù Instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con tres valores aleatorios.\n\n## üí° Pista:\n\n+ La funci√≥n `np.random.random()` crea una matriz con valores aleatorios. Puedes leer m√°s sobre esta funci√≥n en este link: https://numpy.org/doc/stable/reference/random/generated/numpy.random.random.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      ","ending_at":1726263251311,"ai_response":"Veo que est√°s en el camino correcto, pero hay algunos detalles que ajustar. Vamos a desglosarlo:\n\n1. **Asignaci√≥n de la variable**: No necesitas la l√≠nea `variable=arr`. Solo necesitas definir `arr`.\n2. **Uso de `np.random.random`**: La funci√≥n `np.random.random` necesita un argumento que especifique el tama√±o del array. En este caso, queremos un array con tres valores aleatorios.\n\nVamos a pensar en c√≥mo podr√≠as ajustar tu c√≥digo:\n\n- ¬øQu√© crees que deber√≠as pasar como argumento a `np.random.random` para obtener un array de tres valores?\n\nReflexiona sobre esto y ajusta tu c√≥digo en consecuencia."},{"starting_at":1726263345261,"student_message":"dime como resolverlo","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os,re\nimport numpy\n\n@pytest.mark.it(\"You have to use the random() method\")\ndef test_random():\n    path = os.path.dirname(os.path.abspath('app.py'))+'/app.py'\n    with open(path, 'r') as content_file:\n        content = content_file.read()\n        regex = re.compile(r\"\\s*random\\s*\\(\")\n        assert bool(regex.search(content)) == True\n\n@pytest.mark.it('You should create a variable named arr')\ndef test_arr_exists():\n    try:\n        from app import arr\n    except AttributeError:\n        raise AttributeError(\"The variable 'arr' should exist on app.py\")\n\n@pytest.mark.it('The array should have three random values')\ndef test_arr_value(capsys):\n    from app import arr\n    size = numpy.size(arr)\n    assert size == 3`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `013` Random Values Array\n\n## üìù Instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con tres valores aleatorios.\n\n## üí° Pista:\n\n+ La funci√≥n `np.random.random()` crea una matriz con valores aleatorios. Puedes leer m√°s sobre esta funci√≥n en este link: https://numpy.org/doc/stable/reference/random/generated/numpy.random.random.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      ","ending_at":1726263347894,"ai_response":"Entiendo que puede ser frustrante, pero es importante que intentes resolverlo por ti mismo para mejorar tus habilidades. Vamos a desglosar el problema paso a paso.\n\n1. **Definir la variable `arr`**: Necesitamos crear una variable llamada `arr`.\n2. **Usar `np.random.random`**: Esta funci√≥n genera un array de valores aleatorios. Necesitamos especificar el tama√±o del array.\n\nLa funci√≥n `np.random.random` toma un argumento que define el tama√±o del array. Si queremos un array con tres valores aleatorios, ¬øqu√© crees que deber√≠amos pasar como argumento?\n\nPiensa en esto: ¬øC√≥mo especificar√≠as un array de tama√±o 3 usando `np.random.random`?\n\nIntenta escribir el c√≥digo con esta idea en mente."}],"compilations":[{"stderr":"","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":393216,"cpuUsage":3149,"errorType":"run-time","starting_at":1726263107661,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKdmFyaWFibGU9YXJyCmFycj1ucC5yYW5kb20ucmFuZG9tCnByaW50KGFycik=","ended_at":1726263107905,"exit_code":null}],"tests":[{"starting_at":1726263104995,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKdmFyaWFibGU9YXJyCmFycj1ucC5yYW5kb20ucmFuZG9tCnByaW50KGFycik=","ended_at":1726263105401,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3JhbmRvbSBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSByYW5kb20oKSBtZXRob2QiKQogICAgZGVmIHRlc3RfcmFuZG9tKCk6CiAgICAgICAgcGF0aCA9IG9zLnBhdGguZGlybmFtZShvcy5wYXRoLmFic3BhdGgoJ2FwcC5weScpKSsnL2FwcC5weScKICAgICAgICB3aXRoIG9wZW4ocGF0aCwgJ3InKSBhcyBjb250ZW50X2ZpbGU6CiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50X2ZpbGUucmVhZCgpCiAgICAgICAgICAgIHJlZ2V4ID0gcmUuY29tcGlsZShyIlxzKnJhbmRvbVxzKlwoIikKPiAgICAgICAgICAgYXNzZXJ0IGJvb2wocmVnZXguc2VhcmNoKGNvbnRlbnQpKSA9PSBUcnVlChtbMW0bWzMxbUUgICAgICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgRmFsc2UgPT0gVHJ1ZRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgIHdoZXJlIEZhbHNlID0gYm9vbChOb25lKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgICAgd2hlcmUgTm9uZSA9IDxidWlsdC1pbiBtZXRob2Qgc2VhcmNoIG9mIHJlLlBhdHRlcm4gb2JqZWN0IGF0IDB4NzU4MTU4YmQ2Y2UwPignaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbnplcm9zPW5wLnplcm9zKDEwKSBcbm1lbV9zaXplPXplcm9zLml0ZW1zaXplICogemVyb3MuLi4uMiwwLDAsNCwwXSlcbnByaW50KG5wLm5vbnplcm8oYXJyKSlcbm1hdHJpej1ucC5leWUoMywzKVxucHJpbnQobWF0cml6KVxudmFyaWFibGU9YXJyXG5hcnI9bnAucmFuZG9tLnJhbmRvbVxucHJpbnQoYXJyKScpG1swbQobWzFtG1szMW1FICAgICAgICAgICAgKyAgICAgIHdoZXJlIDxidWlsdC1pbiBtZXRob2Qgc2VhcmNoIG9mIHJlLlBhdHRlcm4gb2JqZWN0IGF0IDB4NzU4MTU4YmQ2Y2UwPiA9IHJlLmNvbXBpbGUoJ1xccypyYW5kb21cXHMqXFwoJykuc2VhcmNoG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToxMTogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9hcnJfdmFsdWUgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc1ODE1ODMwNTBmMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBhcnJheSBzaG91bGQgaGF2ZSB0aHJlZSByYW5kb20gdmFsdWVzJykKICAgIGRlZiB0ZXN0X2Fycl92YWx1ZShjYXBzeXMpOgogICAgICAgIGZyb20gYXBwIGltcG9ydCBhcnIKICAgICAgICBzaXplID0gbnVtcHkuc2l6ZShhcnIpCj4gICAgICAgYXNzZXJ0IHNpemUgPT0gMwobWzFtG1szMW1FICAgICAgIGFzc2VydCAxID09IDMbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHkbWzBtOjI0OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weTo6G1sxbXRlc3RfcmFuZG9tG1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgRmFsc2UgPT0gVHJ1ZQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5OjobWzFtdGVzdF9hcnJfdmFsdWUbWzBtIC0gYXNzZXJ0IDEgPT0gMwobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTEgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMxbUYbWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X3JhbmRvbSBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgiWW91IGhhdmUgdG8gdXNlIHRoZSByYW5kb20oKSBtZXRob2QiKQogICAgZGVmIHRlc3RfcmFuZG9tKCk6CiAgICAgICAgcGF0aCA9IG9zLnBhdGguZGlybmFtZShvcy5wYXRoLmFic3BhdGgoJ2FwcC5weScpKSsnL2FwcC5weScKICAgICAgICB3aXRoIG9wZW4ocGF0aCwgJ3InKSBhcyBjb250ZW50X2ZpbGU6CiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50X2ZpbGUucmVhZCgpCiAgICAgICAgICAgIHJlZ2V4ID0gcmUuY29tcGlsZShyIlxzKnJhbmRvbVxzKlwoIikKPiAgICAgICAgICAgYXNzZXJ0IGJvb2wocmVnZXguc2VhcmNoKGNvbnRlbnQpKSA9PSBUcnVlChtbMW0bWzMxbUUgICAgICAgICAgIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgRmFsc2UgPT0gVHJ1ZRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgIHdoZXJlIEZhbHNlID0gYm9vbChOb25lKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICAgICsgICAgd2hlcmUgTm9uZSA9IDxidWlsdC1pbiBtZXRob2Qgc2VhcmNoIG9mIHJlLlBhdHRlcm4gb2JqZWN0IGF0IDB4NzU4MTU4YmQ2Y2UwPignaW1wb3J0IG51bXB5IGFzIG5wXG5wcmludChucC5fX3ZlcnNpb25fXylcbnByaW50KG5wLnplcm9zKDEwKSlcbnplcm9zPW5wLnplcm9zKDEwKSBcbm1lbV9zaXplPXplcm9zLml0ZW1zaXplICogemVyb3MuLi4uMiwwLDAsNCwwXSlcbnByaW50KG5wLm5vbnplcm8oYXJyKSlcbm1hdHJpej1ucC5leWUoMywzKVxucHJpbnQobWF0cml6KVxudmFyaWFibGU9YXJyXG5hcnI9bnAucmFuZG9tLnJhbmRvbVxucHJpbnQoYXJyKScpG1swbQobWzFtG1szMW1FICAgICAgICAgICAgKyAgICAgIHdoZXJlIDxidWlsdC1pbiBtZXRob2Qgc2VhcmNoIG9mIHJlLlBhdHRlcm4gb2JqZWN0IGF0IDB4NzU4MTU4YmQ2Y2UwPiA9IHJlLmNvbXBpbGUoJ1xccypyYW5kb21cXHMqXFwoJykuc2VhcmNoG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToxMTogQXNzZXJ0aW9uRXJyb3IKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9hcnJfdmFsdWUgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc1ODE1ODMwNTBmMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBhcnJheSBzaG91bGQgaGF2ZSB0aHJlZSByYW5kb20gdmFsdWVzJykKICAgIGRlZiB0ZXN0X2Fycl92YWx1ZShjYXBzeXMpOgogICAgICAgIGZyb20gYXBwIGltcG9ydCBhcnIKICAgICAgICBzaXplID0gbnVtcHkuc2l6ZShhcnIpCj4gICAgICAgYXNzZXJ0IHNpemUgPT0gMwobWzFtG1szMW1FICAgICAgIGFzc2VydCAxID09IDMbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHkbWzBtOjI0OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weTo6G1sxbXRlc3RfcmFuZG9tG1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgRmFsc2UgPT0gVHJ1ZQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5OjobWzFtdGVzdF9hcnJfdmFsdWUbWzBtIC0gYXNzZXJ0IDEgPT0gMwobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMiBmYWlsZWQbWzBtLCAbWzMybTEgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtWW91IGhhdmUgdG8gdXNlIHRoZSByYW5kb20oKSBtZXRob2QbWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAxLiAbWzM3bVRoZSBhcnJheSBzaG91bGQgaGF2ZSB0aHJlZSByYW5kb20gdmFsdWVzG1szOW0gCgo=","exit_code":1},{"starting_at":1726263116591,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKdmFyaWFibGU9YXJyCmFycj1ucC5yYW5kb20ucmFuZG9tKCkKcHJpbnQoYXJyKQ==","ended_at":1726263117090,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX3ZhbHVlIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NDdmZDQyMDBkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKICAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCiAgICAgICAgc2l6ZSA9IG51bXB5LnNpemUoYXJyKQo+ICAgICAgIGFzc2VydCBzaXplID09IDMKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgMSA9PSAzG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBhc3NlcnQgMSA9PSAzChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX3ZhbHVlIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3NDdmZDQyMDBkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKICAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCiAgICAgICAgc2l6ZSA9IG51bXB5LnNpemUoYXJyKQo+ICAgICAgIGFzc2VydCBzaXplID09IDMKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgMSA9PSAzG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBhc3NlcnQgMSA9PSAzChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcxtbMzltIAoK","exit_code":1},{"starting_at":1726263183207,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKdmFyaWFibGU9YXJyCmFycj1ucC5yYW5kb20ucmFuZG9tKHNpemU9Tm9uZSkKcHJpbnQoYXJyKQ==","ended_at":1726263183676,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX3ZhbHVlIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZjE2OTI0MTRkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKICAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCiAgICAgICAgc2l6ZSA9IG51bXB5LnNpemUoYXJyKQo+ICAgICAgIGFzc2VydCBzaXplID09IDMKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgMSA9PSAzG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBhc3NlcnQgMSA9PSAzChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX3ZhbHVlIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZjE2OTI0MTRkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKICAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCiAgICAgICAgc2l6ZSA9IG51bXB5LnNpemUoYXJyKQo+ICAgICAgIGFzc2VydCBzaXplID09IDMKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgMSA9PSAzG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBhc3NlcnQgMSA9PSAzChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcxtbMzltIAoK","exit_code":1},{"starting_at":1726263209879,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKdmFyaWFibGU9YXJyCmFycj1ucC5yYW5kb20ucmFuZG9tKHNpemU9Tm9uZSkKcHJpbnQoYXJyKQ==","ended_at":1726263210282,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX3ZhbHVlIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmM5N2VmNzhkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKICAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCiAgICAgICAgc2l6ZSA9IG51bXB5LnNpemUoYXJyKQo+ICAgICAgIGFzc2VydCBzaXplID09IDMKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgMSA9PSAzG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBhc3NlcnQgMSA9PSAzChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX3ZhbHVlIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmM5N2VmNzhkOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKICAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCiAgICAgICAgc2l6ZSA9IG51bXB5LnNpemUoYXJyKQo+ICAgICAgIGFzc2VydCBzaXplID09IDMKG1sxbRtbMzFtRSAgICAgICBhc3NlcnQgMSA9PSAzG1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyNDogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBhc3NlcnQgMSA9PSAzChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGhyZWUgcmFuZG9tIHZhbHVlcxtbMzltIAoK","exit_code":1},{"starting_at":1726263318014,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMSwyLDMpCnByaW50KGFycik=","ended_at":1726263318441,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726263408726,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyKDEsMiwzKQphcnI9bnAucmFuZG9tLnJhbmRvbSgpCnByaW50KGFycik=","ended_at":1726263409131,"stdout":"","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzFtRhtbMG0bWzMxbSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9hcnJfZXhpc3RzIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgnWW91IHNob3VsZCBjcmVhdGUgYSB2YXJpYWJsZSBuYW1lZCBhcnInKQogICAgZGVmIHRlc3RfYXJyX2V4aXN0cygpOgogICAgICAgIHRyeToKPiAgICAgICAgICAgZnJvbSBhcHAgaW1wb3J0IGFycgoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToxNjogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIGFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCiAgICBwcmludChucC5ub256ZXJvKGFycikpCiAgICBtYXRyaXo9bnAuZXllKDMsMykKICAgIHByaW50KG1hdHJpeikKPiAgIGFycigxLDIsMykKG1sxbRtbMzFtRSAgIFR5cGVFcnJvcjogJ251bXB5Lm5kYXJyYXknIG9iamVjdCBpcyBub3QgY2FsbGFibGUbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjI0OiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQooYXJyYXkoWzAsIDEsIDRdKSwpCltbMS4gMC4gMC5dCiBbMC4gMS4gMC5dCiBbMC4gMC4gMS5dXQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X2Fycl92YWx1ZSBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXxtbMG0KCmNhcHN5cyA9IDxfcHl0ZXN0LmNhcHR1cmUuQ2FwdHVyZUZpeHR1cmUgb2JqZWN0IGF0IDB4N2ExZWEzNTY3YzEwPgoKICAgIEBweXRlc3QubWFyay5pdCgnVGhlIGFycmF5IHNob3VsZCBoYXZlIHRocmVlIHJhbmRvbSB2YWx1ZXMnKQogICAgZGVmIHRlc3RfYXJyX3ZhbHVlKGNhcHN5cyk6Cj4gICAgICAgZnJvbSBhcHAgaW1wb3J0IGFycgoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTMtcmFuZG9tLXZhbHVlcy1hcnJheS90ZXN0LnB5G1swbToyMjogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgogICAgaW1wb3J0IG51bXB5IGFzIG5wCiAgICBwcmludChucC5fX3ZlcnNpb25fXykKICAgIHByaW50KG5wLnplcm9zKDEwKSkKICAgIHplcm9zPW5wLnplcm9zKDEwKQogICAgbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCiAgICBwcmludChtZW1fc2l6ZSkKICAgIHByaW50KG5wLmluZm8obnAuYWRkKSkKICAgIGFyciA9IG5wLnplcm9zKDEwKQogICAgYXJyWzRdPTEKICAgIHByaW50KGFycikKICAgIGFycj1ucC5hcmFuZ2UoMTAsNTApCiAgICBwcmludChhcnIpCiAgICB2ZWN0b3I9bnAuYXJhbmdlKDEwKQogICAgdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KICAgIHByaW50KHZlY3Rvcl9pbnZlcnRpZG8pCiAgICBpbXBvcnQgbnVtcHkgYXMgbnAKICAgIGFycj1ucC5hcmFuZ2UoMCw5KQogICAgbWF0cml6PSBucC5yZXNoYXBlKGFyciwoMywzKSkKICAgIHByaW50KG1hdHJpeikKICAgIGFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCiAgICBwcmludChucC5ub256ZXJvKGFycikpCiAgICBtYXRyaXo9bnAuZXllKDMsMykKICAgIHByaW50KG1hdHJpeikKPiAgIGFycigxLDIsMykKG1sxbRtbMzFtRSAgIFR5cGVFcnJvcjogJ251bXB5Lm5kYXJyYXknIG9iamVjdCBpcyBub3QgY2FsbGFibGUbWzBtCgobWzFtG1szMW1hcHAucHkbWzBtOjI0OiBUeXBlRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQooYXJyYXkoWzAsIDEsIDRdKSwpCltbMS4gMC4gMC5dCiBbMC4gMS4gMC5dCiBbMC4gMC4gMS5dXQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weTo6G1sxbXRlc3RfYXJyX2V4aXN0cxtbMG0gLSBUeXBlRXJyb3I6ICdudW1weS5uZGFycmF5JyBvYmplY3QgaXMgbm90IGNhbGxhYmxlChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxMy1yYW5kb20tdmFsdWVzLWFycmF5L3Rlc3QucHk6OhtbMW10ZXN0X2Fycl92YWx1ZRtbMG0gLSBUeXBlRXJyb3I6ICdudW1weS5uZGFycmF5JyBvYmplY3QgaXMgbm90IGNhbGxhYmxlChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0yIGZhaWxlZBtbMG0sIBtbMzJtMSBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21Zb3Ugc2hvdWxkIGNyZWF0ZSBhIHZhcmlhYmxlIG5hbWVkIGFychtbMzltCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDEuIBtbMzdtVGhlIGFycmF5IHNob3VsZCBoYXZlIHRocmVlIHJhbmRvbSB2YWx1ZXMbWzM5bSAKCg==","exit_code":1},{"starting_at":1726263461555,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQ==","ended_at":1726263461939,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDEzLXJhbmRvbS12YWx1ZXMtYXJyYXkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMTFzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726262963583,"completed_at":1726263461939},{"slug":"014-minimum-and-maximum","position":14,"files":[{"path":".learn/exercises/014-minimum-and-maximum/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/014-minimum-and-maximum/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/014-minimum-and-maximum/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/014-minimum-and-maximum/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[{"stderr":"VHJhY2ViYWNrIChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOgogIEZpbGUgIi93b3Jrc3BhY2VzL251bXB5LXR1dG9yaWFsLWV4ZXJjaXNlcy9hcHAucHkiLCBsaW5lIDI2LCBpbiA8bW9kdWxlPgogICAgYXJyKDExKQpUeXBlRXJyb3I6ICdudW1weS5uZGFycmF5JyBvYmplY3QgaXMgbm90IGNhbGxhYmxlCg==","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":524288,"cpuUsage":7590,"errorType":"run-time","starting_at":1726263818430,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnIoMTEpCmFyci5tYXgoKQ==","ended_at":1726263818628,"exit_code":null}],"tests":[{"starting_at":1726263822666,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnIoMTEpCmFyci5tYXgoKQ==","ended_at":1726263823078,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726264005067,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnIucmVzaGFwZSgxMSkKYXJyLm1heCgp","ended_at":1726264005500,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726264157143,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQ==","ended_at":1726264157529,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDMgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE0LW1pbmltdW0tYW5kLW1heGltdW0vdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KChtbMzJtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzJtG1sxbTMgcGFzc2VkG1swbRtbMzJtIGluIDAuMTJzG1swbRtbMzJtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1726263503518,"completed_at":1726264157529},{"slug":"015-mean-value","position":15,"files":[{"path":".learn/exercises/015-mean-value/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/015-mean-value/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/015-mean-value/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/015-mean-value/test.py","name":"test.py","hidden":true}],"ai_interactions":[{"starting_at":1726264325780,"student_message":"donde esta mi error","context":"---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: solution.hide.py. Content: \n      `{\"message\":\"File not found: + undefined\",\"status\":500,\"type\":null}`\n      ---\n      \n---\n      # File name: test.py. Content: \n      `import pytest\nimport os\nimport numpy\n\n@pytest.mark.it(\"You have to use the mean() method\")\ndef test_random():\n    f = open('app.py')\n    content = f.read()\n    assert \"mean(\" in content\n\n@pytest.mark.it('The output should be the mean value of the array')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert captured.out == f'{app.arr.mean()}\\n'\n\n@pytest.mark.it('You should create a variable named arr')\ndef test_arr_exists():\n    try:\n        from app import arr\n    except AttributeError:\n        raise AttributeError(\"The variable 'arr' should exist on app.py\")\n\n@pytest.mark.it('The array should have ten random values')\ndef test_arr_value(capsys):\n    from app import arr\n    size = numpy.size(arr)\n    assert size == 10\n`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `015` Mean Value\n\n## üìù Instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con 10 valores aleatorios.\n\n2. Encuentra el valor medio e impr√≠melo en la consola.\n\n## üí° Pista:\n\n+ El m√©todo `mean()` retorna el valor medio en un array. Puedes leer m√°s de este m√©todo en este link: https://numpy.org/doc/stable/reference/generated/numpy.mean.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/015-mean-value/test.py .FFF                             [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7e0cc6a29f30>\n\n    @pytest.mark.it('The output should be the mean value of the array')\n    def test_print(capsys):\n>       import app\n\n.learn/exercises/015-mean-value/test.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napp.py:29: in <module>\n    print(arr.mean(5))\n/home/vscode/.local/lib/python3.10/site-packages/numpy/core/_methods.py:169: in _mean\n    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\narr = array([0.01264127, 0.82499779, 0.62646595, 0.05343209, 0.95790658,\n       0.27697128, 0.98223287, 0.59837128, 0.88096511, 0.6896714 ])\naxis = (5,), keepdims = False, where = True\n\n    def _count_reduce_items(arr, axis, keepdims=False, where=True):\n        # fast-path for the default case\n        if where is True:\n            # no boolean mask given, calculate items according to axis\n            if axis is None:\n                axis = tuple(range(arr.ndim))\n            elif not isinstance(axis, tuple):\n                axis = (axis,)\n            items = 1\n            for ax in axis:\n>               items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\nE               numpy.AxisError: axis 5 is out of bounds for array of dimension 1\n\n/home/vscode/.local/lib/python3.10/site-packages/numpy/core/_methods.py:77: AxisError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n80\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\nAdd arguments element-wise.\n\nParameters\n----------\nx1, x2 : array_like\n    The arrays to be added.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the inputs broadcast to. If not provided or None,\n    a freshly-allocated array is returned. A tuple (possible only as a\n    keyword argument) must have length equal to the number of outputs.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the\n    :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\nadd : ndarray or scalar\n    The sum of `x1` and `x2`, element-wise.\n    This is a scalar if both `x1` and `x2` are scalars.\n\nNotes\n-----\nEquivalent to `x1` + `x2` in terms of array broadcasting.\n\nExamples\n--------\n>>> np.add(1.0, 4.0)\n5.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.add(x1, x2)\narray([[  0.,   2.,   4.],\n       [  3.,   5.,   7.],\n       [  6.,   8.,  10.]])\n\nThe ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.\n\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> x1 + x2\narray([[ 0.,  2.,  4.],\n       [ 3.,  5.,  7.],\n       [ 6.,  8., 10.]])\nNone\n[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n[9 8 7 6 5 4 3 2 1 0]\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n(array([0, 1, 4]),)\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n[0.99225269 0.03491809 0.52573676]\n0.9826587008980501\n_______________________________ test_arr_exists ________________________________\n\n    @pytest.mark.it('You should create a variable named arr')\n    def test_arr_exists():\n        try:\n>           from app import arr\n\n.learn/exercises/015-mean-value/test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napp.py:29: in <module>\n    print(arr.mean(5))\n/home/vscode/.local/lib/python3.10/site-packages/numpy/core/_methods.py:169: in _mean\n    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\narr = array([0.94259339, 0.56757569, 0.34572456, 0.65284623, 0.02429705,\n       0.37687172, 0.44864883, 0.47442507, 0.87220128, 0.20462739])\naxis = (5,), keepdims = False, where = True\n\n    def _count_reduce_items(arr, axis, keepdims=False, where=True):\n        # fast-path for the default case\n        if where is True:\n            # no boolean mask given, calculate items according to axis\n            if axis is None:\n                axis = tuple(range(arr.ndim))\n            elif not isinstance(axis, tuple):\n                axis = (axis,)\n            items = 1\n            for ax in axis:\n>               items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\nE               numpy.AxisError: axis 5 is out of bounds for array of dimension 1\n\n/home/vscode/.local/lib/python3.10/site-packages/numpy/core/_methods.py:77: AxisError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n80\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\nAdd arguments element-wise.\n\nParameters\n----------\nx1, x2 : array_like\n    The arrays to be added.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the inputs broadcast to. If not provided or None,\n    a freshly-allocated array is returned. A tuple (possible only as a\n    keyword argument) must have length equal to the number of outputs.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the\n    :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\nadd : ndarray or scalar\n    The sum of `x1` and `x2`, element-wise.\n    This is a scalar if both `x1` and `x2` are scalars.\n\nNotes\n-----\nEquivalent to `x1` + `x2` in terms of array broadcasting.\n\nExamples\n--------\n>>> np.add(1.0, 4.0)\n5.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.add(x1, x2)\narray([[  0.,   2.,   4.],\n       [  3.,   5.,   7.],\n       [  6.,   8.,  10.]])\n\nThe ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.\n\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> x1 + x2\narray([[ 0.,  2.,  4.],\n       [ 3.,  5.,  7.],\n       [ 6.,  8., 10.]])\nNone\n[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n[9 8 7 6 5 4 3 2 1 0]\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n(array([0, 1, 4]),)\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n[0.12190311 0.40959639 0.04801389]\n0.8441631318592748\n________________________________ test_arr_value ________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7e0cc63d2410>\n\n    @pytest.mark.it('The array should have ten random values')\n    def test_arr_value(capsys):\n>       from app import arr\n\n.learn/exercises/015-mean-value/test.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napp.py:29: in <module>\n    print(arr.mean(5))\n/home/vscode/.local/lib/python3.10/site-packages/numpy/core/_methods.py:169: in _mean\n    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\narr = array([0.23011177, 0.83328431, 0.34801005, 0.09406663, 0.25411656,\n       0.8178054 , 0.28044107, 0.03601504, 0.69927946, 0.58150083])\naxis = (5,), keepdims = False, where = True\n\n    def _count_reduce_items(arr, axis, keepdims=False, where=True):\n        # fast-path for the default case\n        if where is True:\n            # no boolean mask given, calculate items according to axis\n            if axis is None:\n                axis = tuple(range(arr.ndim))\n            elif not isinstance(axis, tuple):\n                axis = (axis,)\n            items = 1\n            for ax in axis:\n>               items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\nE               numpy.AxisError: axis 5 is out of bounds for array of dimension 1\n\n/home/vscode/.local/lib/python3.10/site-packages/numpy/core/_methods.py:77: AxisError\n----------------------------- Captured stdout call -----------------------------\n1.24.2\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n80\nadd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\nAdd arguments element-wise.\n\nParameters\n----------\nx1, x2 : array_like\n    The arrays to be added.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the inputs broadcast to. If not provided or None,\n    a freshly-allocated array is returned. A tuple (possible only as a\n    keyword argument) must have length equal to the number of outputs.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the\n    :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\nadd : ndarray or scalar\n    The sum of `x1` and `x2`, element-wise.\n    This is a scalar if both `x1` and `x2` are scalars.\n\nNotes\n-----\nEquivalent to `x1` + `x2` in terms of array broadcasting.\n\nExamples\n--------\n>>> np.add(1.0, 4.0)\n5.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.add(x1, x2)\narray([[  0.,   2.,   4.],\n       [  3.,   5.,   7.],\n       [  6.,   8.,  10.]])\n\nThe ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.\n\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> x1 + x2\narray([[ 0.,  2.,  4.],\n       [ 3.,  5.,  7.],\n       [ 6.,  8., 10.]])\nNone\n[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n[9 8 7 6 5 4 3 2 1 0]\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n(array([0, 1, 4]),)\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n[0.01537351 0.66832522 0.95933709]\n0.7891103979183961\n=========================== short test summary info ============================\nFAILED .learn/exercises/015-mean-value/test.py::test_print - numpy.AxisError: axis 5 is out of bounds for array of dimension 1\nFAILED .learn/exercises/015-mean-value/test.py::test_arr_exists - numpy.AxisError: axis 5 is out of bounds for array of dimension 1\nFAILED .learn/exercises/015-mean-value/test.py::test_arr_value - numpy.AxisError: axis 5 is out of bounds for array of dimension 1\n========================= 3 failed, 1 passed in 0.16s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be the mean value of the array\n     x (fail) 1. You should create a variable named arr\n     x (fail) 2. The array should have ten random values \n\n","ending_at":1726264329727,"ai_response":"Vamos a analizar tu c√≥digo y los errores que se est√°n presentando. Seg√∫n los mensajes de error, parece que hay un problema con el uso del m√©todo `mean()`.\n\nEl error espec√≠fico es `numpy.AxisError: axis 5 is out of bounds for array of dimension 1`. Esto sugiere que est√°s intentando calcular la media a lo largo de un eje que no existe en tu array.\n\nVamos a revisar los pasos que debes seguir para completar el ejercicio correctamente:\n\n1. Crear un array con 10 valores aleatorios.\n2. Calcular la media de ese array.\n3. Imprimir la media en la consola.\n\nPrimero, aseg√∫rate de que est√°s creando el array correctamente. Puedes usar `numpy.random.rand` para generar 10 valores aleatorios. Luego, usa el m√©todo `mean()` sin especificar ning√∫n eje, ya que tu array es unidimensional.\n\nAqu√≠ hay una gu√≠a paso a paso:\n\n1. Importa la librer√≠a `numpy`.\n2. Crea un array llamado `arr` con 10 valores aleatorios.\n3. Calcula la media del array usando `arr.mean()`.\n4. Imprime la media.\n\nPiensa en c√≥mo podr√≠as escribir esto en c√≥digo. ¬øC√≥mo generar√≠as un array de 10 valores aleatorios? ¬øC√≥mo calcular√≠as la media de ese array?\n\nReflexiona sobre estos puntos y trata de corregir tu c√≥digo. ¬øQu√© cambios har√≠as para asegurarte de que el m√©todo `mean()` se usa correctamente?"},{"starting_at":1726264561558,"student_message":"que estoy haciendo mal?","context":"---\n      # File name: test.py. Content: \n      `import pytest\nimport os\nimport numpy\n\n@pytest.mark.it(\"You have to use the mean() method\")\ndef test_random():\n    f = open('app.py')\n    content = f.read()\n    assert \"mean(\" in content\n\n@pytest.mark.it('The output should be the mean value of the array')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert captured.out == f'{app.arr.mean()}\\n'\n\n@pytest.mark.it('You should create a variable named arr')\ndef test_arr_exists():\n    try:\n        from app import arr\n    except AttributeError:\n        raise AttributeError(\"The variable 'arr' should exist on app.py\")\n\n@pytest.mark.it('The array should have ten random values')\ndef test_arr_value(capsys):\n    from app import arr\n    size = numpy.size(arr)\n    assert size == 10\n`\n      ---\n      \n---\n      # File name: .devcontainer. Content: \n      `Error: This is not a file to be read, but a directory: ./.devcontainer`\n      ---\n      \n---\n      # File name: .git. Content: \n      `Error: This is not a file to be read, but a directory: ./.git`\n      ---\n      \n---\n      # File name: .gitattributes. Content: \n      `*.md linguist-language=Python\n*.ipynb linguist-language=Python\n`\n      ---\n      \n---\n      # File name: .github. Content: \n      `Error: This is not a file to be read, but a directory: ./.github`\n      ---\n      \n---\n      # File name: .gitignore. Content: \n      `# configuration and readme\n!.gitignore\n!.gitpod.yml\nconftest.py\n!.gitpod.Dockerfile\n!learn.json\n!README.md\n!.devcontainer\n!.devcontainer/*\n\n# exercises\n!.learn/\n!.learn/*\n.learn/_app\n.learn/.session\n.learn/dist\n.learn/app.tar.gz\n.learn/config.json\n.learn/vscode_queue.json\n\n.ipynb_checkpoints/\n__pycache__\nvenv\n.idea\n.vscode\nUntitled.ipynb\n.pytest_cache\n`\n      ---\n      \n---\n      # File name: .gitpod.Dockerfile. Content: \n      `FROM gitpod/workspace-full:latest\n\nUSER gitpod\n\n# Install Python 3.11\nRUN pyenv install 3.11.5\nRUN pyenv global 3.11.5\n\n# Upgrade setuptools\nRUN pip3 install --upgrade setuptools\n\n# Install required packages\nRUN pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\nRUN npm i @learnpack/learnpack@2.1.56 -g && learnpack plugins:install @learnpack/python@1.0.3\n`\n      ---\n      \n---\n      # File name: .gitpod.yml. Content: \n      `image:\n  file: .gitpod.Dockerfile\n\nports:\n    - port: 3000\n      onOpen: ignore\n\nvscode:\n  extensions:\n    - learn-pack.learnpack-vscode\n\ngithub:\n    prebuilds:\n        # enable for the master/default branch (defaults to true)\n        master: true\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: false\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to true)\n        addComment: false\n`\n      ---\n      \n---\n      # File name: .learn. Content: \n      `Error: This is not a file to be read, but a directory: ./.learn`\n      ---\n      \n---\n      # File name: .pytest_cache. Content: \n      `Error: This is not a file to be read, but a directory: ./.pytest_cache`\n      ---\n      \n---\n      # File name: .vscode. Content: \n      `Error: This is not a file to be read, but a directory: ./.vscode`\n      ---\n      \n---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: __pycache__. Content: \n      `Error: This is not a file to be read, but a directory: ./__pycache__`\n      ---\n      \n---\n      # File name: app.py. Content: \n      `import numpy as np\nprint(np.__version__)\nprint(np.zeros(10))\nzeros=np.zeros(10) \nmem_size=zeros.itemsize * zeros.size\nprint(mem_size)\nprint(np.info(np.add))\narr = np.zeros(10)\narr[4]=1\nprint(arr)\narr=np.arange(10,50)\nprint(arr)\nvector=np.arange(10)\nvector_invertido=vector[::-1]\nprint(vector_invertido)\nimport numpy as np\narr=np.arange(0,9)\nmatriz= np.reshape(arr,(3,3))\nprint(matriz)\narr = np.array([1,2,0,0,4,0])\nprint(np.nonzero(arr))\nmatriz=np.eye(3,3)\nprint(matriz)\narr=np.random.random(3)\nprint(arr)\narr=np.random.random(10)\nprint(arr.max())\nimport numpy as np\narr = np.random.random(10)\nprint(arr.mean())`\n      ---\n      \n---\n      # File name: conftest.py. Content: \n      `import sys, os, json\nif os.path.isdir(\"./.venv/lib/\"):\n    sys.path.append('null/site-packages')\ndef pytest_addoption(parser):\n    parser.addoption(\"--stdin\", action=\"append\", default=[],\n        help=\"json with the stdin to pass to test functions\")\ndef pytest_generate_tests(metafunc):\n    if 'stdin' in metafunc.fixturenames:\n      if hasattr(metafunc,\"config\"):\n          metafunc.parametrize(\"stdin\",metafunc.config.getoption('stdin'))\n      elif hasattr(metafunc,\"configuration\"):\n          metafunc.parametrize(\"stdin\",metafunc.configuration.getoption('stdin'))\n      else:\n          raise Exception(\"Imposible to retrieve text configuration object\")\n    if 'app' in metafunc.fixturenames:\n        try:\n          sys.path.append('.learn/dist')\n          import cached_app\n          metafunc.parametrize(\"app\",[cached_app.execute_app])\n        except SyntaxError:\n          metafunc.parametrize(\"app\",[lambda : None])\n        except ImportError:\n          metafunc.parametrize(\"app\",[cached_app])\n        except AttributeError:\n          metafunc.parametrize(\"app\",[cached_app])\n    if 'configuration' in metafunc.fixturenames:\n        metafunc.parametrize(\"configuration\", [json.loads('{\"port\":3000,\"os\":\"linux\",\"editor\":{\"mode\":\"extension\",\"agent\":\"vscode\",\"version\":\"4.0.0\"},\"dirPath\":\"./.learn\",\"configPath\":\"learn.json\",\"outputPath\":\".learn/dist\",\"publicPath\":\"/preview\",\"publicUrl\":\"https://supreme-space-waffle-v6g4w5wvwqgr2jqg-3000.app.github.dev\",\"contact\":\"https://github.com/learnpack/learnpack/issues/new\",\"language\":\"auto\",\"autoPlay\":true,\"projectType\":\"tutorial\",\"grading\":\"incremental\",\"exercisesPath\":\".learn/exercises\",\"webpackTemplate\":null,\"disableGrading\":false,\"disabledActions\":[],\"actions\":[],\"entries\":{\"html\":\"index.html\",\"vanillajs\":\"index.js\",\"react\":\"app.jsx\",\"node\":\"app.js\",\"python3\":\"app.py\",\"java\":\"app.java\"},\"suggestions\":{\"agent\":\"vscode\"},\"warnings\":{\"agent\":null},\"preview\":\"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\"repository\":\"https://github.com/breatheco-de/numpy-tutorial-exercises\",\"difficulty\":\"intermediate\",\"duration\":10,\"description\":{\"us\":\"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\"es\":\"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"},\"title\":{\"us\":\"Numpy Tutorial Exercises\",\"es\":\"Tutorial Interactivo de Numpy\"},\"slug\":\"numpy-exercises\",\"translations\":[]}')])\n`\n      ---\n      \n---\n      # File name: learn.json. Content: \n      `{\n    \"preview\": \"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\n    \"repository\": \"https://github.com/breatheco-de/numpy-tutorial-exercises\",\n    \"grading\": \"incremental\",\n    \"difficulty\": \"intermediate\",\n    \"duration\": 10,\n    \"description\": {\n        \"us\": \"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\n        \"es\": \"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"\n    },\n    \"title\": {\n        \"us\": \"Numpy Tutorial Exercises\",\n        \"es\": \"Tutorial Interactivo de Numpy\"\n    },\n    \"slug\": \"numpy-exercises\",\n    \"editor\": {\n        \"version\": \"4.0.0\"\n    }\n}\n`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `015` Mean Value\n\n## üìù Instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con 10 valores aleatorios.\n\n2. Encuentra el valor medio e impr√≠melo en la consola.\n\n## üí° Pista:\n\n+ El m√©todo `mean()` retorna el valor medio en un array. Puedes leer m√°s de este m√©todo en este link: https://numpy.org/doc/stable/reference/generated/numpy.mean.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/015-mean-value/test.py .F..                             [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7eaf4ee05f90>\n\n    @pytest.mark.it('The output should be the mean value of the array')\n    def test_print(capsys):\n        import app\n        captured = capsys.readouterr()\n>       assert captured.out == f'{app.arr.mean()}\\n'\nE       AssertionError: assert '1.24.2\\n[0. ...02753833645\\n' == '0.4261902753833645\\n'\nE         + 1.24.2\nE         + [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\nE         + 80\nE         + add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\nE         + \nE         + Add arguments element-wise.\nE         + ...\nE         \nE         ...Full output truncated (66 lines hidden), use '-vv' to show\n\n.learn/exercises/015-mean-value/test.py:15: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/015-mean-value/test.py::test_print - AssertionError: assert '1.24.2\\n[0. ...02753833645\\n' == '0.426190275383364...\n========================= 1 failed, 3 passed in 0.14s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be the mean value of the array \n\n","ending_at":1726264564943,"ai_response":"Parece que tu c√≥digo actual est√° imprimiendo m√°s informaci√≥n de la necesaria. La instrucci√≥n pide que solo imprimas el valor medio del array `arr`. Vamos a revisar tu c√≥digo y ver c√≥mo podemos ajustarlo para que cumpla con los requisitos.\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con 10 valores aleatorios.\n2. Encuentra el valor medio e impr√≠melo en la consola.\n\nTu c√≥digo actual en `app.py` parece estar haciendo m√°s cosas de las necesarias. Vamos a simplificarlo:\n\n1. Importa la librer√≠a `numpy`.\n2. Crea un array con 10 valores aleatorios.\n3. Calcula el valor medio del array.\n4. Imprime el valor medio.\n\nPiensa en c√≥mo podr√≠as hacer esto. ¬øQu√© pasos espec√≠ficos necesitas seguir para cumplir con las instrucciones?\n\nPor ejemplo, ¬øc√≥mo crear√≠as un array con 10 valores aleatorios usando `numpy`? ¬øY c√≥mo calcular√≠as el valor medio de ese array?\n\nIntenta escribir el c√≥digo siguiendo estos pasos y aseg√∫rate de que solo imprimes el valor medio del array."},{"starting_at":1726264831999,"student_message":"esta escrito todo bien, porque no me lo ejecuta\n","context":"---\n      # File name: test.py. Content: \n      `import pytest\nimport os\nimport numpy\n\n@pytest.mark.it(\"You have to use the mean() method\")\ndef test_random():\n    f = open('app.py')\n    content = f.read()\n    assert \"mean(\" in content\n\n@pytest.mark.it('The output should be the mean value of the array')\ndef test_print(capsys):\n    import app\n    captured = capsys.readouterr()\n    assert captured.out == f'{app.arr.mean()}\\n'\n\n@pytest.mark.it('You should create a variable named arr')\ndef test_arr_exists():\n    try:\n        from app import arr\n    except AttributeError:\n        raise AttributeError(\"The variable 'arr' should exist on app.py\")\n\n@pytest.mark.it('The array should have ten random values')\ndef test_arr_value(capsys):\n    from app import arr\n    size = numpy.size(arr)\n    assert size == 10\n`\n      ---\n      \n---\n      # File name: conftest.py. Content: \n      `import sys, os, json\nif os.path.isdir(\"./.venv/lib/\"):\n    sys.path.append('null/site-packages')\ndef pytest_addoption(parser):\n    parser.addoption(\"--stdin\", action=\"append\", default=[],\n        help=\"json with the stdin to pass to test functions\")\ndef pytest_generate_tests(metafunc):\n    if 'stdin' in metafunc.fixturenames:\n      if hasattr(metafunc,\"config\"):\n          metafunc.parametrize(\"stdin\",metafunc.config.getoption('stdin'))\n      elif hasattr(metafunc,\"configuration\"):\n          metafunc.parametrize(\"stdin\",metafunc.configuration.getoption('stdin'))\n      else:\n          raise Exception(\"Imposible to retrieve text configuration object\")\n    if 'app' in metafunc.fixturenames:\n        try:\n          sys.path.append('.learn/dist')\n          import cached_app\n          metafunc.parametrize(\"app\",[cached_app.execute_app])\n        except SyntaxError:\n          metafunc.parametrize(\"app\",[lambda : None])\n        except ImportError:\n          metafunc.parametrize(\"app\",[cached_app])\n        except AttributeError:\n          metafunc.parametrize(\"app\",[cached_app])\n    if 'configuration' in metafunc.fixturenames:\n        metafunc.parametrize(\"configuration\", [json.loads('{\"port\":3000,\"os\":\"linux\",\"editor\":{\"mode\":\"extension\",\"agent\":\"vscode\",\"version\":\"4.0.0\"},\"dirPath\":\"./.learn\",\"configPath\":\"learn.json\",\"outputPath\":\".learn/dist\",\"publicPath\":\"/preview\",\"publicUrl\":\"https://supreme-space-waffle-v6g4w5wvwqgr2jqg-3000.app.github.dev\",\"contact\":\"https://github.com/learnpack/learnpack/issues/new\",\"language\":\"auto\",\"autoPlay\":true,\"projectType\":\"tutorial\",\"grading\":\"incremental\",\"exercisesPath\":\".learn/exercises\",\"webpackTemplate\":null,\"disableGrading\":false,\"disabledActions\":[],\"actions\":[],\"entries\":{\"html\":\"index.html\",\"vanillajs\":\"index.js\",\"react\":\"app.jsx\",\"node\":\"app.js\",\"python3\":\"app.py\",\"java\":\"app.java\"},\"suggestions\":{\"agent\":\"vscode\"},\"warnings\":{\"agent\":null},\"preview\":\"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\"repository\":\"https://github.com/breatheco-de/numpy-tutorial-exercises\",\"difficulty\":\"intermediate\",\"duration\":10,\"description\":{\"us\":\"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\"es\":\"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"},\"title\":{\"us\":\"Numpy Tutorial Exercises\",\"es\":\"Tutorial Interactivo de Numpy\"},\"slug\":\"numpy-exercises\",\"translations\":[]}')])\n`\n      ---\n      \n---\n      # File name: .devcontainer. Content: \n      `Error: This is not a file to be read, but a directory: ./.devcontainer`\n      ---\n      \n---\n      # File name: .git. Content: \n      `Error: This is not a file to be read, but a directory: ./.git`\n      ---\n      \n---\n      # File name: .gitattributes. Content: \n      `*.md linguist-language=Python\n*.ipynb linguist-language=Python\n`\n      ---\n      \n---\n      # File name: .github. Content: \n      `Error: This is not a file to be read, but a directory: ./.github`\n      ---\n      \n---\n      # File name: .gitignore. Content: \n      `# configuration and readme\n!.gitignore\n!.gitpod.yml\nconftest.py\n!.gitpod.Dockerfile\n!learn.json\n!README.md\n!.devcontainer\n!.devcontainer/*\n\n# exercises\n!.learn/\n!.learn/*\n.learn/_app\n.learn/.session\n.learn/dist\n.learn/app.tar.gz\n.learn/config.json\n.learn/vscode_queue.json\n\n.ipynb_checkpoints/\n__pycache__\nvenv\n.idea\n.vscode\nUntitled.ipynb\n.pytest_cache\n`\n      ---\n      \n---\n      # File name: .gitpod.Dockerfile. Content: \n      `FROM gitpod/workspace-full:latest\n\nUSER gitpod\n\n# Install Python 3.11\nRUN pyenv install 3.11.5\nRUN pyenv global 3.11.5\n\n# Upgrade setuptools\nRUN pip3 install --upgrade setuptools\n\n# Install required packages\nRUN pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\nRUN npm i @learnpack/learnpack@2.1.56 -g && learnpack plugins:install @learnpack/python@1.0.3\n`\n      ---\n      \n---\n      # File name: .gitpod.yml. Content: \n      `image:\n  file: .gitpod.Dockerfile\n\nports:\n    - port: 3000\n      onOpen: ignore\n\nvscode:\n  extensions:\n    - learn-pack.learnpack-vscode\n\ngithub:\n    prebuilds:\n        # enable for the master/default branch (defaults to true)\n        master: true\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: false\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to true)\n        addComment: false\n`\n      ---\n      \n---\n      # File name: .learn. Content: \n      `Error: This is not a file to be read, but a directory: ./.learn`\n      ---\n      \n---\n      # File name: .pytest_cache. Content: \n      `Error: This is not a file to be read, but a directory: ./.pytest_cache`\n      ---\n      \n---\n      # File name: .vscode. Content: \n      `Error: This is not a file to be read, but a directory: ./.vscode`\n      ---\n      \n---\n      # File name: README.es.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nPor <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> y <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">otros contibuyentes</a> en <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (y Pandas) son las librer√≠as #1 para Machine Learning, no hay manera que puedas realizar cualquier cosa sin ellas.\n\nEste tutorial interactivo te va a ayudar a familiarizarte con ello, a dominar las funcionalidades m√°s usadas y a ayudarte a limpiar tu primer set de datos. \n\n- Documentaci√≥n de NumPy.\n- Vectores.\n- Matrices.\n- Valores aleatorios, Media.\n\n> Nota: Todo el tutorial es completamente üëÜ interactivo, ‚úÖ con correcci√≥n autom√°tica y üìπ videos tutoriales.\n\nEstos ejercicios fueron construidos en colaboraci√≥n. ¬°Te necesitamos! Si consigues alg√∫n error o falta de ortograf√≠a, por favor ay√∫danos y rep√≥rtalos.\n\n<!-- hide -->\n## Instalaci√≥n en un clic (recomendado)\n\nPuedes empezar estos ejercicios en pocos segundos haciendo clic en: [Abrir en Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recomendado) o [Abrir en Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Una vez ya tengas abierto VSCode, los ejercicios de LearnPack deber√≠an empezar autom√°ticamente; si esto no sucede puedes intentar empezar los ejercicios escribiendo este comando en tu terminal: `$ learnpack start`\n\n\n## Instalaci√≥n local\n\n1. Clona o descarga este repositorio.\n\n2. Aseg√∫rate de tener [LearnPack](https://learnpack.co) instalado, una versi√≥n de node.js 14 o superior y una versi√≥n de Python 3 o superior. Este es el comando para instalar LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Empieza el tutorial/ejercicios corriendo estos comandos en el mismo nivel donde se encuentra tu archivo learn.json:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Nota: Estos ejercicios tienen calificaci√≥n autom√°tica. Los tests son muy r√≠gidos y estrictos, mi recomendaci√≥n es que no prestes demasiada atenci√≥n a los tests y los uses solo como una sugerencia o podr√≠as frustrarte.\n\n<!-- endhide -->\n\n## Colaboradores\n \nGracias a estas personas maravillosas ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribuci√≥n: (programador) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentaci√≥n) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribuci√≥n: (bug reports) üêõ, (programador) üíª, (traducci√≥n) üåé\n\n3. [Marco G√≥mez (marcogonzalo)](https://github.com/marcogonzalo), contribution: (bug reports) üêõ, (traducci√≥n) üåé\n\nEste proyecto sigue la especificaci√≥n [all-contributors](https://github.com/kentcdodds/all-contributors).\n\n¬°Todas las contribuciones son bienvenidas!\n`\n      ---\n      \n---\n      # File name: README.md. Content: \n      `<!-- hide -->\n# Welcome to Numpy exercise tutorial\n\nBy <a href=\"https://twitter.com/alesanchezr\">@alesanchezr</a> and <a href=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/graphs/contributors\">other contributors</a> at <a href=\"http://4geeksacademy.com/\">4Geeks Academy.</a><a href=\"https://www.4geeksacademy.com\"><img height=\"280\" align=\"right\" src=\"https://github.com/4geeksacademy/numpy-tutorial-exercises/blob/master/.learn/assets/numpy-badge.png?raw=true\"></a>\n<!-- endhide -->\n\nNumPy (and Pandas) are the #1 libraries for Machine Learning, there is no way you can do anything without them. \n\nThis interactive tutorial will help you become familiar with it, master the most used functionalities, and help you clean up your first datasets.\n\n- NumPy documentation.\n- Vectors.\n- Matrixes.\n- Random, Mean Values.\n\n> Note: The entire tutorial is üëÜ interactive, ‚úÖ auto-graded and with üìπ video tutorials.\n\nThese exercises were built in collaboration; we need you! If you find any bugs or misspellings, please contribute and report them.\n\n<!-- hide -->\n\n## One click installation (recommended):\n\nYou can open these exercises in just a few seconds by clicking: [Open in Codespaces](https://codespaces.new/?repo=4GeeksAcademy/numpy-tutorial-exercises) (recommended) or [Open in Gitpod](https://gitpod.io#https://github.com/4GeeksAcademy/numpy-tutorial-exercises.git).\n\n> Once you have VSCode open the LearnPack exercises should start automatically. If exercises don't run automatically you can try typing on your terminal: `$ learnpack start`\n\n\n\n## Local Installation\n\n1. Clone or download this repository.\n\n2. Make sure you have [LearnPack](https://learnpack.co) installed, node.js version 14+, and Python version 3+. This is the command to install LearnPack:\n\n```bash\n$ npm i @learnpack/learnpack -g && learnpack plugins:install @learnpack/python\n```\n\n3. Start the tutorial/exercises by running the following commands at the same level where your learn.json file is:\n\n```bash\n$ pip3 install pytest==6.2.5 mock pytest-testdox toml numpy==1.24.2 pandas\n$ learnpack start\n```\n\n> Note: The exercises have automatic grading, but it's very rigid and strict, my recommendation is to not take the tests too serious and use them only as a suggestion, or you may get frustrated.\n\n<!-- endhide -->\n\n\n## Contributors\n\nThanks to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) üíª, (idea) ü§î, (build-tests) ‚ö†Ô∏è, (pull-request-review) üëÄ, (build-tutorial) ‚úÖ, (documentation) üìñ\n\n2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) üêõ, (coder) üíª, (translation) üåé\n\n3. [Ricardo Rodriguez (RickRodriguez8080)](https://github.com/RickRodriguez8080) contribution: (build-tutorial) ‚úÖ, (documentation) üìñ\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specifications. \n\nContributions of any kind are welcome!\n`\n      ---\n      \n---\n      # File name: __pycache__. Content: \n      `Error: This is not a file to be read, but a directory: ./__pycache__`\n      ---\n      \n---\n      # File name: app.py. Content: \n      `import numpy as np\nprint(np.__version__)\nprint(np.zeros(10))\nzeros=np.zeros(10) \nmem_size=zeros.itemsize * zeros.size\nprint(mem_size)\nprint(np.info(np.add))\narr = np.zeros(10)\narr[4]=1\nprint(arr)\narr=np.arange(10,50)\nprint(arr)\nvector=np.arange(10)\nvector_invertido=vector[::-1]\nprint(vector_invertido)\nimport numpy as np\narr=np.arange(0,9)\nmatriz= np.reshape(arr,(3,3))\nprint(matriz)\narr = np.array([1,2,0,0,4,0])\nprint(np.nonzero(arr))\nmatriz=np.eye(3,3)\nprint(matriz)\narr=np.random.random(3)\nprint(arr)\narr=np.random.random(10)\nprint(arr.max())\n\nimport numpy as np\n\narr = np.random.random(10)\n\nprint(arr.mean())`\n      ---\n      \n---\n      # File name: conftest.py. Content: \n      `import sys, os, json\nif os.path.isdir(\"./.venv/lib/\"):\n    sys.path.append('null/site-packages')\ndef pytest_addoption(parser):\n    parser.addoption(\"--stdin\", action=\"append\", default=[],\n        help=\"json with the stdin to pass to test functions\")\ndef pytest_generate_tests(metafunc):\n    if 'stdin' in metafunc.fixturenames:\n      if hasattr(metafunc,\"config\"):\n          metafunc.parametrize(\"stdin\",metafunc.config.getoption('stdin'))\n      elif hasattr(metafunc,\"configuration\"):\n          metafunc.parametrize(\"stdin\",metafunc.configuration.getoption('stdin'))\n      else:\n          raise Exception(\"Imposible to retrieve text configuration object\")\n    if 'app' in metafunc.fixturenames:\n        try:\n          sys.path.append('.learn/dist')\n          import cached_app\n          metafunc.parametrize(\"app\",[cached_app.execute_app])\n        except SyntaxError:\n          metafunc.parametrize(\"app\",[lambda : None])\n        except ImportError:\n          metafunc.parametrize(\"app\",[cached_app])\n        except AttributeError:\n          metafunc.parametrize(\"app\",[cached_app])\n    if 'configuration' in metafunc.fixturenames:\n        metafunc.parametrize(\"configuration\", [json.loads('{\"port\":3000,\"os\":\"linux\",\"editor\":{\"mode\":\"extension\",\"agent\":\"vscode\",\"version\":\"4.0.0\"},\"dirPath\":\"./.learn\",\"configPath\":\"learn.json\",\"outputPath\":\".learn/dist\",\"publicPath\":\"/preview\",\"publicUrl\":\"https://supreme-space-waffle-v6g4w5wvwqgr2jqg-3000.app.github.dev\",\"contact\":\"https://github.com/learnpack/learnpack/issues/new\",\"language\":\"auto\",\"autoPlay\":true,\"projectType\":\"tutorial\",\"grading\":\"incremental\",\"exercisesPath\":\".learn/exercises\",\"webpackTemplate\":null,\"disableGrading\":false,\"disabledActions\":[],\"actions\":[],\"entries\":{\"html\":\"index.html\",\"vanillajs\":\"index.js\",\"react\":\"app.jsx\",\"node\":\"app.js\",\"python3\":\"app.py\",\"java\":\"app.java\"},\"suggestions\":{\"agent\":\"vscode\"},\"warnings\":{\"agent\":null},\"preview\":\"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\"repository\":\"https://github.com/breatheco-de/numpy-tutorial-exercises\",\"difficulty\":\"intermediate\",\"duration\":10,\"description\":{\"us\":\"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\"es\":\"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"},\"title\":{\"us\":\"Numpy Tutorial Exercises\",\"es\":\"Tutorial Interactivo de Numpy\"},\"slug\":\"numpy-exercises\",\"translations\":[]}')])\n`\n      ---\n      \n---\n      # File name: learn.json. Content: \n      `{\n    \"preview\": \"https://github.com/breatheco-de/numpy-tutorial-exercises/blob/master/.learn/assets/preview.jpeg?raw=true\",\n    \"repository\": \"https://github.com/breatheco-de/numpy-tutorial-exercises\",\n    \"grading\": \"incremental\",\n    \"difficulty\": \"intermediate\",\n    \"duration\": 10,\n    \"description\": {\n        \"us\": \"This interactive tutorial will help you become familiar on it, master the most used functionalities and help you clean up your first datasets\",\n        \"es\": \"Este tutorial interactivo te ayudar√° a familiarizarte con Numpy, dominar las funcionalidades m√°s usadas y a limpiar tus primeros datasets.\"\n    },\n    \"title\": {\n        \"us\": \"Numpy Tutorial Exercises\",\n        \"es\": \"Tutorial Interactivo de Numpy\"\n    },\n    \"slug\": \"numpy-exercises\",\n    \"editor\": {\n        \"version\": \"4.0.0\"\n    }\n}\n`\n      ---\n      \n      ---This is the current exercise instructions:\n      # `015` Mean Value\n\n## üìù Instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con 10 valores aleatorios.\n\n2. Encuentra el valor medio e impr√≠melo en la consola.\n\n## üí° Pista:\n\n+ El m√©todo `mean()` retorna el valor medio en un array. Puedes leer m√°s de este m√©todo en este link: https://numpy.org/doc/stable/reference/generated/numpy.mean.html\n\n      ---\n      \n      <MANDATORY FOR AI: The user's set up the application in \"es\" language, give your feedback in \"es\" language, please.>\n\n      \nSome tests didn't passed, these are the tests logs: ============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-7.3.1, pluggy-1.0.0\nrootdir: /workspaces/numpy-tutorial-exercises\nplugins: testdox-3.1.0\ncollected 4 items\n\n.learn/exercises/015-mean-value/test.py .F..                             [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_print __________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7dc9ee741ed0>\n\n    @pytest.mark.it('The output should be the mean value of the array')\n    def test_print(capsys):\n        import app\n        captured = capsys.readouterr()\n>       assert captured.out == f'{app.arr.mean()}\\n'\nE       AssertionError: assert '1.24.2\\n[0. ...82175086629\\n' == '0.4616182175086629\\n'\nE         + 1.24.2\nE         + [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\nE         + 80\nE         + add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\nE         + \nE         + Add arguments element-wise.\nE         + ...\nE         \nE         ...Full output truncated (66 lines hidden), use '-vv' to show\n\n.learn/exercises/015-mean-value/test.py:15: AssertionError\n=========================== short test summary info ============================\nFAILED .learn/exercises/015-mean-value/test.py::test_print - AssertionError: assert '1.24.2\\n[0. ...82175086629\\n' == '0.461618217508662...\n========================= 1 failed, 3 passed in 0.14s ==========================\n,\n\n   \n          Your code must to comply with the following tests: \n\n     x (fail) 0. The output should be the mean value of the array \n\n","ending_at":1726264835508,"ai_response":"Parece que el problema radica en que tu c√≥digo est√° imprimiendo m√°s informaci√≥n de la necesaria. El test espera que solo imprimas el valor medio del array, pero tu c√≥digo est√° imprimiendo varias cosas adicionales.\n\nVamos a enfocarnos en los pasos espec√≠ficos que necesitas seguir para cumplir con las instrucciones:\n\n1. Crea una variable llamada `arr` cuyo valor debe ser un array con 10 valores aleatorios.\n2. Encuentra el valor medio e impr√≠melo en la consola.\n\nObserva que el c√≥digo actual tiene muchas impresiones adicionales que no son necesarias para esta tarea. Vamos a simplificarlo:\n\n1. Importa `numpy` como `np`.\n2. Crea un array con 10 valores aleatorios y as√≠gnalo a la variable `arr`.\n3. Calcula el valor medio del array usando el m√©todo `mean()`.\n4. Imprime solo el valor medio.\n\n¬øC√≥mo podr√≠as modificar tu c√≥digo para que solo imprima el valor medio del array?"}],"compilations":[{"stderr":"","stdout":"MS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIA==","signal":"SIGTERM","memoryUsage":524288,"cpuUsage":4558,"errorType":"run-time","starting_at":1726264702115,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQoKaW1wb3J0IG51bXB5IGFzIG5wCgphcnIgPSBucC5yYW5kb20ucmFuZG9tKDEwKQoKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264702321,"exit_code":null}],"tests":[{"starting_at":1726264250297,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264250768,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmZlZjI5YTVmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4zMzI2NjAwMTExOVxuJyA9PSAnMC4zMDc4NTMzMjY2MDAxMTE5XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uMzMyNjYwMDExMTlcbicgPT0gJzAuMzA3ODUzMzI2NjAwMTExLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YmZlZjI5YTVmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4zMzI2NjAwMTExOVxuJyA9PSAnMC4zMDc4NTMzMjY2MDAxMTE5XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uMzMyNjYwMDExMTlcbicgPT0gJzAuMzA3ODUzMzI2NjAwMTExLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264275863,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1lYW4oNSkp","ended_at":1726264276317,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726264324159,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1lYW4oNSkp","ended_at":1726264324590,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726264415603,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQphcnI9bnAucmFuZG9tLnJhbmQoMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726264416016,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3N2U5ZWY4MDFmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi40Nzk5NTUwMTk5NlxuJyA9PSAnMC40NTI4Mjg0Nzk5NTUwMTk5NlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgMS4yNC4yG1swbQobWzFtG1szMW1FICAgICAgICAgKyBbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dG1swbQobWzFtG1szMW1FICAgICAgICAgKyA4MBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkbWzBtChtbMW0bWzMxbUUgICAgICAgICArIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuG1swbQobWzFtG1szMW1FICAgICAgICAgKyAuLi4bWzBtChtbMW0bWzMxbUUgICAgICAgICAbWzBtChtbMW0bWzMxbUUgICAgICAgICAuLi5GdWxsIG91dHB1dCB0cnVuY2F0ZWQgKDY2IGxpbmVzIGhpZGRlbiksIHVzZSAnLXZ2JyB0byBzaG93G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5G1swbToxNTogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJzEuMjQuMlxuWzAuIC4uLjQ3OTk1NTAxOTk2XG4nID09ICcwLjQ1MjgyODQ3OTk1NTAxOS4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3N2U5ZWY4MDFmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi40Nzk5NTUwMTk5NlxuJyA9PSAnMC40NTI4Mjg0Nzk5NTUwMTk5NlxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgMS4yNC4yG1swbQobWzFtG1szMW1FICAgICAgICAgKyBbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dG1swbQobWzFtG1szMW1FICAgICAgICAgKyA4MBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkbWzBtChtbMW0bWzMxbUUgICAgICAgICArIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuG1swbQobWzFtG1szMW1FICAgICAgICAgKyAuLi4bWzBtChtbMW0bWzMxbUUgICAgICAgICAbWzBtChtbMW0bWzMxbUUgICAgICAgICAuLi5GdWxsIG91dHB1dCB0cnVuY2F0ZWQgKDY2IGxpbmVzIGhpZGRlbiksIHVzZSAnLXZ2JyB0byBzaG93G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5G1swbToxNTogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJzEuMjQuMlxuWzAuIC4uLjQ3OTk1NTAxOTk2XG4nID09ICcwLjQ1MjgyODQ3OTk1NTAxOS4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMTRzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lYW4gdmFsdWUgb2YgdGhlIGFycmF5G1szOW0gCgo=","exit_code":1},{"starting_at":1726264491780,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264492255,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWMwMTFmZjFmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4xODczOTE2OTgyNVxuJyA9PSAnMC40NzcxMzcxODczOTE2OTgyNVxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgMS4yNC4yG1swbQobWzFtG1szMW1FICAgICAgICAgKyBbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dG1swbQobWzFtG1szMW1FICAgICAgICAgKyA4MBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkbWzBtChtbMW0bWzMxbUUgICAgICAgICArIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuG1swbQobWzFtG1szMW1FICAgICAgICAgKyAuLi4bWzBtChtbMW0bWzMxbUUgICAgICAgICAbWzBtChtbMW0bWzMxbUUgICAgICAgICAuLi5GdWxsIG91dHB1dCB0cnVuY2F0ZWQgKDY2IGxpbmVzIGhpZGRlbiksIHVzZSAnLXZ2JyB0byBzaG93G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5G1swbToxNTogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJzEuMjQuMlxuWzAuIC4uLjE4NzM5MTY5ODI1XG4nID09ICcwLjQ3NzEzNzE4NzM5MTY5OC4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMThzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MWMwMTFmZjFmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4xODczOTE2OTgyNVxuJyA9PSAnMC40NzcxMzcxODczOTE2OTgyNVxuJxtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgMS4yNC4yG1swbQobWzFtG1szMW1FICAgICAgICAgKyBbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dG1swbQobWzFtG1szMW1FICAgICAgICAgKyA4MBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkbWzBtChtbMW0bWzMxbUUgICAgICAgICArIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuG1swbQobWzFtG1szMW1FICAgICAgICAgKyAuLi4bWzBtChtbMW0bWzMxbUUgICAgICAgICAbWzBtChtbMW0bWzMxbUUgICAgICAgICAuLi5GdWxsIG91dHB1dCB0cnVuY2F0ZWQgKDY2IGxpbmVzIGhpZGRlbiksIHVzZSAnLXZ2JyB0byBzaG93G1swbQoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5G1swbToxNTogQXNzZXJ0aW9uRXJyb3IKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIEFzc2VydGlvbkVycm9yOiBhc3NlcnQgJzEuMjQuMlxuWzAuIC4uLjE4NzM5MTY5ODI1XG4nID09ICcwLjQ3NzEzNzE4NzM5MTY5OC4uLgobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTMgcGFzc2VkG1swbRtbMzFtIGluIDAuMThzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIG91dHB1dCBzaG91bGQgYmUgdGhlIG1lYW4gdmFsdWUgb2YgdGhlIGFycmF5G1szOW0gCgo=","exit_code":1},{"starting_at":1726264533504,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyID0gbnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264533927,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDBhNTZmNzFmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4xMTE2OTQyNzM3MVxuJyA9PSAnMC41ODgzMTExNjk0MjczNzFcbicbWzBtChtbMW0bWzMxbUUgICAgICAgICArIDEuMjQuMhtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgODAbWzBtChtbMW0bWzMxbUUgICAgICAgICArIGFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pG1swbQobWzFtG1szMW1FICAgICAgICAgKyAbWzBtChtbMW0bWzMxbUUgICAgICAgICArIEFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgLi4uG1swbQobWzFtG1szMW1FICAgICAgICAgG1swbQobWzFtG1szMW1FICAgICAgICAgLi4uRnVsbCBvdXRwdXQgdHJ1bmNhdGVkICg2NiBsaW5lcyBoaWRkZW4pLCB1c2UgJy12dicgdG8gc2hvdxtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weRtbMG06MTU6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4xMTE2OTQyNzM3MVxuJyA9PSAnMC41ODgzMTExNjk0MjczNzFcbicKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZDBhNTZmNzFmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4xMTE2OTQyNzM3MVxuJyA9PSAnMC41ODgzMTExNjk0MjczNzFcbicbWzBtChtbMW0bWzMxbUUgICAgICAgICArIDEuMjQuMhtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgODAbWzBtChtbMW0bWzMxbUUgICAgICAgICArIGFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pG1swbQobWzFtG1szMW1FICAgICAgICAgKyAbWzBtChtbMW0bWzMxbUUgICAgICAgICArIEFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgLi4uG1swbQobWzFtG1szMW1FICAgICAgICAgG1swbQobWzFtG1szMW1FICAgICAgICAgLi4uRnVsbCBvdXRwdXQgdHJ1bmNhdGVkICg2NiBsaW5lcyBoaWRkZW4pLCB1c2UgJy12dicgdG8gc2hvdxtbMG0KChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weRtbMG06MTU6IEFzc2VydGlvbkVycm9yChtbMzZtG1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PSBzaG9ydCB0ZXN0IHN1bW1hcnkgaW5mbyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5OjobWzFtdGVzdF9wcmludBtbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4xMTE2OTQyNzM3MVxuJyA9PSAnMC41ODgzMTExNjk0MjczNzFcbicKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0zIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE1cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZWFuIHZhbHVlIG9mIHRoZSBhcnJheRtbMzltIAoK","exit_code":1},{"starting_at":1726264559795,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyID0gbnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264560215,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZWFmNGVlMDVmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4wMjc1MzgzMzY0NVxuJyA9PSAnMC40MjYxOTAyNzUzODMzNjQ1XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uMDI3NTM4MzM2NDVcbicgPT0gJzAuNDI2MTkwMjc1MzgzMzY0Li4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZWFmNGVlMDVmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4wMjc1MzgzMzY0NVxuJyA9PSAnMC40MjYxOTAyNzUzODMzNjQ1XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uMDI3NTM4MzM2NDVcbicgPT0gJzAuNDI2MTkwMjc1MzgzMzY0Li4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264638776,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQoKaW1wb3J0IG51bXB5IGFzIG5wCgphcnIgPSBucC5yYW5kb20ucmFuZG9tKDEwKQoKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264639199,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YzAzMzllMmRmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi42OTEzMjcxNjAxMlxuJyA9PSAnMC41NjgxNzY5MTMyNzE2MDEyXG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uNjkxMzI3MTYwMTJcbicgPT0gJzAuNTY4MTc2OTEzMjcxNjAxLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3YzAzMzllMmRmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi42OTEzMjcxNjAxMlxuJyA9PSAnMC41NjgxNzY5MTMyNzE2MDEyXG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uNjkxMzI3MTYwMTJcbicgPT0gJzAuNTY4MTc2OTEzMjcxNjAxLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264705952,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQoKaW1wb3J0IG51bXB5IGFzIG5wCgphcnIgPSBucC5yYW5kb20ucmFuZG9tKDEwKQoKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264706363,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZTg4ODBjODlmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4yNDkwMTIzNDkxOVxuJyA9PSAnMC41NTkyMDI0OTAxMjM0OTE5XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uMjQ5MDEyMzQ5MTlcbicgPT0gJzAuNTU5MjAyNDkwMTIzNDkxLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZTg4ODBjODlmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi4yNDkwMTIzNDkxOVxuJyA9PSAnMC41NTkyMDI0OTAxMjM0OTE5XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uMjQ5MDEyMzQ5MTlcbicgPT0gJzAuNTU5MjAyNDkwMTIzNDkxLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264830883,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQoKaW1wb3J0IG51bXB5IGFzIG5wCgphcnIgPSBucC5yYW5kb20ucmFuZG9tKDEwKQoKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264831295,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZGM5ZWU3NDFlZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi44MjE3NTA4NjYyOVxuJyA9PSAnMC40NjE2MTgyMTc1MDg2NjI5XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uODIxNzUwODY2MjlcbicgPT0gJzAuNDYxNjE4MjE3NTA4NjYyLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3ZGM5ZWU3NDFlZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi44MjE3NTA4NjYyOVxuJyA9PSAnMC40NjE2MTgyMTc1MDg2NjI5XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uODIxNzUwODY2MjlcbicgPT0gJzAuNDYxNjE4MjE3NTA4NjYyLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264872800,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQoKcHJpbnQoYXJyLm1lYW4oKSk=","ended_at":1726264873236,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3N2VmOGZhZGRlZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi41MzUxNDkwMzg2MlxuJyA9PSAnMC41Njc5ODUzNTE0OTAzODYyXG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uNTM1MTQ5MDM4NjJcbicgPT0gJzAuNTY3OTg1MzUxNDkwMzg2Li4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3N2VmOGZhZGRlZDA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi41MzUxNDkwMzg2MlxuJyA9PSAnMC41Njc5ODUzNTE0OTAzODYyXG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uNTM1MTQ5MDM4NjJcbicgPT0gJzAuNTY3OTg1MzUxNDkwMzg2Li4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264879775,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQpwcmludChhcnIubWVhbigpKQ==","ended_at":1726264880184,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MzA3YTI5ZjVmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi44NjE2NzE5ODMzNlxuJyA9PSAnMC42NzUwOTg2MTY3MTk4MzM2XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uODYxNjcxOTgzMzZcbicgPT0gJzAuNjc1MDk4NjE2NzE5ODMzLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCg==","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3MzA3YTI5ZjVmOTA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKICAgICAgICBpbXBvcnQgYXBwCiAgICAgICAgY2FwdHVyZWQgPSBjYXBzeXMucmVhZG91dGVycigpCj4gICAgICAgYXNzZXJ0IGNhcHR1cmVkLm91dCA9PSBmJ3thcHAuYXJyLm1lYW4oKX1cbicKG1sxbRtbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICcxLjI0LjJcblswLiAuLi44NjE2NzE5ODMzNlxuJyA9PSAnMC42NzUwOTg2MTY3MTk4MzM2XG4nG1swbQobWzFtG1szMW1FICAgICAgICAgKyAxLjI0LjIbWzBtChtbMW0bWzMxbUUgICAgICAgICArIFswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0bWzBtChtbMW0bWzMxbUUgICAgICAgICArIDgwG1swbQobWzFtG1szMW1FICAgICAgICAgKyBhZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKRtbMG0KG1sxbRtbMzFtRSAgICAgICAgICsgG1swbQobWzFtG1szMW1FICAgICAgICAgKyBBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4bWzBtChtbMW0bWzMxbUUgICAgICAgICArIC4uLhtbMG0KG1sxbRtbMzFtRSAgICAgICAgIBtbMG0KG1sxbRtbMzFtRSAgICAgICAgIC4uLkZ1bGwgb3V0cHV0IHRydW5jYXRlZCAoNjYgbGluZXMgaGlkZGVuKSwgdXNlICctdnYnIHRvIHNob3cbWzBtCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjE1OiBBc3NlcnRpb25FcnJvcgobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gQXNzZXJ0aW9uRXJyb3I6IGFzc2VydCAnMS4yNC4yXG5bMC4gLi4uODYxNjcxOTgzMzZcbicgPT0gJzAuNjc1MDk4NjE2NzE5ODMzLi4uChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMyBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNHMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bSAKCg==","exit_code":1},{"starting_at":1726264928310,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyPW5wLnJhbm9kbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726264928783,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726264967800,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyPW5wLnJhbm9kbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726264968280,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265000614,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKdmFycz1hcnIKYXJyPW5wLnJhbm9kbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726265001134,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265570316,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKI2Fycj1ucC5yYW5vZG0ucmFuZG9tKDEwKQpwcmludChhcnIubWVhbigpKQ==","ended_at":1726265570768,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265634485,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKI2Fycj1ucC5yYW5vZG0ucmFuZG9tKDEwKQpwcmludChhcnIubWVhbigpKQ==","ended_at":1726265635014,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265647486,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQojaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5yYW5vZG0ucmFuZG9tKDEwKQpwcmludChhcnIubWVhbigpKQ==","ended_at":1726265647940,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265663727,"source_code":"aW1wb3J0IG51bXB5IGFzIG5wCnByaW50KG5wLl9fdmVyc2lvbl9fKQpwcmludChucC56ZXJvcygxMCkpCnplcm9zPW5wLnplcm9zKDEwKSAKbWVtX3NpemU9emVyb3MuaXRlbXNpemUgKiB6ZXJvcy5zaXplCnByaW50KG1lbV9zaXplKQpwcmludChucC5pbmZvKG5wLmFkZCkpCmFyciA9IG5wLnplcm9zKDEwKQphcnJbNF09MQpwcmludChhcnIpCmFycj1ucC5hcmFuZ2UoMTAsNTApCnByaW50KGFycikKdmVjdG9yPW5wLmFyYW5nZSgxMCkKdmVjdG9yX2ludmVydGlkbz12ZWN0b3JbOjotMV0KcHJpbnQodmVjdG9yX2ludmVydGlkbykKaW1wb3J0IG51bXB5IGFzIG5wCmFycj1ucC5hcmFuZ2UoMCw5KQptYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQpwcmludChtYXRyaXopCmFyciA9IG5wLmFycmF5KFsxLDIsMCwwLDQsMF0pCnByaW50KG5wLm5vbnplcm8oYXJyKSkKbWF0cml6PW5wLmV5ZSgzLDMpCnByaW50KG1hdHJpeikKYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKcHJpbnQoYXJyKQphcnI9bnAucmFuZG9tLnJhbmRvbSgxMCkKcHJpbnQoYXJyLm1heCgpKQojYXJyPW5wLnJhbm9kbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726265664183,"stdout":"","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzFtRhtbMG0bWzMxbUYbWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OGJjMGQ4NWRmNjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjEzOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS9hcHAucHkbWzBtOjI5OiBpbiA8bW9kdWxlPgogICAgcHJpbnQoYXJyLm1lYW4oNSkpChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL19tZXRob2RzLnB5G1swbToxNjk6IGluIF9tZWFuCiAgICByY291bnQgPSBfY291bnRfcmVkdWNlX2l0ZW1zKGFyciwgYXhpcywga2VlcGRpbXM9a2VlcGRpbXMsIHdoZXJlPXdoZXJlKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJyID0gYXJyYXkoWzAuMjU3OTY0NjEsIDAuMDc1MzQ2MTksIDAuNTQzMTY5NDUsIDAuODY2NDYzOTMsIDAuNDUwNTA5NjEsCiAgICAgICAwLjQwOTk1MjA4LCAwLjk4MTE4NjA4LCAwLjc2NzgxNTAyLCAwLjA4NTMwMDk0LCAwLjk3ODY4NDExXSkKYXhpcyA9ICg1LCksIGtlZXBkaW1zID0gRmFsc2UsIHdoZXJlID0gVHJ1ZQoKICAgIGRlZiBfY291bnRfcmVkdWNlX2l0ZW1zKGFyciwgYXhpcywga2VlcGRpbXM9RmFsc2UsIHdoZXJlPVRydWUpOgogICAgICAgICMgZmFzdC1wYXRoIGZvciB0aGUgZGVmYXVsdCBjYXNlCiAgICAgICAgaWYgd2hlcmUgaXMgVHJ1ZToKICAgICAgICAgICAgIyBubyBib29sZWFuIG1hc2sgZ2l2ZW4sIGNhbGN1bGF0ZSBpdGVtcyBhY2NvcmRpbmcgdG8gYXhpcwogICAgICAgICAgICBpZiBheGlzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBheGlzID0gdHVwbGUocmFuZ2UoYXJyLm5kaW0pKQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKGF4aXMsIHR1cGxlKToKICAgICAgICAgICAgICAgIGF4aXMgPSAoYXhpcywpCiAgICAgICAgICAgIGl0ZW1zID0gMQogICAgICAgICAgICBmb3IgYXggaW4gYXhpczoKPiAgICAgICAgICAgICAgIGl0ZW1zICo9IGFyci5zaGFwZVttdS5ub3JtYWxpemVfYXhpc19pbmRleChheCwgYXJyLm5kaW0pXQobWzFtG1szMW1FICAgICAgICAgICAgICAgbnVtcHkuQXhpc0Vycm9yOiBheGlzIDUgaXMgb3V0IG9mIGJvdW5kcyBmb3IgYXJyYXkgb2YgZGltZW5zaW9uIDEbWzBtCgobWzFtG1szMW0vaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvY29yZS9fbWV0aG9kcy5weRtbMG06Nzc6IEF4aXNFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQpbOSA4IDcgNiA1IDQgMyAyIDEgMF0KW1swIDEgMl0KIFszIDQgNV0KIFs2IDcgOF1dCihhcnJheShbMCwgMSwgNF0pLCkKW1sxLiAwLiAwLl0KIFswLiAxLiAwLl0KIFswLiAwLiAxLl1dClswLjYzMjM2NzggIDAuMTU5MTI2MzcgMC44NzkyMTYwMV0KMC43NDc4MjEzNzY0Mjc0NDA1ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9hcnJfZXhpc3RzIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKICAgIEBweXRlc3QubWFyay5pdCgnWW91IHNob3VsZCBjcmVhdGUgYSB2YXJpYWJsZSBuYW1lZCBhcnInKQogICAgZGVmIHRlc3RfYXJyX2V4aXN0cygpOgogICAgICAgIHRyeToKPiAgICAgICAgICAgZnJvbSBhcHAgaW1wb3J0IGFycgoKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5G1swbToyMDogCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvYXBwLnB5G1swbToyOTogaW4gPG1vZHVsZT4KICAgIHByaW50KGFyci5tZWFuKDUpKQobWzFtG1szMW0vaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvY29yZS9fbWV0aG9kcy5weRtbMG06MTY5OiBpbiBfbWVhbgogICAgcmNvdW50ID0gX2NvdW50X3JlZHVjZV9pdGVtcyhhcnIsIGF4aXMsIGtlZXBkaW1zPWtlZXBkaW1zLCB3aGVyZT13aGVyZSkKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKCmFyciA9IGFycmF5KFswLjUwNjU0NTQyLCAwLjgyMzMwNDg2LCAwLjQ4MjUxOTY4LCAwLjM5NTE0NTM2LCAwLjY2ODMzMzI4LAogICAgICAgMC4xNTkwNzcxMywgMC4yNzgwOTkxOCwgMC4xNjI1ODYzICwgMC40OTA5NTMzMywgMC42OTQzODE5MV0pCmF4aXMgPSAoNSwpLCBrZWVwZGltcyA9IEZhbHNlLCB3aGVyZSA9IFRydWUKCiAgICBkZWYgX2NvdW50X3JlZHVjZV9pdGVtcyhhcnIsIGF4aXMsIGtlZXBkaW1zPUZhbHNlLCB3aGVyZT1UcnVlKToKICAgICAgICAjIGZhc3QtcGF0aCBmb3IgdGhlIGRlZmF1bHQgY2FzZQogICAgICAgIGlmIHdoZXJlIGlzIFRydWU6CiAgICAgICAgICAgICMgbm8gYm9vbGVhbiBtYXNrIGdpdmVuLCBjYWxjdWxhdGUgaXRlbXMgYWNjb3JkaW5nIHRvIGF4aXMKICAgICAgICAgICAgaWYgYXhpcyBpcyBOb25lOgogICAgICAgICAgICAgICAgYXhpcyA9IHR1cGxlKHJhbmdlKGFyci5uZGltKSkKICAgICAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShheGlzLCB0dXBsZSk6CiAgICAgICAgICAgICAgICBheGlzID0gKGF4aXMsKQogICAgICAgICAgICBpdGVtcyA9IDEKICAgICAgICAgICAgZm9yIGF4IGluIGF4aXM6Cj4gICAgICAgICAgICAgICBpdGVtcyAqPSBhcnIuc2hhcGVbbXUubm9ybWFsaXplX2F4aXNfaW5kZXgoYXgsIGFyci5uZGltKV0KG1sxbRtbMzFtRSAgICAgICAgICAgICAgIG51bXB5LkF4aXNFcnJvcjogYXhpcyA1IGlzIG91dCBvZiBib3VuZHMgZm9yIGFycmF5IG9mIGRpbWVuc2lvbiAxG1swbQoKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvX21ldGhvZHMucHkbWzBtOjc3OiBBeGlzRXJyb3IKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2FwdHVyZWQgc3Rkb3V0IGNhbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KMS4yNC4yClswLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLiAwLl0KODAKYWRkKHgxLCB4MiwgLywgb3V0PU5vbmUsICosIHdoZXJlPVRydWUsIGNhc3Rpbmc9J3NhbWVfa2luZCcsIG9yZGVyPSdLJywgZHR5cGU9Tm9uZSwgc3Vib2s9VHJ1ZVssIHNpZ25hdHVyZSwgZXh0b2JqXSkKCkFkZCBhcmd1bWVudHMgZWxlbWVudC13aXNlLgoKUGFyYW1ldGVycwotLS0tLS0tLS0tCngxLCB4MiA6IGFycmF5X2xpa2UKICAgIFRoZSBhcnJheXMgdG8gYmUgYWRkZWQuCiAgICBJZiBgYHgxLnNoYXBlICE9IHgyLnNoYXBlYGAsIHRoZXkgbXVzdCBiZSBicm9hZGNhc3RhYmxlIHRvIGEgY29tbW9uCiAgICBzaGFwZSAod2hpY2ggYmVjb21lcyB0aGUgc2hhcGUgb2YgdGhlIG91dHB1dCkuCm91dCA6IG5kYXJyYXksIE5vbmUsIG9yIHR1cGxlIG9mIG5kYXJyYXkgYW5kIE5vbmUsIG9wdGlvbmFsCiAgICBBIGxvY2F0aW9uIGludG8gd2hpY2ggdGhlIHJlc3VsdCBpcyBzdG9yZWQuIElmIHByb3ZpZGVkLCBpdCBtdXN0IGhhdmUKICAgIGEgc2hhcGUgdGhhdCB0aGUgaW5wdXRzIGJyb2FkY2FzdCB0by4gSWYgbm90IHByb3ZpZGVkIG9yIE5vbmUsCiAgICBhIGZyZXNobHktYWxsb2NhdGVkIGFycmF5IGlzIHJldHVybmVkLiBBIHR1cGxlIChwb3NzaWJsZSBvbmx5IGFzIGEKICAgIGtleXdvcmQgYXJndW1lbnQpIG11c3QgaGF2ZSBsZW5ndGggZXF1YWwgdG8gdGhlIG51bWJlciBvZiBvdXRwdXRzLgp3aGVyZSA6IGFycmF5X2xpa2UsIG9wdGlvbmFsCiAgICBUaGlzIGNvbmRpdGlvbiBpcyBicm9hZGNhc3Qgb3ZlciB0aGUgaW5wdXQuIEF0IGxvY2F0aW9ucyB3aGVyZSB0aGUKICAgIGNvbmRpdGlvbiBpcyBUcnVlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCBiZSBzZXQgdG8gdGhlIHVmdW5jIHJlc3VsdC4KICAgIEVsc2V3aGVyZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgcmV0YWluIGl0cyBvcmlnaW5hbCB2YWx1ZS4KICAgIE5vdGUgdGhhdCBpZiBhbiB1bmluaXRpYWxpemVkIGBvdXRgIGFycmF5IGlzIGNyZWF0ZWQgdmlhIHRoZSBkZWZhdWx0CiAgICBgYG91dD1Ob25lYGAsIGxvY2F0aW9ucyB3aXRoaW4gaXQgd2hlcmUgdGhlIGNvbmRpdGlvbiBpcyBGYWxzZSB3aWxsCiAgICByZW1haW4gdW5pbml0aWFsaXplZC4KKiprd2FyZ3MKICAgIEZvciBvdGhlciBrZXl3b3JkLW9ubHkgYXJndW1lbnRzLCBzZWUgdGhlCiAgICA6cmVmOmB1ZnVuYyBkb2NzIDx1ZnVuY3Mua3dhcmdzPmAuCgpSZXR1cm5zCi0tLS0tLS0KYWRkIDogbmRhcnJheSBvciBzY2FsYXIKICAgIFRoZSBzdW0gb2YgYHgxYCBhbmQgYHgyYCwgZWxlbWVudC13aXNlLgogICAgVGhpcyBpcyBhIHNjYWxhciBpZiBib3RoIGB4MWAgYW5kIGB4MmAgYXJlIHNjYWxhcnMuCgpOb3RlcwotLS0tLQpFcXVpdmFsZW50IHRvIGB4MWAgKyBgeDJgIGluIHRlcm1zIG9mIGFycmF5IGJyb2FkY2FzdGluZy4KCkV4YW1wbGVzCi0tLS0tLS0tCj4+PiBucC5hZGQoMS4wLCA0LjApCjUuMAo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IG5wLmFkZCh4MSwgeDIpCmFycmF5KFtbICAwLiwgICAyLiwgICA0Ll0sCiAgICAgICBbICAzLiwgICA1LiwgICA3Ll0sCiAgICAgICBbICA2LiwgICA4LiwgIDEwLl1dKQoKVGhlIGBgK2BgIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGFzIGEgc2hvcnRoYW5kIGZvciBgYG5wLmFkZGBgIG9uIG5kYXJyYXlzLgoKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiB4MSArIHgyCmFycmF5KFtbIDAuLCAgMi4sICA0Ll0sCiAgICAgICBbIDMuLCAgNS4sICA3Ll0sCiAgICAgICBbIDYuLCAgOC4sIDEwLl1dKQpOb25lClswLiAwLiAwLiAwLiAxLiAwLiAwLiAwLiAwLiAwLl0KWzEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzCiAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OV0KWzkgOCA3IDYgNSA0IDMgMiAxIDBdCltbMCAxIDJdCiBbMyA0IDVdCiBbNiA3IDhdXQooYXJyYXkoWzAsIDEsIDRdKSwpCltbMS4gMC4gMC5dCiBbMC4gMS4gMC5dCiBbMC4gMC4gMS5dXQpbMC43MDEwODI4NCAwLjk2MTgwNTczIDAuMjM5NTY4NDhdCjAuOTE1MzEzMzI0NDY5MzA4NgobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyB0ZXN0X2Fycl92YWx1ZSBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXxtbMG0KCmNhcHN5cyA9IDxfcHl0ZXN0LmNhcHR1cmUuQ2FwdHVyZUZpeHR1cmUgb2JqZWN0IGF0IDB4NzhiYzBkMjA2NDEwPgoKICAgIEBweXRlc3QubWFyay5pdCgnVGhlIGFycmF5IHNob3VsZCBoYXZlIHRlbiByYW5kb20gdmFsdWVzJykKICAgIGRlZiB0ZXN0X2Fycl92YWx1ZShjYXBzeXMpOgo+ICAgICAgIGZyb20gYXBwIGltcG9ydCBhcnIKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weRtbMG06MjY6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL2FwcC5weRtbMG06Mjk6IGluIDxtb2R1bGU+CiAgICBwcmludChhcnIubWVhbig1KSkKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvX21ldGhvZHMucHkbWzBtOjE2OTogaW4gX21lYW4KICAgIHJjb3VudCA9IF9jb3VudF9yZWR1Y2VfaXRlbXMoYXJyLCBheGlzLCBrZWVwZGltcz1rZWVwZGltcywgd2hlcmU9d2hlcmUpCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgphcnIgPSBhcnJheShbMC4wNjkxNDY1MSwgMC45NDc2NTQ1NCwgMC43MTIwNTgxMiwgMC41OTA0NzUyMywgMC43MTkxNTg0NSwKICAgICAgIDAuNjI4MjMzMDMsIDAuNjk3NzIzMjYsIDAuMzc2NjA1NiAsIDAuNzEzMjc2NTMsIDAuNTc3MDQ3MTddKQpheGlzID0gKDUsKSwga2VlcGRpbXMgPSBGYWxzZSwgd2hlcmUgPSBUcnVlCgogICAgZGVmIF9jb3VudF9yZWR1Y2VfaXRlbXMoYXJyLCBheGlzLCBrZWVwZGltcz1GYWxzZSwgd2hlcmU9VHJ1ZSk6CiAgICAgICAgIyBmYXN0LXBhdGggZm9yIHRoZSBkZWZhdWx0IGNhc2UKICAgICAgICBpZiB3aGVyZSBpcyBUcnVlOgogICAgICAgICAgICAjIG5vIGJvb2xlYW4gbWFzayBnaXZlbiwgY2FsY3VsYXRlIGl0ZW1zIGFjY29yZGluZyB0byBheGlzCiAgICAgICAgICAgIGlmIGF4aXMgaXMgTm9uZToKICAgICAgICAgICAgICAgIGF4aXMgPSB0dXBsZShyYW5nZShhcnIubmRpbSkpCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoYXhpcywgdHVwbGUpOgogICAgICAgICAgICAgICAgYXhpcyA9IChheGlzLCkKICAgICAgICAgICAgaXRlbXMgPSAxCiAgICAgICAgICAgIGZvciBheCBpbiBheGlzOgo+ICAgICAgICAgICAgICAgaXRlbXMgKj0gYXJyLnNoYXBlW211Lm5vcm1hbGl6ZV9heGlzX2luZGV4KGF4LCBhcnIubmRpbSldChtbMW0bWzMxbUUgICAgICAgICAgICAgICBudW1weS5BeGlzRXJyb3I6IGF4aXMgNSBpcyBvdXQgb2YgYm91bmRzIGZvciBhcnJheSBvZiBkaW1lbnNpb24gMRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL19tZXRob2RzLnB5G1swbTo3NzogQXhpc0Vycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KKGFycmF5KFswLCAxLCA0XSksKQpbWzEuIDAuIDAuXQogWzAuIDEuIDAuXQogWzAuIDAuIDEuXV0KWzAuNTM2Mjk3NzMgMC41NDkyMjk0NCAwLjc3MjIzOTM3XQowLjk5NzkzMTAzMDcyNTQwNQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfcHJpbnQbWzBtIC0gbnVtcHkuQXhpc0Vycm9yOiBheGlzIDUgaXMgb3V0IG9mIGJvdW5kcyBmb3IgYXJyYXkgb2YgZGltZW5zaW9uIDEKG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfYXJyX2V4aXN0cxtbMG0gLSBudW1weS5BeGlzRXJyb3I6IGF4aXMgNSBpcyBvdXQgb2YgYm91bmRzIGZvciBhcnJheSBvZiBkaW1lbnNpb24gMQobWzMxbUZBSUxFRBtbMG0gLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS90ZXN0LnB5OjobWzFtdGVzdF9hcnJfdmFsdWUbWzBtIC0gbnVtcHkuQXhpc0Vycm9yOiBheGlzIDUgaXMgb3V0IG9mIGJvdW5kcyBmb3IgYXJyYXkgb2YgZGltZW5zaW9uIDEKG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTMgZmFpbGVkG1swbSwgG1szMm0xIHBhc3NlZBtbMG0bWzMxbSBpbiAwLjE4cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBvdXRwdXQgc2hvdWxkIGJlIHRoZSBtZWFuIHZhbHVlIG9mIHRoZSBhcnJheRtbMzltCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDEuIBtbMzdtWW91IHNob3VsZCBjcmVhdGUgYSB2YXJpYWJsZSBuYW1lZCBhcnIbWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAyLiAbWzM3bVRoZSBhcnJheSBzaG91bGQgaGF2ZSB0ZW4gcmFuZG9tIHZhbHVlcxtbMzltIAoK","exit_code":1},{"starting_at":1726265801313,"source_code":"I2ltcG9ydCBudW1weSBhcyBucAojcHJpbnQobnAuX192ZXJzaW9uX18pCiNwcmludChucC56ZXJvcygxMCkpCiN6ZXJvcz1ucC56ZXJvcygxMCkgCiNtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKI3ByaW50KG1lbV9zaXplKQojcHJpbnQobnAuaW5mbyhucC5hZGQpKQojYXJyID0gbnAuemVyb3MoMTApCiNhcnJbNF09MQojcHJpbnQoYXJyKQojYXJyPW5wLmFyYW5nZSgxMCw1MCkKI3ByaW50KGFycikKI3ZlY3Rvcj1ucC5hcmFuZ2UoMTApCiN2ZWN0b3JfaW52ZXJ0aWRvPXZlY3Rvcls6Oi0xXQojcHJpbnQodmVjdG9yX2ludmVydGlkbykKI2ltcG9ydCBudW1weSBhcyBucAojYXJyPW5wLmFyYW5nZSgwLDkpCiNtYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQojcHJpbnQobWF0cml6KQojYXJyID0gbnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKI3ByaW50KG5wLm5vbnplcm8oYXJyKSkKI21hdHJpej1ucC5leWUoMywzKQojcHJpbnQobWF0cml6KQojYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKI3ByaW50KGFycikKI2Fycj1ucC5yYW5kb20ucmFuZG9tKDEwKQpwcmludChhcnIubWF4KCkpCmFycj1ucC5yYW5vZG0ucmFuZG9tKDEwKQpwcmludChhcnIubWVhbigpKQ==","ended_at":1726265801743,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265838358,"source_code":"I2ltcG9ydCBudW1weSBhcyBucAojcHJpbnQobnAuX192ZXJzaW9uX18pCiNwcmludChucC56ZXJvcygxMCkpCiN6ZXJvcz1ucC56ZXJvcygxMCkgCiNtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKI3ByaW50KG1lbV9zaXplKQojcHJpbnQobnAuaW5mbyhucC5hZGQpKQojYXJyID0gbnAuemVyb3MoMTApCiNhcnJbNF09MQojcHJpbnQoYXJyKQojYXJyPW5wLmFyYW5nZSgxMCw1MCkKI3ByaW50KGFycikKI3ZlY3Rvcj1ucC5hcmFuZ2UoMTApCiN2ZWN0b3JfaW52ZXJ0aWRvPXZlY3Rvcls6Oi0xXQojcHJpbnQodmVjdG9yX2ludmVydGlkbykKI2ltcG9ydCBudW1weSBhcyBucAojYXJyPW5wLmFyYW5nZSgwLDkpCiNtYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQojcHJpbnQobWF0cml6KQojYXJyID0gbnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKI3ByaW50KG5wLm5vbnplcm8oYXJyKSkKI21hdHJpej1ucC5leWUoMywzKQojcHJpbnQobWF0cml6KQojYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKI3ByaW50KGFycikKI2Fycj1ucC5yYW5kb20ucmFuZG9tKDEwKQpwcmludChhcnIubWF4KCkpCmFycj1ucC5yYW5vZG0ucmFuZG9tKDEwKQpwcmludChhcnIubWVhbigpKQ==","ended_at":1726265838795,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265882456,"source_code":"I2ltcG9ydCBudW1weSBhcyBucAojcHJpbnQobnAuX192ZXJzaW9uX18pCiNwcmludChucC56ZXJvcygxMCkpCiN6ZXJvcz1ucC56ZXJvcygxMCkgCiNtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKI3ByaW50KG1lbV9zaXplKQojcHJpbnQobnAuaW5mbyhucC5hZGQpKQojYXJyID0gbnAuemVyb3MoMTApCiNhcnJbNF09MQojcHJpbnQoYXJyKQojYXJyPW5wLmFyYW5nZSgxMCw1MCkKI3ByaW50KGFycikKI3ZlY3Rvcj1ucC5hcmFuZ2UoMTApCiN2ZWN0b3JfaW52ZXJ0aWRvPXZlY3Rvcls6Oi0xXQojcHJpbnQodmVjdG9yX2ludmVydGlkbykKI2ltcG9ydCBudW1weSBhcyBucAojYXJyPW5wLmFyYW5nZSgwLDkpCiNtYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQojcHJpbnQobWF0cml6KQojYXJyID0gbnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKI3ByaW50KG5wLm5vbnplcm8oYXJyKSkKI21hdHJpej1ucC5leWUoMywzKQojcHJpbnQobWF0cml6KQojYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKI3ByaW50KGFycikKI2Fycj1ucC5yYW5kb20ucmFuZG9tKDEwKQojcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyPW5wLnJhbm9kbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726265882936,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726265921071,"source_code":"I2ltcG9ydCBudW1weSBhcyBucAojcHJpbnQobnAuX192ZXJzaW9uX18pCiNwcmludChucC56ZXJvcygxMCkpCiN6ZXJvcz1ucC56ZXJvcygxMCkgCiNtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKI3ByaW50KG1lbV9zaXplKQojcHJpbnQobnAuaW5mbyhucC5hZGQpKQojYXJyID0gbnAuemVyb3MoMTApCiNhcnJbNF09MQojcHJpbnQoYXJyKQojYXJyPW5wLmFyYW5nZSgxMCw1MCkKI3ByaW50KGFycikKI3ZlY3Rvcj1ucC5hcmFuZ2UoMTApCiN2ZWN0b3JfaW52ZXJ0aWRvPXZlY3Rvcls6Oi0xXQojcHJpbnQodmVjdG9yX2ludmVydGlkbykKI2ltcG9ydCBudW1weSBhcyBucAojYXJyPW5wLmFyYW5nZSgwLDkpCiNtYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQojcHJpbnQobWF0cml6KQojYXJyID0gbnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKI3ByaW50KG5wLm5vbnplcm8oYXJyKSkKI21hdHJpej1ucC5leWUoMywzKQojcHJpbnQobWF0cml6KQojYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKI3ByaW50KGFycikKI2Fycj1ucC5yYW5kb20ucmFuZG9tKDEwKQojcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyPW5wLnJhbm9kbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726265921541,"stdout":"","stderr":"","exit_code":1},{"starting_at":1726266245994,"source_code":"I2ltcG9ydCBudW1weSBhcyBucAojcHJpbnQobnAuX192ZXJzaW9uX18pCiNwcmludChucC56ZXJvcygxMCkpCiN6ZXJvcz1ucC56ZXJvcygxMCkgCiNtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKI3ByaW50KG1lbV9zaXplKQojcHJpbnQobnAuaW5mbyhucC5hZGQpKQojYXJyID0gbnAuemVyb3MoMTApCiNhcnJbNF09MQojcHJpbnQoYXJyKQojYXJyPW5wLmFyYW5nZSgxMCw1MCkKI3ByaW50KGFycikKI3ZlY3Rvcj1ucC5hcmFuZ2UoMTApCiN2ZWN0b3JfaW52ZXJ0aWRvPXZlY3Rvcls6Oi0xXQojcHJpbnQodmVjdG9yX2ludmVydGlkbykKI2ltcG9ydCBudW1weSBhcyBucAojYXJyPW5wLmFyYW5nZSgwLDkpCiNtYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQojcHJpbnQobWF0cml6KQojYXJyID0gbnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKI3ByaW50KG5wLm5vbnplcm8oYXJyKSkKI21hdHJpej1ucC5leWUoMywzKQojcHJpbnQobWF0cml6KQojYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKI3ByaW50KGFycikKI2Fycj1ucC5yYW5kb20ucmFuZG9tKDEwKQojcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyPW5wLnJhbmRvbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726266246442,"stdout":"","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvbnVtcHktdHV0b3JpYWwtZXhlcmNpc2VzCnBsdWdpbnM6IHRlc3Rkb3gtMy4xLjAKY29sbGVjdGVkIDQgaXRlbXMKCi5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weSAbWzMybS4bWzBtG1szMW1GG1swbRtbMzFtRhtbMG0bWzMxbUYbWzBtG1szMW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxMDAlXRtbMG0KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ChtbMzFtG1sxbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcmludCBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQoKY2Fwc3lzID0gPF9weXRlc3QuY2FwdHVyZS5DYXB0dXJlRml4dHVyZSBvYmplY3QgYXQgMHg3OTg3ZDI3MWRmNjA+CgogICAgQHB5dGVzdC5tYXJrLml0KCdUaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXknKQogICAgZGVmIHRlc3RfcHJpbnQoY2Fwc3lzKToKPiAgICAgICBpbXBvcnQgYXBwCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjEzOiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS9hcHAucHkbWzBtOjI5OiBpbiA8bW9kdWxlPgogICAgcHJpbnQoYXJyLm1lYW4oNSkpChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL19tZXRob2RzLnB5G1swbToxNjk6IGluIF9tZWFuCiAgICByY291bnQgPSBfY291bnRfcmVkdWNlX2l0ZW1zKGFyciwgYXhpcywga2VlcGRpbXM9a2VlcGRpbXMsIHdoZXJlPXdoZXJlKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJyID0gYXJyYXkoWzAuNTk3OTU2NzUsIDAuMjg3Njg5MjEsIDAuNTgxMDM3OCAsIDAuMjI2NDAzNzQsIDAuMDY4NDA3MjUsCiAgICAgICAwLjcwOTczNzg2LCAwLjc2MTEzNDY0LCAwLjY0MDQxMTYzLCAwLjQ2ODY5ODgyLCAwLjM0MTUyMjQgXSkKYXhpcyA9ICg1LCksIGtlZXBkaW1zID0gRmFsc2UsIHdoZXJlID0gVHJ1ZQoKICAgIGRlZiBfY291bnRfcmVkdWNlX2l0ZW1zKGFyciwgYXhpcywga2VlcGRpbXM9RmFsc2UsIHdoZXJlPVRydWUpOgogICAgICAgICMgZmFzdC1wYXRoIGZvciB0aGUgZGVmYXVsdCBjYXNlCiAgICAgICAgaWYgd2hlcmUgaXMgVHJ1ZToKICAgICAgICAgICAgIyBubyBib29sZWFuIG1hc2sgZ2l2ZW4sIGNhbGN1bGF0ZSBpdGVtcyBhY2NvcmRpbmcgdG8gYXhpcwogICAgICAgICAgICBpZiBheGlzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBheGlzID0gdHVwbGUocmFuZ2UoYXJyLm5kaW0pKQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKGF4aXMsIHR1cGxlKToKICAgICAgICAgICAgICAgIGF4aXMgPSAoYXhpcywpCiAgICAgICAgICAgIGl0ZW1zID0gMQogICAgICAgICAgICBmb3IgYXggaW4gYXhpczoKPiAgICAgICAgICAgICAgIGl0ZW1zICo9IGFyci5zaGFwZVttdS5ub3JtYWxpemVfYXhpc19pbmRleChheCwgYXJyLm5kaW0pXQobWzFtG1szMW1FICAgICAgICAgICAgICAgbnVtcHkuQXhpc0Vycm9yOiBheGlzIDUgaXMgb3V0IG9mIGJvdW5kcyBmb3IgYXJyYXkgb2YgZGltZW5zaW9uIDEbWzBtCgobWzFtG1szMW0vaG9tZS92c2NvZGUvLmxvY2FsL2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvbnVtcHkvY29yZS9fbWV0aG9kcy5weRtbMG06Nzc6IEF4aXNFcnJvcgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDYXB0dXJlZCBzdGRvdXQgY2FsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoxLjI0LjIKWzAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuIDAuXQo4MAphZGQoeDEsIHgyLCAvLCBvdXQ9Tm9uZSwgKiwgd2hlcmU9VHJ1ZSwgY2FzdGluZz0nc2FtZV9raW5kJywgb3JkZXI9J0snLCBkdHlwZT1Ob25lLCBzdWJvaz1UcnVlWywgc2lnbmF0dXJlLCBleHRvYmpdKQoKQWRkIGFyZ3VtZW50cyBlbGVtZW50LXdpc2UuCgpQYXJhbWV0ZXJzCi0tLS0tLS0tLS0KeDEsIHgyIDogYXJyYXlfbGlrZQogICAgVGhlIGFycmF5cyB0byBiZSBhZGRlZC4KICAgIElmIGBgeDEuc2hhcGUgIT0geDIuc2hhcGVgYCwgdGhleSBtdXN0IGJlIGJyb2FkY2FzdGFibGUgdG8gYSBjb21tb24KICAgIHNoYXBlICh3aGljaCBiZWNvbWVzIHRoZSBzaGFwZSBvZiB0aGUgb3V0cHV0KS4Kb3V0IDogbmRhcnJheSwgTm9uZSwgb3IgdHVwbGUgb2YgbmRhcnJheSBhbmQgTm9uZSwgb3B0aW9uYWwKICAgIEEgbG9jYXRpb24gaW50byB3aGljaCB0aGUgcmVzdWx0IGlzIHN0b3JlZC4gSWYgcHJvdmlkZWQsIGl0IG11c3QgaGF2ZQogICAgYSBzaGFwZSB0aGF0IHRoZSBpbnB1dHMgYnJvYWRjYXN0IHRvLiBJZiBub3QgcHJvdmlkZWQgb3IgTm9uZSwKICAgIGEgZnJlc2hseS1hbGxvY2F0ZWQgYXJyYXkgaXMgcmV0dXJuZWQuIEEgdHVwbGUgKHBvc3NpYmxlIG9ubHkgYXMgYQogICAga2V5d29yZCBhcmd1bWVudCkgbXVzdCBoYXZlIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG91dHB1dHMuCndoZXJlIDogYXJyYXlfbGlrZSwgb3B0aW9uYWwKICAgIFRoaXMgY29uZGl0aW9uIGlzIGJyb2FkY2FzdCBvdmVyIHRoZSBpbnB1dC4gQXQgbG9jYXRpb25zIHdoZXJlIHRoZQogICAgY29uZGl0aW9uIGlzIFRydWUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIGJlIHNldCB0byB0aGUgdWZ1bmMgcmVzdWx0LgogICAgRWxzZXdoZXJlLCB0aGUgYG91dGAgYXJyYXkgd2lsbCByZXRhaW4gaXRzIG9yaWdpbmFsIHZhbHVlLgogICAgTm90ZSB0aGF0IGlmIGFuIHVuaW5pdGlhbGl6ZWQgYG91dGAgYXJyYXkgaXMgY3JlYXRlZCB2aWEgdGhlIGRlZmF1bHQKICAgIGBgb3V0PU5vbmVgYCwgbG9jYXRpb25zIHdpdGhpbiBpdCB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIEZhbHNlIHdpbGwKICAgIHJlbWFpbiB1bmluaXRpYWxpemVkLgoqKmt3YXJncwogICAgRm9yIG90aGVyIGtleXdvcmQtb25seSBhcmd1bWVudHMsIHNlZSB0aGUKICAgIDpyZWY6YHVmdW5jIGRvY3MgPHVmdW5jcy5rd2FyZ3M+YC4KClJldHVybnMKLS0tLS0tLQphZGQgOiBuZGFycmF5IG9yIHNjYWxhcgogICAgVGhlIHN1bSBvZiBgeDFgIGFuZCBgeDJgLCBlbGVtZW50LXdpc2UuCiAgICBUaGlzIGlzIGEgc2NhbGFyIGlmIGJvdGggYHgxYCBhbmQgYHgyYCBhcmUgc2NhbGFycy4KCk5vdGVzCi0tLS0tCkVxdWl2YWxlbnQgdG8gYHgxYCArIGB4MmAgaW4gdGVybXMgb2YgYXJyYXkgYnJvYWRjYXN0aW5nLgoKRXhhbXBsZXMKLS0tLS0tLS0KPj4+IG5wLmFkZCgxLjAsIDQuMCkKNS4wCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4gbnAuYWRkKHgxLCB4MikKYXJyYXkoW1sgIDAuLCAgIDIuLCAgIDQuXSwKICAgICAgIFsgIDMuLCAgIDUuLCAgIDcuXSwKICAgICAgIFsgIDYuLCAgIDguLCAgMTAuXV0pCgpUaGUgYGArYGAgb3BlcmF0b3IgY2FuIGJlIHVzZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGBgbnAuYWRkYGAgb24gbmRhcnJheXMuCgo+Pj4geDEgPSBucC5hcmFuZ2UoOS4wKS5yZXNoYXBlKCgzLCAzKSkKPj4+IHgyID0gbnAuYXJhbmdlKDMuMCkKPj4+IHgxICsgeDIKYXJyYXkoW1sgMC4sICAyLiwgIDQuXSwKICAgICAgIFsgMy4sICA1LiwgIDcuXSwKICAgICAgIFsgNi4sICA4LiwgMTAuXV0pCk5vbmUKWzAuIDAuIDAuIDAuIDEuIDAuIDAuIDAuIDAuIDAuXQpbMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMKIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5XQpbOSA4IDcgNiA1IDQgMyAyIDEgMF0KW1swIDEgMl0KIFszIDQgNV0KIFs2IDcgOF1dCihhcnJheShbMCwgMSwgNF0pLCkKW1sxLiAwLiAwLl0KIFswLiAxLiAwLl0KIFswLiAwLiAxLl1dClswLjEyNDg3MDIgIDAuOTMyNDU3NzggMC4wMjcyNTIyNF0KMC44OTM1OTcyNzgwMjY2MgobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIHRlc3RfYXJyX2V4aXN0cyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXxtbMG0KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1lvdSBzaG91bGQgY3JlYXRlIGEgdmFyaWFibGUgbmFtZWQgYXJyJykKICAgIGRlZiB0ZXN0X2Fycl9leGlzdHMoKToKICAgICAgICB0cnk6Cj4gICAgICAgICAgIGZyb20gYXBwIGltcG9ydCBhcnIKChtbMW0bWzMxbS5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weRtbMG06MjA6IApfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL2FwcC5weRtbMG06Mjk6IGluIDxtb2R1bGU+CiAgICBwcmludChhcnIubWVhbig1KSkKG1sxbRtbMzFtL2hvbWUvdnNjb2RlLy5sb2NhbC9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL251bXB5L2NvcmUvX21ldGhvZHMucHkbWzBtOjE2OTogaW4gX21lYW4KICAgIHJjb3VudCA9IF9jb3VudF9yZWR1Y2VfaXRlbXMoYXJyLCBheGlzLCBrZWVwZGltcz1rZWVwZGltcywgd2hlcmU9d2hlcmUpCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gCgphcnIgPSBhcnJheShbMC45NTIxMTQzNCwgMC40Mzg4MDUzNSwgMC45NDYzNTQ2NywgMC44MzMyNTMyNywgMC42NTc5Mzc3MiwKICAgICAgIDAuODg3MzA2ODYsIDAuMTM5MDgxNzIsIDAuNjEyNDY4MTcsIDAuMjQ5MTcyOTgsIDAuODQzMzYzODZdKQpheGlzID0gKDUsKSwga2VlcGRpbXMgPSBGYWxzZSwgd2hlcmUgPSBUcnVlCgogICAgZGVmIF9jb3VudF9yZWR1Y2VfaXRlbXMoYXJyLCBheGlzLCBrZWVwZGltcz1GYWxzZSwgd2hlcmU9VHJ1ZSk6CiAgICAgICAgIyBmYXN0LXBhdGggZm9yIHRoZSBkZWZhdWx0IGNhc2UKICAgICAgICBpZiB3aGVyZSBpcyBUcnVlOgogICAgICAgICAgICAjIG5vIGJvb2xlYW4gbWFzayBnaXZlbiwgY2FsY3VsYXRlIGl0ZW1zIGFjY29yZGluZyB0byBheGlzCiAgICAgICAgICAgIGlmIGF4aXMgaXMgTm9uZToKICAgICAgICAgICAgICAgIGF4aXMgPSB0dXBsZShyYW5nZShhcnIubmRpbSkpCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoYXhpcywgdHVwbGUpOgogICAgICAgICAgICAgICAgYXhpcyA9IChheGlzLCkKICAgICAgICAgICAgaXRlbXMgPSAxCiAgICAgICAgICAgIGZvciBheCBpbiBheGlzOgo+ICAgICAgICAgICAgICAgaXRlbXMgKj0gYXJyLnNoYXBlW211Lm5vcm1hbGl6ZV9heGlzX2luZGV4KGF4LCBhcnIubmRpbSldChtbMW0bWzMxbUUgICAgICAgICAgICAgICBudW1weS5BeGlzRXJyb3I6IGF4aXMgNSBpcyBvdXQgb2YgYm91bmRzIGZvciBhcnJheSBvZiBkaW1lbnNpb24gMRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL19tZXRob2RzLnB5G1swbTo3NzogQXhpc0Vycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KKGFycmF5KFswLCAxLCA0XSksKQpbWzEuIDAuIDAuXQogWzAuIDEuIDAuXQogWzAuIDAuIDEuXV0KWzAuMzcxNjAyNjUgMC40MTMyNDUzMyAwLjU2NjU5Mjc5XQowLjgxOTg0ODE4OTY3MDQ0ODcKG1szMW0bWzFtX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9hcnJfdmFsdWUgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18bWzBtCgpjYXBzeXMgPSA8X3B5dGVzdC5jYXB0dXJlLkNhcHR1cmVGaXh0dXJlIG9iamVjdCBhdCAweDc5ODdkMjBjNjQxMD4KCiAgICBAcHl0ZXN0Lm1hcmsuaXQoJ1RoZSBhcnJheSBzaG91bGQgaGF2ZSB0ZW4gcmFuZG9tIHZhbHVlcycpCiAgICBkZWYgdGVzdF9hcnJfdmFsdWUoY2Fwc3lzKToKPiAgICAgICBmcm9tIGFwcCBpbXBvcnQgYXJyCgobWzFtG1szMW0ubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHkbWzBtOjI2OiAKXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyAKG1sxbRtbMzFtLmxlYXJuL2V4ZXJjaXNlcy8wMTUtbWVhbi12YWx1ZS9hcHAucHkbWzBtOjI5OiBpbiA8bW9kdWxlPgogICAgcHJpbnQoYXJyLm1lYW4oNSkpChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL19tZXRob2RzLnB5G1swbToxNjk6IGluIF9tZWFuCiAgICByY291bnQgPSBfY291bnRfcmVkdWNlX2l0ZW1zKGFyciwgYXhpcywga2VlcGRpbXM9a2VlcGRpbXMsIHdoZXJlPXdoZXJlKQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIAoKYXJyID0gYXJyYXkoWzMuMTM5ODU2MzBlLTA0LCAyLjMwMTA1MzUzZS0wMSwgMi42NzU4NTQxOGUtMDEsIDYuMjc4MzUyNjRlLTAxLAogICAgICAgMS43Njc0OTYzN2UtMDIsIDIuNjYwMjYzNTZlLTAxLCAyLjMzOTcwMzA2ZS0wMSwgNy43MTAyNjgwNGUtMDEsCiAgICAgICA0LjM4OTgyODEwZS0wMSwgMS4zOTA4NDIyNWUtMDFdKQpheGlzID0gKDUsKSwga2VlcGRpbXMgPSBGYWxzZSwgd2hlcmUgPSBUcnVlCgogICAgZGVmIF9jb3VudF9yZWR1Y2VfaXRlbXMoYXJyLCBheGlzLCBrZWVwZGltcz1GYWxzZSwgd2hlcmU9VHJ1ZSk6CiAgICAgICAgIyBmYXN0LXBhdGggZm9yIHRoZSBkZWZhdWx0IGNhc2UKICAgICAgICBpZiB3aGVyZSBpcyBUcnVlOgogICAgICAgICAgICAjIG5vIGJvb2xlYW4gbWFzayBnaXZlbiwgY2FsY3VsYXRlIGl0ZW1zIGFjY29yZGluZyB0byBheGlzCiAgICAgICAgICAgIGlmIGF4aXMgaXMgTm9uZToKICAgICAgICAgICAgICAgIGF4aXMgPSB0dXBsZShyYW5nZShhcnIubmRpbSkpCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoYXhpcywgdHVwbGUpOgogICAgICAgICAgICAgICAgYXhpcyA9IChheGlzLCkKICAgICAgICAgICAgaXRlbXMgPSAxCiAgICAgICAgICAgIGZvciBheCBpbiBheGlzOgo+ICAgICAgICAgICAgICAgaXRlbXMgKj0gYXJyLnNoYXBlW211Lm5vcm1hbGl6ZV9heGlzX2luZGV4KGF4LCBhcnIubmRpbSldChtbMW0bWzMxbUUgICAgICAgICAgICAgICBudW1weS5BeGlzRXJyb3I6IGF4aXMgNSBpcyBvdXQgb2YgYm91bmRzIGZvciBhcnJheSBvZiBkaW1lbnNpb24gMRtbMG0KChtbMW0bWzMxbS9ob21lL3ZzY29kZS8ubG9jYWwvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9udW1weS9jb3JlL19tZXRob2RzLnB5G1swbTo3NzogQXhpc0Vycm9yCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhcHR1cmVkIHN0ZG91dCBjYWxsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjEuMjQuMgpbMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC4gMC5dCjgwCmFkZCh4MSwgeDIsIC8sIG91dD1Ob25lLCAqLCB3aGVyZT1UcnVlLCBjYXN0aW5nPSdzYW1lX2tpbmQnLCBvcmRlcj0nSycsIGR0eXBlPU5vbmUsIHN1Ym9rPVRydWVbLCBzaWduYXR1cmUsIGV4dG9ial0pCgpBZGQgYXJndW1lbnRzIGVsZW1lbnQtd2lzZS4KClBhcmFtZXRlcnMKLS0tLS0tLS0tLQp4MSwgeDIgOiBhcnJheV9saWtlCiAgICBUaGUgYXJyYXlzIHRvIGJlIGFkZGVkLgogICAgSWYgYGB4MS5zaGFwZSAhPSB4Mi5zaGFwZWBgLCB0aGV5IG11c3QgYmUgYnJvYWRjYXN0YWJsZSB0byBhIGNvbW1vbgogICAgc2hhcGUgKHdoaWNoIGJlY29tZXMgdGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQpLgpvdXQgOiBuZGFycmF5LCBOb25lLCBvciB0dXBsZSBvZiBuZGFycmF5IGFuZCBOb25lLCBvcHRpb25hbAogICAgQSBsb2NhdGlvbiBpbnRvIHdoaWNoIHRoZSByZXN1bHQgaXMgc3RvcmVkLiBJZiBwcm92aWRlZCwgaXQgbXVzdCBoYXZlCiAgICBhIHNoYXBlIHRoYXQgdGhlIGlucHV0cyBicm9hZGNhc3QgdG8uIElmIG5vdCBwcm92aWRlZCBvciBOb25lLAogICAgYSBmcmVzaGx5LWFsbG9jYXRlZCBhcnJheSBpcyByZXR1cm5lZC4gQSB0dXBsZSAocG9zc2libGUgb25seSBhcyBhCiAgICBrZXl3b3JkIGFyZ3VtZW50KSBtdXN0IGhhdmUgbGVuZ3RoIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3V0cHV0cy4Kd2hlcmUgOiBhcnJheV9saWtlLCBvcHRpb25hbAogICAgVGhpcyBjb25kaXRpb24gaXMgYnJvYWRjYXN0IG92ZXIgdGhlIGlucHV0LiBBdCBsb2NhdGlvbnMgd2hlcmUgdGhlCiAgICBjb25kaXRpb24gaXMgVHJ1ZSwgdGhlIGBvdXRgIGFycmF5IHdpbGwgYmUgc2V0IHRvIHRoZSB1ZnVuYyByZXN1bHQuCiAgICBFbHNld2hlcmUsIHRoZSBgb3V0YCBhcnJheSB3aWxsIHJldGFpbiBpdHMgb3JpZ2luYWwgdmFsdWUuCiAgICBOb3RlIHRoYXQgaWYgYW4gdW5pbml0aWFsaXplZCBgb3V0YCBhcnJheSBpcyBjcmVhdGVkIHZpYSB0aGUgZGVmYXVsdAogICAgYGBvdXQ9Tm9uZWBgLCBsb2NhdGlvbnMgd2l0aGluIGl0IHdoZXJlIHRoZSBjb25kaXRpb24gaXMgRmFsc2Ugd2lsbAogICAgcmVtYWluIHVuaW5pdGlhbGl6ZWQuCioqa3dhcmdzCiAgICBGb3Igb3RoZXIga2V5d29yZC1vbmx5IGFyZ3VtZW50cywgc2VlIHRoZQogICAgOnJlZjpgdWZ1bmMgZG9jcyA8dWZ1bmNzLmt3YXJncz5gLgoKUmV0dXJucwotLS0tLS0tCmFkZCA6IG5kYXJyYXkgb3Igc2NhbGFyCiAgICBUaGUgc3VtIG9mIGB4MWAgYW5kIGB4MmAsIGVsZW1lbnQtd2lzZS4KICAgIFRoaXMgaXMgYSBzY2FsYXIgaWYgYm90aCBgeDFgIGFuZCBgeDJgIGFyZSBzY2FsYXJzLgoKTm90ZXMKLS0tLS0KRXF1aXZhbGVudCB0byBgeDFgICsgYHgyYCBpbiB0ZXJtcyBvZiBhcnJheSBicm9hZGNhc3RpbmcuCgpFeGFtcGxlcwotLS0tLS0tLQo+Pj4gbnAuYWRkKDEuMCwgNC4wKQo1LjAKPj4+IHgxID0gbnAuYXJhbmdlKDkuMCkucmVzaGFwZSgoMywgMykpCj4+PiB4MiA9IG5wLmFyYW5nZSgzLjApCj4+PiBucC5hZGQoeDEsIHgyKQphcnJheShbWyAgMC4sICAgMi4sICAgNC5dLAogICAgICAgWyAgMy4sICAgNS4sICAgNy5dLAogICAgICAgWyAgNi4sICAgOC4sICAxMC5dXSkKClRoZSBgYCtgYCBvcGVyYXRvciBjYW4gYmUgdXNlZCBhcyBhIHNob3J0aGFuZCBmb3IgYGBucC5hZGRgYCBvbiBuZGFycmF5cy4KCj4+PiB4MSA9IG5wLmFyYW5nZSg5LjApLnJlc2hhcGUoKDMsIDMpKQo+Pj4geDIgPSBucC5hcmFuZ2UoMy4wKQo+Pj4geDEgKyB4MgphcnJheShbWyAwLiwgIDIuLCAgNC5dLAogICAgICAgWyAzLiwgIDUuLCAgNy5dLAogICAgICAgWyA2LiwgIDguLCAxMC5dXSkKTm9uZQpbMC4gMC4gMC4gMC4gMS4gMC4gMC4gMC4gMC4gMC5dClsxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMwogMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDldCls5IDggNyA2IDUgNCAzIDIgMSAwXQpbWzAgMSAyXQogWzMgNCA1XQogWzYgNyA4XV0KKGFycmF5KFswLCAxLCA0XSksKQpbWzEuIDAuIDAuXQogWzAuIDEuIDAuXQogWzAuIDAuIDEuXV0KWzAuNTA5NTQ0ODMgMC4yODkyMTc3NCAwLjgzMjI3OTU0XQowLjk1ODcxOTE5NzE5MzI1MjgKG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHk6OhtbMW10ZXN0X3ByaW50G1swbSAtIG51bXB5LkF4aXNFcnJvcjogYXhpcyA1IGlzIG91dCBvZiBib3VuZHMgZm9yIGFycmF5IG9mIGRpbWVuc2lvbiAxChtbMzFtRkFJTEVEG1swbSAubGVhcm4vZXhlcmNpc2VzLzAxNS1tZWFuLXZhbHVlL3Rlc3QucHk6OhtbMW10ZXN0X2Fycl9leGlzdHMbWzBtIC0gbnVtcHkuQXhpc0Vycm9yOiBheGlzIDUgaXMgb3V0IG9mIGJvdW5kcyBmb3IgYXJyYXkgb2YgZGltZW5zaW9uIDEKG1szMW1GQUlMRUQbWzBtIC5sZWFybi9leGVyY2lzZXMvMDE1LW1lYW4tdmFsdWUvdGVzdC5weTo6G1sxbXRlc3RfYXJyX3ZhbHVlG1swbSAtIG51bXB5LkF4aXNFcnJvcjogYXhpcyA1IGlzIG91dCBvZiBib3VuZHMgZm9yIGFycmF5IG9mIGRpbWVuc2lvbiAxChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0zIGZhaWxlZBtbMG0sIBtbMzJtMSBwYXNzZWQbWzBtG1szMW0gaW4gMC4xNnMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgb3V0cHV0IHNob3VsZCBiZSB0aGUgbWVhbiB2YWx1ZSBvZiB0aGUgYXJyYXkbWzM5bQogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAxLiAbWzM3bVlvdSBzaG91bGQgY3JlYXRlIGEgdmFyaWFibGUgbmFtZWQgYXJyG1szOW0KICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMi4gG1szN21UaGUgYXJyYXkgc2hvdWxkIGhhdmUgdGVuIHJhbmRvbSB2YWx1ZXMbWzM5bSAKCg==","exit_code":1},{"starting_at":1726266271936,"source_code":"I2ltcG9ydCBudW1weSBhcyBucAojcHJpbnQobnAuX192ZXJzaW9uX18pCiNwcmludChucC56ZXJvcygxMCkpCiN6ZXJvcz1ucC56ZXJvcygxMCkgCiNtZW1fc2l6ZT16ZXJvcy5pdGVtc2l6ZSAqIHplcm9zLnNpemUKI3ByaW50KG1lbV9zaXplKQojcHJpbnQobnAuaW5mbyhucC5hZGQpKQojYXJyID0gbnAuemVyb3MoMTApCiNhcnJbNF09MQojcHJpbnQoYXJyKQojYXJyPW5wLmFyYW5nZSgxMCw1MCkKI3ByaW50KGFycikKI3ZlY3Rvcj1ucC5hcmFuZ2UoMTApCiN2ZWN0b3JfaW52ZXJ0aWRvPXZlY3Rvcls6Oi0xXQojcHJpbnQodmVjdG9yX2ludmVydGlkbykKI2ltcG9ydCBudW1weSBhcyBucAojYXJyPW5wLmFyYW5nZSgwLDkpCiNtYXRyaXo9IG5wLnJlc2hhcGUoYXJyLCgzLDMpKQojcHJpbnQobWF0cml6KQojYXJyID0gbnAuYXJyYXkoWzEsMiwwLDAsNCwwXSkKI3ByaW50KG5wLm5vbnplcm8oYXJyKSkKI21hdHJpej1ucC5leWUoMywzKQojcHJpbnQobWF0cml6KQojYXJyPW5wLnJhbmRvbS5yYW5kb20oMykKI3ByaW50KGFycikKI2Fycj1ucC5yYW5kb20ucmFuZG9tKDEwKQojcHJpbnQoYXJyLm1heCgpKQppbXBvcnQgbnVtcHkgYXMgbnAKYXJyPW5wLnJhbmRvbS5yYW5kb20oMTApCnByaW50KGFyci5tZWFuKCkp","ended_at":1726266272387,"stdout":"","stderr":"","exit_code":1}],"is_testeable":true,"opened_at":1726264160632},{"slug":"016-array-border","position":16,"files":[{"path":".learn/exercises/016-array-border/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/016-array-border/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/016-array-border/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/016-array-border/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"017-add-border-to-array","position":17,"files":[{"path":".learn/exercises/017-add-border-to-array/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/017-add-border-to-array/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/017-add-border-to-array/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/017-add-border-to-array/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"018-result-of-expressions","position":18,"files":[{"path":".learn/exercises/018-result-of-expressions/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/018-result-of-expressions/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/018-result-of-expressions/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/018-result-of-expressions/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"019-diagonal","position":19,"files":[{"path":".learn/exercises/019-diagonal/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/019-diagonal/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/019-diagonal/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/019-diagonal/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"020-checkerboard-pattern","position":20,"files":[{"path":".learn/exercises/020-checkerboard-pattern/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/020-checkerboard-pattern/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/020-checkerboard-pattern/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/020-checkerboard-pattern/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true}],"workout_session":[{"started_at":1726111120970,"ended_at":1726111202203},{"started_at":1726178931928,"ended_at":1726179621023},{"started_at":1726184552033,"ended_at":1726187174978},{"started_at":1726239607428,"ended_at":1726241054778},{"started_at":1726241684684,"ended_at":1726243537912},{"started_at":1726262436329}],"user_id":12051,"last_interaction_at":1726266272387}